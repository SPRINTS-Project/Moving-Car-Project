
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000008fe  00000992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  000009a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ac  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afe  00000000  00000000  000028cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ac  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f9  00000000  00000000  00003d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
  8a:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

uint8_t volatile u8_gv_delay = 0; 


ISR(TIMER1_OVF)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	u8_gv_delay++;
  a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	
	TCNT1 = 61629;		// 500 ms with prescaler 1024 and F_CPU = 8M
  aa:	8d eb       	ldi	r24, 0xBD	; 189
  ac:	90 ef       	ldi	r25, 0xF0	; 240
  ae:	9d bd       	out	0x2d, r25	; 45
  b0:	8c bd       	out	0x2c, r24	; 44
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_1>:


ISR(EXT_INT0)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	u8_gv_delay = 0;
  cc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	u8_gs_v_progState = BTN_STOP;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <APP_start>:
{
	//DDRC = 0xff;
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	0b c0       	rjmp	.+22     	; 0xfc <APP_start+0x1a>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
  e6:	ec 2f       	mov	r30, r28
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e5 59       	subi	r30, 0x95	; 149
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	61 81       	ldd	r22, Z+1	; 0x01
  f4:	80 81       	ld	r24, Z
  f6:	0e 94 4c 03 	call	0x698	; 0x698 <LED_init>
{
	//DDRC = 0xff;
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
  fa:	cf 5f       	subi	r28, 0xFF	; 255
  fc:	c4 30       	cpi	r28, 0x04	; 4
  fe:	98 f3       	brcs	.-26     	; 0xe6 <APP_start+0x4>
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	12 c0       	rjmp	.+36     	; 0x128 <APP_start+0x46>
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(portd,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
 104:	8c 2f       	mov	r24, r28
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	8e 0f       	add	r24, r30
 114:	9f 1f       	adc	r25, r31
 116:	fc 01       	movw	r30, r24
 118:	ef 59       	subi	r30, 0x9F	; 159
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	42 81       	ldd	r20, Z+2	; 0x02
 11e:	61 81       	ldd	r22, Z+1	; 0x01
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 17 03 	call	0x62e	; 0x62e <BUTTON_init>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	c2 30       	cpi	r28, 0x02	; 2
 12a:	60 f3       	brcs	.-40     	; 0x104 <APP_start+0x22>
	timer1.timer_mode = 0;
	timer1.timer_InitialValue = 61629;
	TIMER_MANGER_init(&timer1);*/
	
	
	GICR = 1<<INT0;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	85 bf       	out	0x35, r24	; 53
	
	
	TCCR1A = 0x00;
 134:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 1<< CS10 | 1<<CS12;
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1 << TOIE1;
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 61629;
 13e:	8d eb       	ldi	r24, 0xBD	; 189
 140:	90 ef       	ldi	r25, 0xF0	; 240
 142:	9d bd       	out	0x2d, r25	; 45
 144:	8c bd       	out	0x2c, r24	; 44
	
	
	sei();
 146:	78 94       	sei
	while(1)
	{
		BUTTON_mainTask();
 148:	0e 94 0c 03 	call	0x618	; 0x618 <BUTTON_mainTask>
		while (u8_gs_v_progState == BTN_STOP)
 14c:	19 c0       	rjmp	.+50     	; 0x180 <APP_start+0x9e>
		{
			BUTTON_mainTask();
 14e:	0e 94 0c 03 	call	0x618	; 0x618 <BUTTON_mainTask>
			LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
			LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 15a:	66 e0       	ldi	r22, 0x06	; 6
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
			LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
			LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
			
			// Here We Will STOP motors
			
			
			
			btnState = BUTTON_getState(st_gc_btn_config[0].u8_a_ID);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 3b 03 	call	0x676	; 0x676 <BUTTON_getState>
			//PORTC = btnState;
			if (btnState == BT_RELEASED)
 178:	85 30       	cpi	r24, 0x05	; 5
 17a:	11 f4       	brne	.+4      	; 0x180 <APP_start+0x9e>
			{
				u8_gs_v_progState = BTN_START;
 17c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	sei();
	while(1)
	{
		BUTTON_mainTask();
		while (u8_gs_v_progState == BTN_STOP)
 180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	19 f3       	breq	.-58     	; 0x14e <APP_start+0x6c>
 188:	cc c0       	rjmp	.+408    	; 0x322 <APP_start+0x240>
				u8_gs_v_progState = BTN_START;
			}
		}
		while (u8_gs_v_progState == BTN_START)
		{
			if (u8_gv_delay>= 2)										// 1s delay
 18a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	08 f4       	brcc	.+2      	; 0x194 <APP_start+0xb2>
 192:	c7 c0       	rjmp	.+398    	; 0x322 <APP_start+0x240>
			{
				if (u8_gv_delay <= 8 )									// longest side for 3s with speed 50%
 194:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 198:	89 30       	cpi	r24, 0x09	; 9
 19a:	88 f4       	brcc	.+34     	; 0x1be <APP_start+0xdc>
				{
					// car move forward with 50% speed
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 1a4:	66 e0       	ldi	r22, 0x06	; 6
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 1b4:	67 e0       	ldi	r22, 0x07	; 7
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
 1bc:	b2 c0       	rjmp	.+356    	; 0x322 <APP_start+0x240>
				}
				else if (u8_gv_delay>8 && u8_gv_delay <=9)				// stop for 0.5		
 1be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1c2:	89 30       	cpi	r24, 0x09	; 9
 1c4:	a8 f0       	brcs	.+42     	; 0x1f0 <APP_start+0x10e>
 1c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1ca:	8a 30       	cpi	r24, 0x0A	; 10
 1cc:	88 f4       	brcc	.+34     	; 0x1f0 <APP_start+0x10e>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 1d6:	66 e0       	ldi	r22, 0x06	; 6
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 1e6:	67 e0       	ldi	r22, 0x07	; 7
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
 1ee:	99 c0       	rjmp	.+306    	; 0x322 <APP_start+0x240>
					
					// Here We Will STOP motors
					
					
				}
				else if (u8_gv_delay >9 && u8_gv_delay <=10)			// rotate 90 degree to right
 1f0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1f4:	8a 30       	cpi	r24, 0x0A	; 10
 1f6:	a8 f0       	brcs	.+42     	; 0x222 <APP_start+0x140>
 1f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1fc:	8b 30       	cpi	r24, 0x0B	; 11
 1fe:	88 f4       	brcc	.+34     	; 0x222 <APP_start+0x140>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 218:	67 e0       	ldi	r22, 0x07	; 7
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
 220:	80 c0       	rjmp	.+256    	; 0x322 <APP_start+0x240>
				}
				else if (u8_gv_delay > 10 && u8_gv_delay <=11)			// Stop the car for 0.5 s
 222:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 226:	8b 30       	cpi	r24, 0x0B	; 11
 228:	a8 f0       	brcs	.+42     	; 0x254 <APP_start+0x172>
 22a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 22e:	8c 30       	cpi	r24, 0x0C	; 12
 230:	88 f4       	brcc	.+34     	; 0x254 <APP_start+0x172>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 23a:	66 e0       	ldi	r22, 0x06	; 6
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
 252:	67 c0       	rjmp	.+206    	; 0x322 <APP_start+0x240>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay > 11 && u8_gv_delay <= 15)				// short size for 2 s with speed 30%
 254:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 258:	8c 30       	cpi	r24, 0x0C	; 12
 25a:	a8 f0       	brcs	.+42     	; 0x286 <APP_start+0x1a4>
 25c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	88 f4       	brcc	.+34     	; 0x286 <APP_start+0x1a4>
				{
					// move forward
					LED_on(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 26c:	66 e0       	ldi	r22, 0x06	; 6
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 27c:	67 e0       	ldi	r22, 0x07	; 7
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
 284:	4e c0       	rjmp	.+156    	; 0x322 <APP_start+0x240>
				}
				else if (u8_gv_delay>15 && u8_gv_delay <=16)				// stop for 0.5		
 286:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 28a:	80 31       	cpi	r24, 0x10	; 16
 28c:	a8 f0       	brcs	.+42     	; 0x2b8 <APP_start+0x1d6>
 28e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 292:	81 31       	cpi	r24, 0x11	; 17
 294:	88 f4       	brcc	.+34     	; 0x2b8 <APP_start+0x1d6>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 296:	65 e0       	ldi	r22, 0x05	; 5
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2ae:	67 e0       	ldi	r22, 0x07	; 7
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
 2b6:	35 c0       	rjmp	.+106    	; 0x322 <APP_start+0x240>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay >16 && u8_gv_delay <=17)			// rotate 90 degree to right
 2b8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2bc:	81 31       	cpi	r24, 0x11	; 17
 2be:	a8 f0       	brcs	.+42     	; 0x2ea <APP_start+0x208>
 2c0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2c4:	82 31       	cpi	r24, 0x12	; 18
 2c6:	88 f4       	brcc	.+34     	; 0x2ea <APP_start+0x208>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 2c8:	65 e0       	ldi	r22, 0x05	; 5
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 2d0:	66 e0       	ldi	r22, 0x06	; 6
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
 2e8:	1c c0       	rjmp	.+56     	; 0x322 <APP_start+0x240>
				}
				else if (u8_gv_delay > 17 && u8_gv_delay <=18)			// Stop the car for 0.5 s
 2ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2ee:	82 31       	cpi	r24, 0x12	; 18
 2f0:	a8 f0       	brcs	.+42     	; 0x31c <APP_start+0x23a>
 2f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2f6:	83 31       	cpi	r24, 0x13	; 19
 2f8:	88 f4       	brcc	.+34     	; 0x31c <APP_start+0x23a>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_on>
 31a:	03 c0       	rjmp	.+6      	; 0x322 <APP_start+0x240>
					// Here We Will STOP motors
					
					
				}
				else{
					u8_gv_delay = 2;
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			if (btnState == BT_RELEASED)
			{
				u8_gs_v_progState = BTN_START;
			}
		}
		while (u8_gs_v_progState == BTN_START)
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	88 23       	and	r24, r24
 328:	09 f4       	brne	.+2      	; 0x32c <APP_start+0x24a>
 32a:	2f cf       	rjmp	.-418    	; 0x18a <APP_start+0xa8>
 32c:	0d cf       	rjmp	.-486    	; 0x148 <APP_start+0x66>

0000032e <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(u8_en_btnIdType en_a_BtnId)
{
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	1f 92       	push	r1
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8BtnValue);
 33c:	08 2f       	mov	r16, r24
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	f8 01       	movw	r30, r16
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	e0 0f       	add	r30, r16
 34c:	f1 1f       	adc	r31, r17
 34e:	eb 58       	subi	r30, 0x8B	; 139
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	61 81       	ldd	r22, Z+1	; 0x01
 354:	ae 01       	movw	r20, r28
 356:	4f 5f       	subi	r20, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	80 81       	ld	r24, Z
 35c:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	61 f4       	brne	.+24     	; 0x37e <vidPrePushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
 366:	f8 01       	movw	r30, r16
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	0e 0f       	add	r16, r30
 372:	1f 1f       	adc	r17, r31
 374:	f8 01       	movw	r30, r16
 376:	eb 58       	subi	r30, 0x8B	; 139
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	82 83       	std	Z+2, r24	; 0x02
 37c:	0b c0       	rjmp	.+22     	; 0x394 <vidPrePushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 37e:	f8 01       	movw	r30, r16
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	0e 0f       	add	r16, r30
 38a:	1f 1f       	adc	r17, r31
 38c:	f8 01       	movw	r30, r16
 38e:	eb 58       	subi	r30, 0x8B	; 139
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	12 82       	std	Z+2, r1	; 0x02
	}
}
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <vidPushState>:
static void vidPushState(u8_en_btnIdType en_a_BtnId)
{
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 3ae:	08 2f       	mov	r16, r24
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	f8 01       	movw	r30, r16
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e0 0f       	add	r30, r16
 3be:	f1 1f       	adc	r31, r17
 3c0:	eb 58       	subi	r30, 0x8B	; 139
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	61 81       	ldd	r22, Z+1	; 0x01
 3c6:	ae 01       	movw	r20, r28
 3c8:	4f 5f       	subi	r20, 0xFF	; 255
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	80 81       	ld	r24, Z
 3ce:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	69 f4       	brne	.+26     	; 0x3f2 <vidPushState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
 3d8:	f8 01       	movw	r30, r16
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	0e 0f       	add	r16, r30
 3e4:	1f 1f       	adc	r17, r31
 3e6:	f8 01       	movw	r30, r16
 3e8:	eb 58       	subi	r30, 0x8B	; 139
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	82 83       	std	Z+2, r24	; 0x02
 3f0:	0c c0       	rjmp	.+24     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 3f2:	f8 01       	movw	r30, r16
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	0e 0f       	add	r16, r30
 3fe:	1f 1f       	adc	r17, r31
 400:	f8 01       	movw	r30, r16
 402:	eb 58       	subi	r30, 0x8B	; 139
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	82 83       	std	Z+2, r24	; 0x02
	}
}
 40a:	0f 90       	pop	r0
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <vidPreHoldState>:
static void vidPreHoldState(u8_en_btnIdType en_a_BtnId)
{
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	1f 92       	push	r1
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 424:	08 2f       	mov	r16, r24
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	f8 01       	movw	r30, r16
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	e0 0f       	add	r30, r16
 434:	f1 1f       	adc	r31, r17
 436:	eb 58       	subi	r30, 0x8B	; 139
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	61 81       	ldd	r22, Z+1	; 0x01
 43c:	ae 01       	movw	r20, r28
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	80 81       	ld	r24, Z
 444:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	69 f4       	brne	.+26     	; 0x468 <vidPreHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
 44e:	f8 01       	movw	r30, r16
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	0e 0f       	add	r16, r30
 45a:	1f 1f       	adc	r17, r31
 45c:	f8 01       	movw	r30, r16
 45e:	eb 58       	subi	r30, 0x8B	; 139
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	82 83       	std	Z+2, r24	; 0x02
 466:	0c c0       	rjmp	.+24     	; 0x480 <vidPreHoldState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
 468:	f8 01       	movw	r30, r16
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	0e 0f       	add	r16, r30
 474:	1f 1f       	adc	r17, r31
 476:	f8 01       	movw	r30, r16
 478:	eb 58       	subi	r30, 0x8B	; 139
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	82 83       	std	Z+2, r24	; 0x02
	}
}
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <vidHoldState>:
static void vidHoldState(u8_en_btnIdType en_a_BtnId)
{
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	1f 92       	push	r1
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 49a:	08 2f       	mov	r16, r24
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	f8 01       	movw	r30, r16
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	e0 0f       	add	r30, r16
 4aa:	f1 1f       	adc	r31, r17
 4ac:	eb 58       	subi	r30, 0x8B	; 139
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	61 81       	ldd	r22, Z+1	; 0x01
 4b2:	ae 01       	movw	r20, r28
 4b4:	4f 5f       	subi	r20, 0xFF	; 255
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	80 81       	ld	r24, Z
 4ba:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	69 f4       	brne	.+26     	; 0x4de <vidHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 4c4:	f8 01       	movw	r30, r16
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	0e 0f       	add	r16, r30
 4d0:	1f 1f       	adc	r17, r31
 4d2:	f8 01       	movw	r30, r16
 4d4:	eb 58       	subi	r30, 0x8B	; 139
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
 4d8:	13 82       	std	Z+3, r1	; 0x03
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	82 83       	std	Z+2, r24	; 0x02
	}
	else
	{
		// do nothing
	}
}
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <vidPreReleaseState>:
static void vidPreReleaseState(u8_en_btnIdType en_a_BtnId)
{
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	1f 92       	push	r1
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 4f8:	08 2f       	mov	r16, r24
 4fa:	10 e0       	ldi	r17, 0x00	; 0
 4fc:	f8 01       	movw	r30, r16
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	e0 0f       	add	r30, r16
 508:	f1 1f       	adc	r31, r17
 50a:	eb 58       	subi	r30, 0x8B	; 139
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	61 81       	ldd	r22, Z+1	; 0x01
 510:	ae 01       	movw	r20, r28
 512:	4f 5f       	subi	r20, 0xFF	; 255
 514:	5f 4f       	sbci	r21, 0xFF	; 255
 516:	80 81       	ld	r24, Z
 518:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	71 f4       	brne	.+28     	; 0x53e <vidPreReleaseState+0x54>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 522:	f8 01       	movw	r30, r16
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	0e 0f       	add	r16, r30
 52e:	1f 1f       	adc	r17, r31
 530:	f8 01       	movw	r30, r16
 532:	eb 58       	subi	r30, 0x8B	; 139
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	83 81       	ldd	r24, Z+3	; 0x03
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	83 83       	std	Z+3, r24	; 0x03
 53c:	0d c0       	rjmp	.+26     	; 0x558 <vidPreReleaseState+0x6e>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 53e:	f8 01       	movw	r30, r16
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	0e 0f       	add	r16, r30
 54a:	1f 1f       	adc	r17, r31
 54c:	f8 01       	movw	r30, r16
 54e:	eb 58       	subi	r30, 0x8B	; 139
 550:	ff 4f       	sbci	r31, 0xFF	; 255
 552:	85 e0       	ldi	r24, 0x05	; 5
 554:	82 83       	std	Z+2, r24	; 0x02
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);	
 556:	13 82       	std	Z+3, r1	; 0x03
	}
}
 558:	0f 90       	pop	r0
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	08 95       	ret

00000564 <vidReleaseState>:
static void vidReleaseState(u8_en_btnIdType en_a_BtnId)
{
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	1f 92       	push	r1
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 572:	08 2f       	mov	r16, r24
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	f8 01       	movw	r30, r16
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	e0 0f       	add	r30, r16
 582:	f1 1f       	adc	r31, r17
 584:	eb 58       	subi	r30, 0x8B	; 139
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	61 81       	ldd	r22, Z+1	; 0x01
 58a:	ae 01       	movw	r20, r28
 58c:	4f 5f       	subi	r20, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	80 81       	ld	r24, Z
 592:	0e 94 12 04 	call	0x824	; 0x824 <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	81 11       	cpse	r24, r1
 59a:	0b c0       	rjmp	.+22     	; 0x5b2 <vidReleaseState+0x4e>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 59c:	f8 01       	movw	r30, r16
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	0e 0f       	add	r16, r30
 5a8:	1f 1f       	adc	r17, r31
 5aa:	f8 01       	movw	r30, r16
 5ac:	eb 58       	subi	r30, 0x8B	; 139
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	12 82       	std	Z+2, r1	; 0x02
	}
	else
	{
		/* Do nothing */
	}
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(u8_en_btnIdType en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	2e 0f       	add	r18, r30
 5ce:	3f 1f       	adc	r19, r31
 5d0:	f9 01       	movw	r30, r18
 5d2:	eb 58       	subi	r30, 0x8B	; 139
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	92 81       	ldd	r25, Z+2	; 0x02
 5d8:	92 30       	cpi	r25, 0x02	; 2
 5da:	91 f0       	breq	.+36     	; 0x600 <vidUpdateBtnState+0x42>
 5dc:	28 f4       	brcc	.+10     	; 0x5e8 <vidUpdateBtnState+0x2a>
 5de:	99 23       	and	r25, r25
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <vidUpdateBtnState+0x36>
 5e2:	91 30       	cpi	r25, 0x01	; 1
 5e4:	51 f0       	breq	.+20     	; 0x5fa <vidUpdateBtnState+0x3c>
 5e6:	08 95       	ret
 5e8:	94 30       	cpi	r25, 0x04	; 4
 5ea:	81 f0       	breq	.+32     	; 0x60c <vidUpdateBtnState+0x4e>
 5ec:	60 f0       	brcs	.+24     	; 0x606 <vidUpdateBtnState+0x48>
 5ee:	95 30       	cpi	r25, 0x05	; 5
 5f0:	81 f0       	breq	.+32     	; 0x612 <vidUpdateBtnState+0x54>
 5f2:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
 5f4:	0e 94 97 01 	call	0x32e	; 0x32e <vidPrePushState>
		break;
 5f8:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
 5fa:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <vidPushState>
		break;
 5fe:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
 600:	0e 94 0b 02 	call	0x416	; 0x416 <vidPreHoldState>
		break;
 604:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
 606:	0e 94 46 02 	call	0x48c	; 0x48c <vidHoldState>
		break;
 60a:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
 60c:	0e 94 75 02 	call	0x4ea	; 0x4ea <vidPreReleaseState>
		break;
 610:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
 612:	0e 94 b2 02 	call	0x564	; 0x564 <vidReleaseState>
 616:	08 95       	ret

00000618 <BUTTON_mainTask>:
/******************************************************************************/
/*********************** Public Functions Implementation **********************/
/******************************************************************************/

void BUTTON_mainTask(void)
{
 618:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	04 c0       	rjmp	.+8      	; 0x626 <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
 61e:	8c 2f       	mov	r24, r28
 620:	0e 94 df 02 	call	0x5be	; 0x5be <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 624:	cf 5f       	subi	r28, 0xFF	; 255
 626:	c2 30       	cpi	r28, 0x02	; 2
 628:	d0 f3       	brcs	.-12     	; 0x61e <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
	}
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <BUTTON_init>:
u8_en_btnStateType BUTTON_init(uint8_t u8_a_port , uint8_t u8_a_pin, u8_en_btnIdType en_btnId)
{
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	18 2f       	mov	r17, r24
 636:	d6 2f       	mov	r29, r22
 638:	c4 2f       	mov	r28, r20
	uint8_t u8_RetVal;
	// Set button pin as input
	u8_RetVal = DIO_init(u8_a_port, u8_a_pin , STD_INPUT);
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_init>
	
	// Enable PULLUP
	u8_RetVal = DIO_writePIN(u8_a_port, u8_a_pin, STD_HIGH);
 640:	41 e0       	ldi	r20, 0x01	; 1
 642:	6d 2f       	mov	r22, r29
 644:	81 2f       	mov	r24, r17
 646:	0e 94 97 03 	call	0x72e	; 0x72e <DIO_writePIN>
	
	st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
 64a:	4c 2f       	mov	r20, r28
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	fa 01       	movw	r30, r20
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	e4 0f       	add	r30, r20
 65a:	f5 1f       	adc	r31, r21
 65c:	eb 58       	subi	r30, 0x8B	; 139
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	12 82       	std	Z+2, r1	; 0x02
	st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
 662:	13 82       	std	Z+3, r1	; 0x03
	st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
 664:	14 82       	std	Z+4, r1	; 0x04
	st_gs_strBtnInfo[en_btnId].port = u8_a_port;
 666:	10 83       	st	Z, r17
	st_gs_strBtnInfo[en_btnId].pin = u8_a_pin;
 668:	d1 83       	std	Z+1, r29	; 0x01
		
		st_gs_strBtnInfo[u8Index].u8_a_btnState     = BT_PRE_PUSH;
		st_gs_strBtnInfo[u8Index].u8_a_debounceThreshold  = ((uint8_t)0U);
		st_gs_strBtnInfo[u8Index].u8_a_holdThreshold      = ((uint8_t)0U);
	}*/
	if (u8_RetVal == DIO_E_OK)
 66a:	81 11       	cpse	r24, r1
	{
		return BT_PRE_PUSH;
	}
	else
	{
		return BT_UNDEFINED;
 66c:	86 e0       	ldi	r24, 0x06	; 6
	}
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	08 95       	ret

00000676 <BUTTON_getState>:
u8_en_btnStateType BUTTON_getState(u8_en_btnIdType en_btnId)
{
	u8_en_btnStateType enuReturn;
	
	if(en_btnId < BUTTONS_NUM)
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	68 f4       	brcc	.+26     	; 0x694 <BUTTON_getState+0x1e>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	fc 01       	movw	r30, r24
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	8e 0f       	add	r24, r30
 688:	9f 1f       	adc	r25, r31
 68a:	fc 01       	movw	r30, r24
 68c:	eb 58       	subi	r30, 0x8B	; 139
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 694:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 696:	08 95       	ret

00000698 <LED_init>:
};
*/

u8_en_ledErrorType LED_init(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_init(u8_a_port, u8_a_pin, STD_OUTPUT);
 698:	41 e0       	ldi	r20, 0x01	; 1
 69a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_init>
}
 69e:	08 95       	ret

000006a0 <LED_off>:



u8_en_ledErrorType LED_off(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_OFF);
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	0e 94 97 03 	call	0x72e	; 0x72e <DIO_writePIN>
}
 6a6:	08 95       	ret

000006a8 <LED_on>:
u8_en_ledErrorType LED_on(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_ON);
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	0e 94 97 03 	call	0x72e	; 0x72e <DIO_writePIN>
 6ae:	08 95       	ret

000006b0 <main>:
#include "APP/app.h"


int main(void)
{
	APP_start();
 6b0:	0e 94 71 00 	call	0xe2	; 0xe2 <APP_start>
}
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 6ba:	68 30       	cpi	r22, 0x08	; 8
 6bc:	a0 f5       	brcc	.+104    	; 0x726 <DIO_init+0x6c>
	{
		if (port == porta)
 6be:	81 11       	cpse	r24, r1
 6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 6c2:	8a b3       	in	r24, 0x1a	; 26
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_init+0x12>
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_init+0xe>
 6d0:	48 2b       	or	r20, r24
 6d2:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
		}
		else if (port == portb)
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	59 f4       	brne	.+22     	; 0x6f2 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 6dc:	87 b3       	in	r24, 0x17	; 23
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_init+0x2c>
 6e2:	44 0f       	add	r20, r20
 6e4:	55 1f       	adc	r21, r21
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_init+0x28>
 6ea:	48 2b       	or	r20, r24
 6ec:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	08 95       	ret
		}
		else if (port == portc)
 6f2:	82 30       	cpi	r24, 0x02	; 2
 6f4:	59 f4       	brne	.+22     	; 0x70c <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 6f6:	84 b3       	in	r24, 0x14	; 20
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_init+0x46>
 6fc:	44 0f       	add	r20, r20
 6fe:	55 1f       	adc	r21, r21
 700:	6a 95       	dec	r22
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_init+0x42>
 704:	48 2b       	or	r20, r24
 706:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	08 95       	ret
		}
		else if (port == portd)
 70c:	83 30       	cpi	r24, 0x03	; 3
 70e:	69 f4       	brne	.+26     	; 0x72a <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 710:	81 b3       	in	r24, 0x11	; 17
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_init+0x60>
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_init+0x5c>
 71e:	48 2b       	or	r20, r24
 720:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 72a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 72c:	08 95       	ret

0000072e <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 72e:	68 30       	cpi	r22, 0x08	; 8
 730:	08 f0       	brcs	.+2      	; 0x734 <DIO_writePIN+0x6>
 732:	74 c0       	rjmp	.+232    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		if (port == porta)
 734:	81 11       	cpse	r24, r1
 736:	1b c0       	rjmp	.+54     	; 0x76e <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 738:	41 30       	cpi	r20, 0x01	; 1
 73a:	61 f4       	brne	.+24     	; 0x754 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 73c:	2b b3       	in	r18, 0x1b	; 27
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_writePIN+0x1a>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_writePIN+0x16>
 74c:	82 2b       	or	r24, r18
 74e:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 754:	2b b3       	in	r18, 0x1b	; 27
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_writePIN+0x32>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_writePIN+0x2e>
 764:	80 95       	com	r24
 766:	82 23       	and	r24, r18
 768:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	08 95       	ret
		}
		else if (port == portb)
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	d9 f4       	brne	.+54     	; 0x7a8 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 772:	41 30       	cpi	r20, 0x01	; 1
 774:	61 f4       	brne	.+24     	; 0x78e <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 776:	28 b3       	in	r18, 0x18	; 24
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_writePIN+0x54>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_writePIN+0x50>
 786:	82 2b       	or	r24, r18
 788:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 78e:	28 b3       	in	r18, 0x18	; 24
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_writePIN+0x6c>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	6a 95       	dec	r22
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_writePIN+0x68>
 79e:	80 95       	com	r24
 7a0:	82 23       	and	r24, r18
 7a2:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
		}
		else if (port == portc)
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	d9 f4       	brne	.+54     	; 0x7e2 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 7ac:	41 30       	cpi	r20, 0x01	; 1
 7ae:	61 f4       	brne	.+24     	; 0x7c8 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 7b0:	25 b3       	in	r18, 0x15	; 21
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_writePIN+0x8e>
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	6a 95       	dec	r22
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_writePIN+0x8a>
 7c0:	82 2b       	or	r24, r18
 7c2:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 7c8:	25 b3       	in	r18, 0x15	; 21
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_writePIN+0xa6>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_writePIN+0xa2>
 7d8:	80 95       	com	r24
 7da:	82 23       	and	r24, r18
 7dc:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret
		}
		else if (port == portd)
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	e9 f4       	brne	.+58     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			if (state == STD_HIGH)
 7e6:	41 30       	cpi	r20, 0x01	; 1
 7e8:	61 f4       	brne	.+24     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				WR_PORT_D |= (1U << pin);
 7ea:	22 b3       	in	r18, 0x12	; 18
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_writePIN+0xc8>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_writePIN+0xc4>
 7fa:	82 2b       	or	r24, r18
 7fc:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 802:	22 b3       	in	r18, 0x12	; 18
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	80 95       	com	r24
 814:	82 23       	and	r24, r18
 816:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 820:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 822:	08 95       	ret

00000824 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 824:	68 30       	cpi	r22, 0x08	; 8
 826:	08 f0       	brcs	.+2      	; 0x82a <DIO_readPIN+0x6>
 828:	64 c0       	rjmp	.+200    	; 0x8f2 <__stack+0x93>
	{
		if (port == porta)
 82a:	81 11       	cpse	r24, r1
 82c:	17 c0       	rjmp	.+46     	; 0x85c <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 82e:	79 b3       	in	r23, 0x19	; 25
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	9c 01       	movw	r18, r24
 836:	06 2e       	mov	r0, r22
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_readPIN+0x1a>
 83a:	22 0f       	add	r18, r18
 83c:	33 1f       	adc	r19, r19
 83e:	0a 94       	dec	r0
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_readPIN+0x16>
 842:	87 2f       	mov	r24, r23
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	82 23       	and	r24, r18
 848:	93 23       	and	r25, r19
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_readPIN+0x2c>
 84c:	96 95       	lsr	r25
 84e:	87 95       	ror	r24
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_readPIN+0x28>
 854:	fa 01       	movw	r30, r20
 856:	80 83       	st	Z, r24
			return DIO_E_OK;
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	08 95       	ret
		}
		else if (port == portb)
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	b9 f4       	brne	.+46     	; 0x88e <__stack+0x2f>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 860:	76 b3       	in	r23, 0x16	; 22
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	9c 01       	movw	r18, r24
 868:	06 2e       	mov	r0, r22
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	22 0f       	add	r18, r18
 86e:	33 1f       	adc	r19, r19
 870:	0a 94       	dec	r0
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	87 2f       	mov	r24, r23
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	82 23       	and	r24, r18
 87a:	93 23       	and	r25, r19
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	6a 95       	dec	r22
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	fa 01       	movw	r30, r20
 888:	80 83       	st	Z, r24
			return DIO_E_OK;
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	08 95       	ret
		}
		else if (port == portc)
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	b9 f4       	brne	.+46     	; 0x8c0 <__stack+0x61>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 892:	73 b3       	in	r23, 0x13	; 19
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	9c 01       	movw	r18, r24
 89a:	06 2e       	mov	r0, r22
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	22 0f       	add	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	0a 94       	dec	r0
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	87 2f       	mov	r24, r23
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	82 23       	and	r24, r18
 8ac:	93 23       	and	r25, r19
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	96 95       	lsr	r25
 8b2:	87 95       	ror	r24
 8b4:	6a 95       	dec	r22
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	fa 01       	movw	r30, r20
 8ba:	80 83       	st	Z, r24
			return DIO_E_OK;
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	08 95       	ret
		}
		else if (port == portd)
 8c0:	83 30       	cpi	r24, 0x03	; 3
 8c2:	c9 f4       	brne	.+50     	; 0x8f6 <__stack+0x97>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 8c4:	70 b3       	in	r23, 0x10	; 16
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	9c 01       	movw	r18, r24
 8cc:	06 2e       	mov	r0, r22
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	22 0f       	add	r18, r18
 8d2:	33 1f       	adc	r19, r19
 8d4:	0a 94       	dec	r0
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	87 2f       	mov	r24, r23
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	82 23       	and	r24, r18
 8de:	93 23       	and	r25, r19
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	6a 95       	dec	r22
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	fa 01       	movw	r30, r20
 8ec:	80 83       	st	Z, r24
			return DIO_E_OK;
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 8f6:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 8f8:	08 95       	ret

000008fa <_exit>:
 8fa:	f8 94       	cli

000008fc <__stop_program>:
 8fc:	ff cf       	rjmp	.-2      	; 0x8fc <__stop_program>
