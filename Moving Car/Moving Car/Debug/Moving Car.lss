
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001832  000018c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080007a  0080007a  000018e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003147  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc7  00000000  00000000  00004d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023d8  00000000  00000000  00005d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000690  00000000  00000000  000080dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001062  00000000  00000000  0000876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fa2  00000000  00000000  000097ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__vector_1>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	5b 07       	cpc	r21, r27
      56:	66 07       	cpc	r22, r22
      58:	71 07       	cpc	r23, r17
      5a:	7f 08       	sbc	r7, r15
      5c:	7c 07       	cpc	r23, r28
      5e:	7f 08       	sbc	r7, r15
      60:	87 07       	cpc	r24, r23
      62:	92 07       	cpc	r25, r18
      64:	9d 07       	cpc	r25, r29
      66:	a8 07       	cpc	r26, r24
      68:	be 07       	cpc	r27, r30
      6a:	c9 07       	cpc	r28, r25
      6c:	d4 07       	cpc	r29, r20
      6e:	81 08       	sbc	r8, r1
      70:	df 07       	cpc	r29, r31
      72:	81 08       	sbc	r8, r1
      74:	ea 07       	cpc	r30, r26
      76:	f5 07       	cpc	r31, r21
      78:	00 08       	sbc	r0, r0
      7a:	0b 08       	sbc	r0, r11
      7c:	21 08       	sbc	r2, r1
      7e:	2c 08       	sbc	r2, r12
      80:	37 08       	sbc	r3, r7
      82:	42 08       	sbc	r4, r2
      84:	4d 08       	sbc	r4, r13
      86:	58 08       	sbc	r5, r8
      88:	63 08       	sbc	r6, r3
      8a:	6e 08       	sbc	r6, r14

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e2 e3       	ldi	r30, 0x32	; 50
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 37       	cpi	r26, 0x7A	; 122
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	aa e7       	ldi	r26, 0x7A	; 122
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a6 39       	cpi	r26, 0x96	; 150
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      c2:	0c 94 17 0c 	jmp	0x182e	; 0x182e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <APP_timer0OvfHandeler>:



void APP_timer0OvfHandeler(void)
{
	u8_gv_pwm++;
      ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	
	TCNT0 = 240;		// 2 ms with prescaler 1024 and F_CPU = 8M
      d4:	80 ef       	ldi	r24, 0xF0	; 240
      d6:	82 bf       	out	0x32, r24	; 50
      d8:	08 95       	ret

000000da <APP_timer1OvfHandeler>:
}

void APP_timer1OvfHandeler(void)
{
	u8_gv_delay++;
      da:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
      de:	8f 5f       	subi	r24, 0xFF	; 255
      e0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u8_gv_delay>
	
	TCNT1 = 61629;		// 500 ms with prescaler 1024 and F_CPU = 8M
      e4:	8d eb       	ldi	r24, 0xBD	; 189
      e6:	90 ef       	ldi	r25, 0xF0	; 240
      e8:	9d bd       	out	0x2d, r25	; 45
      ea:	8c bd       	out	0x2c, r24	; 44
      ec:	08 95       	ret

000000ee <APP_extInt0OvfHandeler>:
}

void APP_extInt0OvfHandeler(void)
{
	u8_gv_delay = 0;
      ee:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <u8_gv_delay>
	u8_gv_pwm = 0 ;
      f2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
	u8_gs_v_progState = BTN_STOP;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      fc:	08 95       	ret

000000fe <APP_init>:
		}
	}
}

void APP_init(void)
{
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	62 97       	sbiw	r28, 0x12	; 18
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	0b c0       	rjmp	.+22     	; 0x12e <APP_init+0x30>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
     118:	e1 2f       	mov	r30, r17
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	ee 0f       	add	r30, r30
     11e:	ff 1f       	adc	r31, r31
     120:	ef 58       	subi	r30, 0x8F	; 143
     122:	ff 4f       	sbci	r31, 0xFF	; 255
     124:	61 81       	ldd	r22, Z+1	; 0x01
     126:	80 81       	ld	r24, Z
     128:	0e 94 0c 05 	call	0xa18	; 0xa18 <LED_init>
	}
}

void APP_init(void)
{
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
     12c:	1f 5f       	subi	r17, 0xFF	; 255
     12e:	14 30       	cpi	r17, 0x04	; 4
     130:	98 f3       	brcs	.-26     	; 0x118 <APP_init+0x1a>
     132:	10 e0       	ldi	r17, 0x00	; 0
     134:	11 c0       	rjmp	.+34     	; 0x158 <APP_init+0x5a>
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(st_gc_btn_config[u8_index].u8_a_port,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
     136:	e1 2f       	mov	r30, r17
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	cf 01       	movw	r24, r30
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	e8 0f       	add	r30, r24
     146:	f9 1f       	adc	r31, r25
     148:	e9 59       	subi	r30, 0x99	; 153
     14a:	ff 4f       	sbci	r31, 0xFF	; 255
     14c:	42 81       	ldd	r20, Z+2	; 0x02
     14e:	61 81       	ldd	r22, Z+1	; 0x01
     150:	80 81       	ld	r24, Z
     152:	0e 94 2f 04 	call	0x85e	; 0x85e <BUTTON_init>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
     156:	1f 5f       	subi	r17, 0xFF	; 255
     158:	12 30       	cpi	r17, 0x02	; 2
     15a:	68 f3       	brcs	.-38     	; 0x136 <APP_init+0x38>
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	16 c0       	rjmp	.+44     	; 0x18c <APP_init+0x8e>
		BUTTON_init(st_gc_btn_config[u8_index].u8_a_port,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
	}
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index+=2)
	{
		CAR_INIT(&st_gc_motorConfig[u8_index],&st_gc_motorConfig[u8_index+1]);
     160:	81 2f       	mov	r24, r17
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	9c 01       	movw	r18, r24
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	b9 01       	movw	r22, r18
     16c:	66 0f       	add	r22, r22
     16e:	77 1f       	adc	r23, r23
     170:	62 0f       	add	r22, r18
     172:	73 1f       	adc	r23, r19
     174:	6f 59       	subi	r22, 0x9F	; 159
     176:	7f 4f       	sbci	r23, 0xFF	; 255
     178:	9c 01       	movw	r18, r24
     17a:	22 0f       	add	r18, r18
     17c:	33 1f       	adc	r19, r19
     17e:	82 0f       	add	r24, r18
     180:	93 1f       	adc	r25, r19
     182:	8f 59       	subi	r24, 0x9F	; 159
     184:	9f 4f       	sbci	r25, 0xFF	; 255
     186:	0e 94 64 04 	call	0x8c8	; 0x8c8 <CAR_INIT>
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(st_gc_btn_config[u8_index].u8_a_port,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
	}
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index+=2)
     18a:	1e 5f       	subi	r17, 0xFE	; 254
     18c:	12 30       	cpi	r17, 0x02	; 2
     18e:	40 f3       	brcs	.-48     	; 0x160 <APP_init+0x62>
	{
		CAR_INIT(&st_gc_motorConfig[u8_index],&st_gc_motorConfig[u8_index+1]);
	}
	
	TimerManger_config_t st_l_timer1;
	st_l_timer1.timer_num = Timer1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	89 83       	std	Y+1, r24	; 0x01
	st_l_timer1.timer_mode = TIMER_NORMAL_MODE;
     194:	1a 82       	std	Y+2, r1	; 0x02
	st_l_timer1.timer_InitialValue = APP_TIMER_1_INIT_VALUE;
     196:	8c eb       	ldi	r24, 0xBC	; 188
     198:	90 ef       	ldi	r25, 0xF0	; 240
     19a:	9c 83       	std	Y+4, r25	; 0x04
     19c:	8b 83       	std	Y+3, r24	; 0x03
	st_l_timer1.call_back_function = APP_timer1OvfHandeler;
     19e:	8d e6       	ldi	r24, 0x6D	; 109
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	98 87       	std	Y+8, r25	; 0x08
     1a4:	8f 83       	std	Y+7, r24	; 0x07
	TIMER_MANGER_init(&st_l_timer1);
     1a6:	ce 01       	movw	r24, r28
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TIMER_MANGER_init>
	
	
	TimerManger_config_t st_l_timer0;
	st_l_timer0.timer_num = Timer0;
     1ae:	19 86       	std	Y+9, r1	; 0x09
	st_l_timer0.timer_mode = TIMER_NORMAL_MODE;
     1b0:	1a 86       	std	Y+10, r1	; 0x0a
	st_l_timer0.timer_InitialValue = APP_TIMER_0_INIT_VALUE;
     1b2:	80 ef       	ldi	r24, 0xF0	; 240
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	9c 87       	std	Y+12, r25	; 0x0c
     1b8:	8b 87       	std	Y+11, r24	; 0x0b
	st_l_timer0.call_back_function = APP_timer0OvfHandeler;
     1ba:	85 e6       	ldi	r24, 0x65	; 101
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	98 8b       	std	Y+16, r25	; 0x10
     1c0:	8f 87       	std	Y+15, r24	; 0x0f
	TIMER_MANGER_init(&st_l_timer0);
     1c2:	ce 01       	movw	r24, r28
     1c4:	09 96       	adiw	r24, 0x09	; 9
     1c6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <TIMER_MANGER_init>
	
	
	ext_interrupt_config_t st_l_int0Config ;
	st_l_int0Config.ext_interrupt_no = EXT_0;
     1ca:	19 8a       	std	Y+17, r1	; 0x11
	st_l_int0Config.edge_select = FALLING_EDGE;
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	8a 8b       	std	Y+18, r24	; 0x12
	ext_init(&st_l_int0Config,APP_extInt0OvfHandeler);
     1d0:	67 e7       	ldi	r22, 0x77	; 119
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	ce 01       	movw	r24, r28
     1d6:	41 96       	adiw	r24, 0x11	; 17
     1d8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ext_init>
	
	/*GICR = 1<<INT0;
	MCUCR = 1<<ISC01;*/
	
	
	sei();
     1dc:	78 94       	sei
}
     1de:	62 96       	adiw	r28, 0x12	; 18
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	08 95       	ret

000001f2 <APP_start>:
void APP_start(void)
{
	
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	APP_init();
     1f2:	0e 94 7f 00 	call	0xfe	; 0xfe <APP_init>
	
	while(1)
	{
		BUTTON_mainTask();
     1f6:	0e 94 24 04 	call	0x848	; 0x848 <BUTTON_mainTask>
		while (u8_gs_v_progState == BTN_STOP)
     1fa:	27 c0       	rjmp	.+78     	; 0x24a <APP_start+0x58>
		{
			ext_disable(EXT_0);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 08 05 	call	0xa10	; 0xa10 <ext_disable>
			//TCCR1B = 0;						// stop timer 1
			TIMER_MANGER_stop(Timer1);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 a8 05 	call	0xb50	; 0xb50 <TIMER_MANGER_stop>
			BUTTON_mainTask();
     208:	0e 94 24 04 	call	0x848	; 0x848 <BUTTON_mainTask>
			
			
			LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     20c:	65 e0       	ldi	r22, 0x05	; 5
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
			LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     214:	66 e0       	ldi	r22, 0x06	; 6
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
			LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
			LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     224:	67 e0       	ldi	r22, 0x07	; 7
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
			
			
			// Here We Will STOP motors
			CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     22c:	64 e6       	ldi	r22, 0x64	; 100
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	81 e6       	ldi	r24, 0x61	; 97
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
			
			btnState = BUTTON_getState(st_gc_btn_config[0].u8_a_ID);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <BUTTON_getState>
			
			if (btnState == BT_RELEASED)
     23e:	85 30       	cpi	r24, 0x05	; 5
     240:	11 f4       	brne	.+4      	; 0x246 <APP_start+0x54>
			{
				u8_gs_v_progState = BTN_START;
     242:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			u8_gv_delay = 0;
     246:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <u8_gv_delay>
	APP_init();
	
	while(1)
	{
		BUTTON_mainTask();
		while (u8_gs_v_progState == BTN_STOP)
     24a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	a9 f2       	breq	.-86     	; 0x1fc <APP_start+0xa>
     252:	7f c1       	rjmp	.+766    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
		{
			ext_enable(EXT_0);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	0e 94 04 05 	call	0xa08	; 0xa08 <ext_enable>
			//TCCR1B = 1<< CS10 | 1<<CS12;								// start timer 1
			TIMER_MANGER_start(F_CPU_1024,Timer1);
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <TIMER_MANGER_start>
			if (u8_gv_delay>= 2)										// 1s delay
     262:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	08 f4       	brcc	.+2      	; 0x26c <APP_start+0x7a>
     26a:	73 c1       	rjmp	.+742    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			{
				if (u8_gv_delay <= 8 )									// longest side for 3s with speed 50%
     26c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     270:	89 30       	cpi	r24, 0x09	; 9
     272:	b0 f5       	brcc	.+108    	; 0x2e0 <APP_start+0xee>
				{
					// car move forward with 50% speed
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     274:	65 e0       	ldi	r22, 0x05	; 5
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     27c:	66 e0       	ldi	r22, 0x06	; 6
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     28c:	67 e0       	ldi	r22, 0x07	; 7
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					
					u8_gv_pwm = 0;
     294:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
					//TCCR0 = 1<<CS02;									// start timer 0
					TIMER_MANGER_start(F_CPU_1024,Timer0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <TIMER_MANGER_start>
					while (u8_gv_pwm <= 5)
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <APP_start+0xbc>
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     2a2:	64 e6       	ldi	r22, 0x64	; 100
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	81 e6       	ldi	r24, 0x61	; 97
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 87 04 	call	0x90e	; 0x90e <CAR_FORWARD>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
					
					u8_gv_pwm = 0;
					//TCCR0 = 1<<CS02;									// start timer 0
					TIMER_MANGER_start(F_CPU_1024,Timer0);
					while (u8_gv_pwm <= 5)
     2ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     2b2:	86 30       	cpi	r24, 0x06	; 6
     2b4:	b0 f3       	brcs	.-20     	; 0x2a2 <APP_start+0xb0>
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <APP_start+0xd2>
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     2b8:	64 e6       	ldi	r22, 0x64	; 100
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	81 e6       	ldi	r24, 0x61	; 97
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
					TIMER_MANGER_start(F_CPU_1024,Timer0);
					while (u8_gv_pwm <= 5)
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
     2c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     2c8:	86 30       	cpi	r24, 0x06	; 6
     2ca:	20 f0       	brcs	.+8      	; 0x2d4 <APP_start+0xe2>
     2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     2d0:	8b 30       	cpi	r24, 0x0B	; 11
     2d2:	90 f3       	brcs	.-28     	; 0x2b8 <APP_start+0xc6>
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					TIMER_MANGER_stop(Timer0);										// stop timer 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 a8 05 	call	0xb50	; 0xb50 <TIMER_MANGER_stop>
					u8_gv_pwm = 0;
     2da:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
     2de:	39 c1       	rjmp	.+626    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
				}
				else if (u8_gv_delay>8 && u8_gv_delay <=9)				// stop for 0.5		
     2e0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     2e4:	89 30       	cpi	r24, 0x09	; 9
     2e6:	d8 f0       	brcs	.+54     	; 0x31e <APP_start+0x12c>
     2e8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     2ec:	8a 30       	cpi	r24, 0x0A	; 10
     2ee:	b8 f4       	brcc	.+46     	; 0x31e <APP_start+0x12c>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     2f0:	65 e0       	ldi	r22, 0x05	; 5
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     2f8:	66 e0       	ldi	r22, 0x06	; 6
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     308:	67 e0       	ldi	r22, 0x07	; 7
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					
					// Here We Will STOP motors
					CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     310:	64 e6       	ldi	r22, 0x64	; 100
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	81 e6       	ldi	r24, 0x61	; 97
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
     31c:	1a c1       	rjmp	.+564    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
					
				}
				else if (u8_gv_delay >9 && u8_gv_delay <=10)			// rotate 90 degree to right
     31e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     322:	8a 30       	cpi	r24, 0x0A	; 10
     324:	d0 f1       	brcs	.+116    	; 0x39a <APP_start+0x1a8>
     326:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     32a:	8b 30       	cpi	r24, 0x0B	; 11
     32c:	b0 f5       	brcc	.+108    	; 0x39a <APP_start+0x1a8>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     32e:	65 e0       	ldi	r22, 0x05	; 5
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     336:	66 e0       	ldi	r22, 0x06	; 6
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     346:	67 e0       	ldi	r22, 0x07	; 7
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					
					u8_gv_pwm = 0;
     34e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	87 e0       	ldi	r24, 0x07	; 7
     356:	0e 94 9d 05 	call	0xb3a	; 0xb3a <TIMER_MANGER_start>
					while (u8_gv_pwm <= 5)
     35a:	06 c0       	rjmp	.+12     	; 0x368 <APP_start+0x176>
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     35c:	64 e6       	ldi	r22, 0x64	; 100
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	81 e6       	ldi	r24, 0x61	; 97
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 aa 04 	call	0x954	; 0x954 <CAR_REVERSE_RIGHT>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
					
					u8_gv_pwm = 0;
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 5)
     368:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     36c:	86 30       	cpi	r24, 0x06	; 6
     36e:	b0 f3       	brcs	.-20     	; 0x35c <APP_start+0x16a>
     370:	06 c0       	rjmp	.+12     	; 0x37e <APP_start+0x18c>
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     372:	64 e6       	ldi	r22, 0x64	; 100
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	81 e6       	ldi	r24, 0x61	; 97
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 5)
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
     37e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     382:	86 30       	cpi	r24, 0x06	; 6
     384:	20 f0       	brcs	.+8      	; 0x38e <APP_start+0x19c>
     386:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     38a:	8b 30       	cpi	r24, 0x0B	; 11
     38c:	90 f3       	brcs	.-28     	; 0x372 <APP_start+0x180>
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					TIMER_MANGER_stop(Timer0);										// stop timer 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 a8 05 	call	0xb50	; 0xb50 <TIMER_MANGER_stop>
					u8_gv_pwm = 0;
     394:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
     398:	dc c0       	rjmp	.+440    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
				}
				else if (u8_gv_delay > 10 && u8_gv_delay <=11)			// Stop the car for 0.5 s
     39a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     39e:	8b 30       	cpi	r24, 0x0B	; 11
     3a0:	d8 f0       	brcs	.+54     	; 0x3d8 <APP_start+0x1e6>
     3a2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     3a6:	8c 30       	cpi	r24, 0x0C	; 12
     3a8:	b8 f4       	brcc	.+46     	; 0x3d8 <APP_start+0x1e6>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     3aa:	65 e0       	ldi	r22, 0x05	; 5
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     3b2:	66 e0       	ldi	r22, 0x06	; 6
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     3c2:	67 e0       	ldi	r22, 0x07	; 7
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					
					// Here We Will STOP motors
					CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     3ca:	64 e6       	ldi	r22, 0x64	; 100
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	81 e6       	ldi	r24, 0x61	; 97
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
     3d6:	bd c0       	rjmp	.+378    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
					
					
				}
				else if (u8_gv_delay > 11 && u8_gv_delay <= 15)				// short size for 2 s with speed 30%
     3d8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     3dc:	8c 30       	cpi	r24, 0x0C	; 12
     3de:	d0 f1       	brcs	.+116    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     3e0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     3e4:	80 31       	cpi	r24, 0x10	; 16
     3e6:	b0 f5       	brcc	.+108    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				{
					// move forward
					LED_on(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     3e8:	65 e0       	ldi	r22, 0x05	; 5
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     400:	67 e0       	ldi	r22, 0x07	; 7
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					
					
					
					u8_gv_pwm = 0;
     408:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	87 e0       	ldi	r24, 0x07	; 7
     410:	0e 94 9d 05 	call	0xb3a	; 0xb3a <TIMER_MANGER_start>
					while (u8_gv_pwm <= 3)
     414:	06 c0       	rjmp	.+12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     416:	64 e6       	ldi	r22, 0x64	; 100
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	81 e6       	ldi	r24, 0x61	; 97
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 87 04 	call	0x90e	; 0x90e <CAR_FORWARD>
					
					
					
					u8_gv_pwm = 0;
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 3)
     422:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     426:	84 30       	cpi	r24, 0x04	; 4
     428:	b0 f3       	brcs	.-20     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     42a:	06 c0       	rjmp	.+12     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 3 && u8_gv_pwm <= 10)
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     42c:	64 e6       	ldi	r22, 0x64	; 100
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	81 e6       	ldi	r24, 0x61	; 97
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 3)
					{
						CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 3 && u8_gv_pwm <= 10)
     438:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     43c:	84 30       	cpi	r24, 0x04	; 4
     43e:	20 f0       	brcs	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     444:	8b 30       	cpi	r24, 0x0B	; 11
     446:	90 f3       	brcs	.-28     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					TIMER_MANGER_stop(Timer0);										// stop timer 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 a8 05 	call	0xb50	; 0xb50 <TIMER_MANGER_stop>
					u8_gv_pwm = 0;
     44e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
     452:	7f c0       	rjmp	.+254    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
				}
				else if (u8_gv_delay>15 && u8_gv_delay <=16)				// stop for 0.5		
     454:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     458:	80 31       	cpi	r24, 0x10	; 16
     45a:	d8 f0       	brcs	.+54     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     45c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     460:	81 31       	cpi	r24, 0x11	; 17
     462:	b8 f4       	brcc	.+46     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     464:	65 e0       	ldi	r22, 0x05	; 5
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     46c:	66 e0       	ldi	r22, 0x06	; 6
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     47c:	67 e0       	ldi	r22, 0x07	; 7
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					
					// Here We Will STOP motors
					CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     484:	64 e6       	ldi	r22, 0x64	; 100
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	81 e6       	ldi	r24, 0x61	; 97
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
     490:	60 c0       	rjmp	.+192    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
					
					
				}
				else if (u8_gv_delay >16 && u8_gv_delay <=17)			// rotate 90 degree to right
     492:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     496:	81 31       	cpi	r24, 0x11	; 17
     498:	d0 f1       	brcs	.+116    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     49a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     49e:	82 31       	cpi	r24, 0x12	; 18
     4a0:	b0 f5       	brcc	.+108    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     4a2:	65 e0       	ldi	r22, 0x05	; 5
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     4aa:	66 e0       	ldi	r22, 0x06	; 6
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     4ba:	67 e0       	ldi	r22, 0x07	; 7
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					
					u8_gv_pwm = 0;
     4c2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	87 e0       	ldi	r24, 0x07	; 7
     4ca:	0e 94 9d 05 	call	0xb3a	; 0xb3a <TIMER_MANGER_start>
					while (u8_gv_pwm <= 5)
     4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     4d0:	64 e6       	ldi	r22, 0x64	; 100
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	81 e6       	ldi	r24, 0x61	; 97
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 aa 04 	call	0x954	; 0x954 <CAR_REVERSE_RIGHT>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
					
					u8_gv_pwm = 0;
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 5)
     4dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     4e0:	86 30       	cpi	r24, 0x06	; 6
     4e2:	b0 f3       	brcs	.-20     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     4e6:	64 e6       	ldi	r22, 0x64	; 100
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	81 e6       	ldi	r24, 0x61	; 97
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
					TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
					while (u8_gv_pwm <= 5)
					{
						CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)
     4f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     4f6:	86 30       	cpi	r24, 0x06	; 6
     4f8:	20 f0       	brcs	.+8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     4fe:	8b 30       	cpi	r24, 0x0B	; 11
     500:	90 f3       	brcs	.-28     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
					{
						CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
					}
					TIMER_MANGER_stop(Timer0);										// stop timer 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 a8 05 	call	0xb50	; 0xb50 <TIMER_MANGER_stop>
					u8_gv_pwm = 0;
     508:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
     50c:	22 c0       	rjmp	.+68     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
				}
				else if (u8_gv_delay > 17 && u8_gv_delay <=18)			// Stop the car for 0.5 s
     50e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     512:	82 31       	cpi	r24, 0x12	; 18
     514:	d8 f0       	brcs	.+54     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
     516:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u8_gv_delay>
     51a:	83 31       	cpi	r24, 0x13	; 19
     51c:	b8 f4       	brcc	.+46     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     526:	66 e0       	ldi	r22, 0x06	; 6
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 10 05 	call	0xa20	; 0xa20 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     536:	67 e0       	ldi	r22, 0x07	; 7
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 14 05 	call	0xa28	; 0xa28 <LED_on>
					
					// Here We Will STOP motors
					CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     53e:	64 e6       	ldi	r22, 0x64	; 100
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	81 e6       	ldi	r24, 0x61	; 97
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 cd 04 	call	0x99a	; 0x99a <CAR_STOP>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
					
				}
				else{
					u8_gv_delay = 2;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u8_gv_delay>
			{
				u8_gs_v_progState = BTN_START;
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
     552:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     55a:	7c ce       	rjmp	.-776    	; 0x254 <APP_start+0x62>
     55c:	4c ce       	rjmp	.-872    	; 0x1f6 <APP_start+0x4>

0000055e <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(u8_en_btnIdType en_a_BtnId)
{
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	1f 92       	push	r1
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8BtnValue);
     56c:	08 2f       	mov	r16, r24
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	f8 01       	movw	r30, r16
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	e0 0f       	add	r30, r16
     57c:	f1 1f       	adc	r31, r17
     57e:	e4 58       	subi	r30, 0x84	; 132
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	61 81       	ldd	r22, Z+1	; 0x01
     584:	ae 01       	movw	r20, r28
     586:	4f 5f       	subi	r20, 0xFF	; 255
     588:	5f 4f       	sbci	r21, 0xFF	; 255
     58a:	80 81       	ld	r24, Z
     58c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	61 f4       	brne	.+24     	; 0x5ae <vidPrePushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
     596:	f8 01       	movw	r30, r16
     598:	ee 0f       	add	r30, r30
     59a:	ff 1f       	adc	r31, r31
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	0e 0f       	add	r16, r30
     5a2:	1f 1f       	adc	r17, r31
     5a4:	f8 01       	movw	r30, r16
     5a6:	e4 58       	subi	r30, 0x84	; 132
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	82 83       	std	Z+2, r24	; 0x02
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <vidPrePushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     5ae:	f8 01       	movw	r30, r16
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	0e 0f       	add	r16, r30
     5ba:	1f 1f       	adc	r17, r31
     5bc:	f8 01       	movw	r30, r16
     5be:	e4 58       	subi	r30, 0x84	; 132
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	12 82       	std	Z+2, r1	; 0x02
	}
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <vidPushState>:
static void vidPushState(u8_en_btnIdType en_a_BtnId)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     5de:	08 2f       	mov	r16, r24
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	f8 01       	movw	r30, r16
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	e0 0f       	add	r30, r16
     5ee:	f1 1f       	adc	r31, r17
     5f0:	e4 58       	subi	r30, 0x84	; 132
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	61 81       	ldd	r22, Z+1	; 0x01
     5f6:	ae 01       	movw	r20, r28
     5f8:	4f 5f       	subi	r20, 0xFF	; 255
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	80 81       	ld	r24, Z
     5fe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	69 f4       	brne	.+26     	; 0x622 <vidPushState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
     608:	f8 01       	movw	r30, r16
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	0e 0f       	add	r16, r30
     614:	1f 1f       	adc	r17, r31
     616:	f8 01       	movw	r30, r16
     618:	e4 58       	subi	r30, 0x84	; 132
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	82 83       	std	Z+2, r24	; 0x02
     620:	0c c0       	rjmp	.+24     	; 0x63a <vidPushState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     622:	f8 01       	movw	r30, r16
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	0e 0f       	add	r16, r30
     62e:	1f 1f       	adc	r17, r31
     630:	f8 01       	movw	r30, r16
     632:	e4 58       	subi	r30, 0x84	; 132
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	82 83       	std	Z+2, r24	; 0x02
	}
}
     63a:	0f 90       	pop	r0
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <vidPreHoldState>:
static void vidPreHoldState(u8_en_btnIdType en_a_BtnId)
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	1f 92       	push	r1
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     654:	08 2f       	mov	r16, r24
     656:	10 e0       	ldi	r17, 0x00	; 0
     658:	f8 01       	movw	r30, r16
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e0 0f       	add	r30, r16
     664:	f1 1f       	adc	r31, r17
     666:	e4 58       	subi	r30, 0x84	; 132
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	61 81       	ldd	r22, Z+1	; 0x01
     66c:	ae 01       	movw	r20, r28
     66e:	4f 5f       	subi	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	80 81       	ld	r24, Z
     674:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	69 f4       	brne	.+26     	; 0x698 <vidPreHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
     67e:	f8 01       	movw	r30, r16
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	0e 0f       	add	r16, r30
     68a:	1f 1f       	adc	r17, r31
     68c:	f8 01       	movw	r30, r16
     68e:	e4 58       	subi	r30, 0x84	; 132
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	82 83       	std	Z+2, r24	; 0x02
     696:	0c c0       	rjmp	.+24     	; 0x6b0 <vidPreHoldState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
     698:	f8 01       	movw	r30, r16
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	0e 0f       	add	r16, r30
     6a4:	1f 1f       	adc	r17, r31
     6a6:	f8 01       	movw	r30, r16
     6a8:	e4 58       	subi	r30, 0x84	; 132
     6aa:	ff 4f       	sbci	r31, 0xFF	; 255
     6ac:	85 e0       	ldi	r24, 0x05	; 5
     6ae:	82 83       	std	Z+2, r24	; 0x02
	}
}
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <vidHoldState>:
static void vidHoldState(u8_en_btnIdType en_a_BtnId)
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	1f 92       	push	r1
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     6ca:	08 2f       	mov	r16, r24
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	f8 01       	movw	r30, r16
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e0 0f       	add	r30, r16
     6da:	f1 1f       	adc	r31, r17
     6dc:	e4 58       	subi	r30, 0x84	; 132
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	61 81       	ldd	r22, Z+1	; 0x01
     6e2:	ae 01       	movw	r20, r28
     6e4:	4f 5f       	subi	r20, 0xFF	; 255
     6e6:	5f 4f       	sbci	r21, 0xFF	; 255
     6e8:	80 81       	ld	r24, Z
     6ea:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	69 f4       	brne	.+26     	; 0x70e <vidHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     6f4:	f8 01       	movw	r30, r16
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	0e 0f       	add	r16, r30
     700:	1f 1f       	adc	r17, r31
     702:	f8 01       	movw	r30, r16
     704:	e4 58       	subi	r30, 0x84	; 132
     706:	ff 4f       	sbci	r31, 0xFF	; 255
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
     708:	13 82       	std	Z+3, r1	; 0x03
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	82 83       	std	Z+2, r24	; 0x02
	}
	else
	{
		// do nothing
	}
}
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <vidPreReleaseState>:
static void vidPreReleaseState(u8_en_btnIdType en_a_BtnId)
{
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     728:	08 2f       	mov	r16, r24
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	f8 01       	movw	r30, r16
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e0 0f       	add	r30, r16
     738:	f1 1f       	adc	r31, r17
     73a:	e4 58       	subi	r30, 0x84	; 132
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	61 81       	ldd	r22, Z+1	; 0x01
     740:	ae 01       	movw	r20, r28
     742:	4f 5f       	subi	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	80 81       	ld	r24, Z
     748:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	71 f4       	brne	.+28     	; 0x76e <vidPreReleaseState+0x54>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     752:	f8 01       	movw	r30, r16
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	0e 0f       	add	r16, r30
     75e:	1f 1f       	adc	r17, r31
     760:	f8 01       	movw	r30, r16
     762:	e4 58       	subi	r30, 0x84	; 132
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	83 81       	ldd	r24, Z+3	; 0x03
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	83 83       	std	Z+3, r24	; 0x03
     76c:	0d c0       	rjmp	.+26     	; 0x788 <vidPreReleaseState+0x6e>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     76e:	f8 01       	movw	r30, r16
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	0e 0f       	add	r16, r30
     77a:	1f 1f       	adc	r17, r31
     77c:	f8 01       	movw	r30, r16
     77e:	e4 58       	subi	r30, 0x84	; 132
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	82 83       	std	Z+2, r24	; 0x02
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);	
     786:	13 82       	std	Z+3, r1	; 0x03
	}
}
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <vidReleaseState>:
static void vidReleaseState(u8_en_btnIdType en_a_BtnId)
{
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     7a2:	08 2f       	mov	r16, r24
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	f8 01       	movw	r30, r16
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e0 0f       	add	r30, r16
     7b2:	f1 1f       	adc	r31, r17
     7b4:	e4 58       	subi	r30, 0x84	; 132
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	61 81       	ldd	r22, Z+1	; 0x01
     7ba:	ae 01       	movw	r20, r28
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	80 81       	ld	r24, Z
     7c2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	81 11       	cpse	r24, r1
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <vidReleaseState+0x4e>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     7cc:	f8 01       	movw	r30, r16
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	0e 0f       	add	r16, r30
     7d8:	1f 1f       	adc	r17, r31
     7da:	f8 01       	movw	r30, r16
     7dc:	e4 58       	subi	r30, 0x84	; 132
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	12 82       	std	Z+2, r1	; 0x02
	}
	else
	{
		/* Do nothing */
	}
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(u8_en_btnIdType en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
     7ee:	28 2f       	mov	r18, r24
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	2e 0f       	add	r18, r30
     7fe:	3f 1f       	adc	r19, r31
     800:	f9 01       	movw	r30, r18
     802:	e4 58       	subi	r30, 0x84	; 132
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	92 81       	ldd	r25, Z+2	; 0x02
     808:	92 30       	cpi	r25, 0x02	; 2
     80a:	91 f0       	breq	.+36     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     80c:	28 f4       	brcc	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     80e:	99 23       	and	r25, r25
     810:	49 f0       	breq	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     812:	91 30       	cpi	r25, 0x01	; 1
     814:	51 f0       	breq	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     816:	08 95       	ret
     818:	94 30       	cpi	r25, 0x04	; 4
     81a:	81 f0       	breq	.+32     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     81c:	60 f0       	brcs	.+24     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     81e:	95 30       	cpi	r25, 0x05	; 5
     820:	81 f0       	breq	.+32     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     822:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
     824:	0e 94 af 02 	call	0x55e	; 0x55e <vidPrePushState>
		break;
     828:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
     82a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <vidPushState>
		break;
     82e:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
     830:	0e 94 23 03 	call	0x646	; 0x646 <vidPreHoldState>
		break;
     834:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
     836:	0e 94 5e 03 	call	0x6bc	; 0x6bc <vidHoldState>
		break;
     83a:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
     83c:	0e 94 8d 03 	call	0x71a	; 0x71a <vidPreReleaseState>
		break;
     840:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
     842:	0e 94 ca 03 	call	0x794	; 0x794 <vidReleaseState>
     846:	08 95       	ret

00000848 <BUTTON_mainTask>:
/******************************************************************************/
/*********************** Public Functions Implementation **********************/
/******************************************************************************/

void BUTTON_mainTask(void)
{
     848:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	04 c0       	rjmp	.+8      	; 0x856 <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
     84e:	8c 2f       	mov	r24, r28
     850:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
     854:	cf 5f       	subi	r28, 0xFF	; 255
     856:	c2 30       	cpi	r28, 0x02	; 2
     858:	d0 f3       	brcs	.-12     	; 0x84e <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
	}
}
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <BUTTON_init>:
u8_en_btnStateType BUTTON_init(uint8_t u8_a_port , uint8_t u8_a_pin, u8_en_btnIdType en_btnId)
{
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	18 2f       	mov	r17, r24
     866:	d6 2f       	mov	r29, r22
     868:	c4 2f       	mov	r28, r20
	uint8_t u8_RetVal;
	// Set button pin as input
	u8_RetVal = DIO_init(u8_a_port, u8_a_pin , STD_INPUT);
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	0e 94 b4 05 	call	0xb68	; 0xb68 <DIO_init>
	
	// Enable PULLUP
	u8_RetVal = DIO_writePIN(u8_a_port, u8_a_pin, STD_HIGH);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	6d 2f       	mov	r22, r29
     874:	81 2f       	mov	r24, r17
     876:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
	
	st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
     87a:	4c 2f       	mov	r20, r28
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	fa 01       	movw	r30, r20
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e4 0f       	add	r30, r20
     88a:	f5 1f       	adc	r31, r21
     88c:	e4 58       	subi	r30, 0x84	; 132
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	12 82       	std	Z+2, r1	; 0x02
	st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
     892:	13 82       	std	Z+3, r1	; 0x03
	st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
     894:	14 82       	std	Z+4, r1	; 0x04
	st_gs_strBtnInfo[en_btnId].port = u8_a_port;
     896:	10 83       	st	Z, r17
	st_gs_strBtnInfo[en_btnId].pin = u8_a_pin;
     898:	d1 83       	std	Z+1, r29	; 0x01
		
		st_gs_strBtnInfo[u8Index].u8_a_btnState     = BT_PRE_PUSH;
		st_gs_strBtnInfo[u8Index].u8_a_debounceThreshold  = ((uint8_t)0U);
		st_gs_strBtnInfo[u8Index].u8_a_holdThreshold      = ((uint8_t)0U);
	}*/
	if (u8_RetVal == DIO_E_OK)
     89a:	81 11       	cpse	r24, r1
	{
		return BT_PRE_PUSH;
	}
	else
	{
		return BT_UNDEFINED;
     89c:	86 e0       	ldi	r24, 0x06	; 6
	}
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	08 95       	ret

000008a6 <BUTTON_getState>:
u8_en_btnStateType BUTTON_getState(u8_en_btnIdType en_btnId)
{
	u8_en_btnStateType enuReturn;
	
	if(en_btnId < BUTTONS_NUM)
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	68 f4       	brcc	.+26     	; 0x8c4 <BUTTON_getState+0x1e>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	fc 01       	movw	r30, r24
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	8e 0f       	add	r24, r30
     8b8:	9f 1f       	adc	r25, r31
     8ba:	fc 01       	movw	r30, r24
     8bc:	e4 58       	subi	r30, 0x84	; 132
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	82 81       	ldd	r24, Z+2	; 0x02
     8c2:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
     8c4:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
     8c6:	08 95       	ret

000008c8 <CAR_INIT>:
*description : used to initlize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_INIT(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ec 01       	movw	r28, r24
     8d4:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(motor_1);
     8d6:	0e 94 18 05 	call	0xa30	; 0xa30 <MOTOR_INIT>
     8da:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(motor_2);
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 18 05 	call	0xa30	; 0xa30 <MOTOR_INIT>
	if(motor_1==NULL || motor_2 ==NULL)
     8e2:	cd 2b       	or	r28, r29
     8e4:	39 f0       	breq	.+14     	; 0x8f4 <CAR_INIT+0x2c>
     8e6:	01 2b       	or	r16, r17
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <CAR_INIT+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     8ea:	f1 10       	cpse	r15, r1
     8ec:	07 c0       	rjmp	.+14     	; 0x8fc <CAR_INIT+0x34>
     8ee:	81 11       	cpse	r24, r1
     8f0:	07 c0       	rjmp	.+14     	; 0x900 <CAR_INIT+0x38>
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <CAR_INIT+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(motor_1);
	EN_motor_error_t motor_error2=MOTOR_INIT(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <CAR_INIT+0x3a>
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	03 c0       	rjmp	.+6      	; 0x902 <CAR_INIT+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <CAR_INIT+0x3a>
     900:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	08 95       	ret

0000090e <CAR_FORWARD>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_FORWARD(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
     91a:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
     91c:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_FORWARD>
     920:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(motor_2);
     922:	c8 01       	movw	r24, r16
     924:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_FORWARD>
	if(motor_1==NULL || motor_2 ==NULL)
     928:	cd 2b       	or	r28, r29
     92a:	39 f0       	breq	.+14     	; 0x93a <CAR_FORWARD+0x2c>
     92c:	01 2b       	or	r16, r17
     92e:	39 f0       	breq	.+14     	; 0x93e <CAR_FORWARD+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     930:	f1 10       	cpse	r15, r1
     932:	07 c0       	rjmp	.+14     	; 0x942 <CAR_FORWARD+0x34>
     934:	81 11       	cpse	r24, r1
     936:	07 c0       	rjmp	.+14     	; 0x946 <CAR_FORWARD+0x38>
     938:	07 c0       	rjmp	.+14     	; 0x948 <CAR_FORWARD+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
	EN_motor_error_t motor_error2=MOTOR_FORWARD(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	05 c0       	rjmp	.+10     	; 0x948 <CAR_FORWARD+0x3a>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	03 c0       	rjmp	.+6      	; 0x948 <CAR_FORWARD+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	01 c0       	rjmp	.+2      	; 0x948 <CAR_FORWARD+0x3a>
     946:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	08 95       	ret

00000954 <CAR_REVERSE_RIGHT>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_REVERSE_RIGHT(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
     962:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_FORWARD>
     966:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(motor_2);
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 48 05 	call	0xa90	; 0xa90 <MOTOR_BACKWARD>
	if(motor_1==NULL || motor_2 ==NULL)
     96e:	cd 2b       	or	r28, r29
     970:	39 f0       	breq	.+14     	; 0x980 <CAR_REVERSE_RIGHT+0x2c>
     972:	01 2b       	or	r16, r17
     974:	39 f0       	breq	.+14     	; 0x984 <CAR_REVERSE_RIGHT+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     976:	f1 10       	cpse	r15, r1
     978:	07 c0       	rjmp	.+14     	; 0x988 <CAR_REVERSE_RIGHT+0x34>
     97a:	81 11       	cpse	r24, r1
     97c:	07 c0       	rjmp	.+14     	; 0x98c <CAR_REVERSE_RIGHT+0x38>
     97e:	07 c0       	rjmp	.+14     	; 0x98e <CAR_REVERSE_RIGHT+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	05 c0       	rjmp	.+10     	; 0x98e <CAR_REVERSE_RIGHT+0x3a>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	03 c0       	rjmp	.+6      	; 0x98e <CAR_REVERSE_RIGHT+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <CAR_REVERSE_RIGHT+0x3a>
     98c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	08 95       	ret

0000099a <CAR_STOP>:
*description : used to stop gthe car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_STOP(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(motor_1);
     9a8:	0e 94 60 05 	call	0xac0	; 0xac0 <MOTOR_STOP>
     9ac:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(motor_2);
     9ae:	c8 01       	movw	r24, r16
     9b0:	0e 94 60 05 	call	0xac0	; 0xac0 <MOTOR_STOP>
	if(motor_1==NULL || motor_2 ==NULL)
     9b4:	cd 2b       	or	r28, r29
     9b6:	39 f0       	breq	.+14     	; 0x9c6 <CAR_STOP+0x2c>
     9b8:	01 2b       	or	r16, r17
     9ba:	39 f0       	breq	.+14     	; 0x9ca <CAR_STOP+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     9bc:	f1 10       	cpse	r15, r1
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <CAR_STOP+0x34>
     9c0:	81 11       	cpse	r24, r1
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <CAR_STOP+0x38>
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <CAR_STOP+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(motor_1);
	EN_motor_error_t motor_error2=MOTOR_STOP(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <CAR_STOP+0x3a>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <CAR_STOP+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <CAR_STOP+0x3a>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	08 95       	ret

000009e0 <ext_init>:
#include "EXT_interrupt_manager.h"



u8_en_interruptErrorType ext_init(ext_interrupt_config_t *ext_interrupt_config, void(*callback)(void)){
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
     9ea:	8b 01       	movw	r16, r22

    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_init(ext_interrupt_config->ext_interrupt_no, ext_interrupt_config->edge_select);
     9ec:	69 81       	ldd	r22, Y+1	; 0x01
     9ee:	88 81       	ld	r24, Y
     9f0:	0e 94 d4 06 	call	0xda8	; 0xda8 <ext_interrupt_init>
    ext_interrupt_set_callback_init(ext_interrupt_config->ext_interrupt_no , callback);
     9f4:	b8 01       	movw	r22, r16
     9f6:	88 81       	ld	r24, Y
     9f8:	0e 94 09 07 	call	0xe12	; 0xe12 <ext_interrupt_set_callback_init>
    return ret_val;
}
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <ext_enable>:
u8_en_interruptErrorType ext_enable(uint8_t u8_intNum){
    
    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_enable(u8_intNum);
     a08:	0e 94 ed 06 	call	0xdda	; 0xdda <ext_interrupt_enable>
    return ret_val;
}
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret

00000a10 <ext_disable>:
u8_en_interruptErrorType ext_disable(uint8_t u8_intNum){

    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_disable(u8_intNum);
     a10:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <ext_interrupt_disable>
    return ret_val;
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret

00000a18 <LED_init>:
};
*/

u8_en_ledErrorType LED_init(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_init(u8_a_port, u8_a_pin, STD_OUTPUT);
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	0e 94 b4 05 	call	0xb68	; 0xb68 <DIO_init>
}
     a1e:	08 95       	ret

00000a20 <LED_off>:



u8_en_ledErrorType LED_off(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_OFF);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
}
     a26:	08 95       	ret

00000a28 <LED_on>:
u8_en_ledErrorType LED_on(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_ON);
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     a2e:	08 95       	ret

00000a30 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	69 81       	ldd	r22, Y+1	; 0x01
     a3a:	88 81       	ld	r24, Y
     a3c:	0e 94 b4 05 	call	0xb68	; 0xb68 <DIO_init>
     a40:	81 11       	cpse	r24, r1
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <MOTOR_INIT+0x24>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	6a 81       	ldd	r22, Y+2	; 0x02
     a48:	88 81       	ld	r24, Y
     a4a:	0e 94 b4 05 	call	0xb68	; 0xb68 <DIO_init>
     a4e:	81 11       	cpse	r24, r1
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <MOTOR_INIT+0x28>
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <MOTOR_INIT+0x2a>
     a58:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	88 81       	ld	r24, Y
     a6c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     a70:	81 11       	cpse	r24, r1
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <MOTOR_FORWARD+0x24>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	6a 81       	ldd	r22, Y+2	; 0x02
     a78:	88 81       	ld	r24, Y
     a7a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     a7e:	81 11       	cpse	r24, r1
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <MOTOR_FORWARD+0x28>
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <MOTOR_FORWARD+0x2a>
     a88:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	69 81       	ldd	r22, Y+1	; 0x01
     a9a:	88 81       	ld	r24, Y
     a9c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     aa0:	81 11       	cpse	r24, r1
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <MOTOR_BACKWARD+0x24>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	6a 81       	ldd	r22, Y+2	; 0x02
     aa8:	88 81       	ld	r24, Y
     aaa:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     aae:	81 11       	cpse	r24, r1
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <MOTOR_BACKWARD+0x28>
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <MOTOR_BACKWARD+0x2a>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	69 81       	ldd	r22, Y+1	; 0x01
     aca:	88 81       	ld	r24, Y
     acc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     ad0:	81 11       	cpse	r24, r1
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <MOTOR_STOP+0x24>
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	6a 81       	ldd	r22, Y+2	; 0x02
     ad8:	88 81       	ld	r24, Y
     ada:	0e 94 ee 05 	call	0xbdc	; 0xbdc <DIO_writePIN>
     ade:	81 11       	cpse	r24, r1
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <MOTOR_STOP+0x28>
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <MOTOR_STOP+0x2a>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <TIMER_MANGER_init>:
 */ 
#include "timer_manger.h"

static Timer_Config_t st_g_Timer;
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
     af6:	fc 01       	movw	r30, r24
     af8:	20 81       	ld	r18, Z
     afa:	23 30       	cpi	r18, 0x03	; 3
     afc:	c8 f4       	brcc	.+50     	; 0xb30 <TIMER_MANGER_init+0x40>
     afe:	ec 01       	movw	r28, r24
	}
	else
	{
		/*initiate the timer */
		
		st_g_Timer.timer_type=stPtr_a_TimerConfig->timer_num;
     b00:	e6 e8       	ldi	r30, 0x86	; 134
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	20 83       	st	Z, r18
		st_g_Timer.timer_mode=stPtr_a_TimerConfig->timer_mode;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	82 83       	std	Z+2, r24	; 0x02
		st_g_Timer.timer_InitialValue=stPtr_a_TimerConfig->timer_InitialValue;
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	97 83       	std	Z+7, r25	; 0x07
     b10:	86 83       	std	Z+6, r24	; 0x06
		st_g_Timer.timer_compare_MatchValue=stPtr_a_TimerConfig->timer_compare_MatchValue;
     b12:	8c 81       	ldd	r24, Y+4	; 0x04
     b14:	9d 81       	ldd	r25, Y+5	; 0x05
     b16:	91 87       	std	Z+9, r25	; 0x09
     b18:	80 87       	std	Z+8, r24	; 0x08
		
		l_ret = TIMERx_init(&st_g_Timer);
     b1a:	cf 01       	movw	r24, r30
     b1c:	0e 94 92 0b 	call	0x1724	; 0x1724 <TIMERx_init>
     b20:	18 2f       	mov	r17, r24
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
     b22:	68 81       	ld	r22, Y
     b24:	8e 81       	ldd	r24, Y+6	; 0x06
     b26:	9f 81       	ldd	r25, Y+7	; 0x07
     b28:	0e 94 75 0b 	call	0x16ea	; 0x16ea <TIMERx_setCallBack>
     b2c:	81 2b       	or	r24, r17
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <TIMER_MANGER_init+0x42>
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
     b30:	80 e0       	ldi	r24, 0x00	; 0
		l_ret = TIMERx_init(&st_g_Timer);
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
	}
	return l_ret;
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	08 95       	ret

00000b3a <TIMER_MANGER_start>:

Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
     b3a:	8a 30       	cpi	r24, 0x0A	; 10
     b3c:	28 f4       	brcc	.+10     	; 0xb48 <TIMER_MANGER_start+0xe>
     b3e:	63 30       	cpi	r22, 0x03	; 3
     b40:	28 f4       	brcc	.+10     	; 0xb4c <TIMER_MANGER_start+0x12>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
     b42:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <TIMERx_start>
     b46:	08 95       	ret
Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret
     b4c:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
	}
	return l_ret;
}
     b4e:	08 95       	ret

00000b50 <TIMER_MANGER_stop>:

Std_ReturnType TIMER_MANGER_stop(const TimerType_t en_a_timer_num)
{
	
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	18 f4       	brcc	.+6      	; 0xb5a <TIMER_MANGER_stop+0xa>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(en_a_timer_num);
     b54:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <TIMERx_stop>
     b58:	08 95       	ret
{
	
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
	{
		l_ret = E_NOT_OK;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(en_a_timer_num);
	}
	return l_ret;
}
     b5c:	08 95       	ret

00000b5e <main>:
#include "APP/app.h"


int main(void)
{
	APP_start();
     b5e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <APP_start>
}
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	08 95       	ret

00000b68 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     b68:	68 30       	cpi	r22, 0x08	; 8
     b6a:	a0 f5       	brcc	.+104    	; 0xbd4 <DIO_init+0x6c>
	{
		if (port == porta)
     b6c:	81 11       	cpse	r24, r1
     b6e:	0b c0       	rjmp	.+22     	; 0xb86 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     b70:	8a b3       	in	r24, 0x1a	; 26
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_init+0x12>
     b76:	44 0f       	add	r20, r20
     b78:	55 1f       	adc	r21, r21
     b7a:	6a 95       	dec	r22
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_init+0xe>
     b7e:	48 2b       	or	r20, r24
     b80:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
		}
		else if (port == portb)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	59 f4       	brne	.+22     	; 0xba0 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     b8a:	87 b3       	in	r24, 0x17	; 23
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <DIO_init+0x2c>
     b90:	44 0f       	add	r20, r20
     b92:	55 1f       	adc	r21, r21
     b94:	6a 95       	dec	r22
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <DIO_init+0x28>
     b98:	48 2b       	or	r20, r24
     b9a:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret
		}
		else if (port == portc)
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	59 f4       	brne	.+22     	; 0xbba <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     ba4:	84 b3       	in	r24, 0x14	; 20
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_init+0x46>
     baa:	44 0f       	add	r20, r20
     bac:	55 1f       	adc	r21, r21
     bae:	6a 95       	dec	r22
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_init+0x42>
     bb2:	48 2b       	or	r20, r24
     bb4:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	08 95       	ret
		}
		else if (port == portd)
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	69 f4       	brne	.+26     	; 0xbd8 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     bbe:	81 b3       	in	r24, 0x11	; 17
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_init+0x60>
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	6a 95       	dec	r22
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_init+0x5c>
     bcc:	48 2b       	or	r20, r24
     bce:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     bd8:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     bda:	08 95       	ret

00000bdc <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     bdc:	68 30       	cpi	r22, 0x08	; 8
     bde:	08 f0       	brcs	.+2      	; 0xbe2 <DIO_writePIN+0x6>
     be0:	74 c0       	rjmp	.+232    	; 0xcca <DIO_writePIN+0xee>
	{
		if (port == porta)
     be2:	81 11       	cpse	r24, r1
     be4:	1b c0       	rjmp	.+54     	; 0xc1c <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     be6:	41 30       	cpi	r20, 0x01	; 1
     be8:	61 f4       	brne	.+24     	; 0xc02 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     bea:	2b b3       	in	r18, 0x1b	; 27
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_writePIN+0x1a>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	6a 95       	dec	r22
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_writePIN+0x16>
     bfa:	82 2b       	or	r24, r18
     bfc:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     c02:	2b b3       	in	r18, 0x1b	; 27
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_writePIN+0x32>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_writePIN+0x2e>
     c12:	80 95       	com	r24
     c14:	82 23       	and	r24, r18
     c16:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	08 95       	ret
		}
		else if (port == portb)
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	d9 f4       	brne	.+54     	; 0xc56 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     c20:	41 30       	cpi	r20, 0x01	; 1
     c22:	61 f4       	brne	.+24     	; 0xc3c <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     c24:	28 b3       	in	r18, 0x18	; 24
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_writePIN+0x54>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	6a 95       	dec	r22
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_writePIN+0x50>
     c34:	82 2b       	or	r24, r18
     c36:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     c3c:	28 b3       	in	r18, 0x18	; 24
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_writePIN+0x6c>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	6a 95       	dec	r22
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_writePIN+0x68>
     c4c:	80 95       	com	r24
     c4e:	82 23       	and	r24, r18
     c50:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	08 95       	ret
		}
		else if (port == portc)
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	d9 f4       	brne	.+54     	; 0xc90 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     c5a:	41 30       	cpi	r20, 0x01	; 1
     c5c:	61 f4       	brne	.+24     	; 0xc76 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     c5e:	25 b3       	in	r18, 0x15	; 21
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_writePIN+0x8e>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	6a 95       	dec	r22
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_writePIN+0x8a>
     c6e:	82 2b       	or	r24, r18
     c70:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     c76:	25 b3       	in	r18, 0x15	; 21
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_writePIN+0xa6>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	6a 95       	dec	r22
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_writePIN+0xa2>
     c86:	80 95       	com	r24
     c88:	82 23       	and	r24, r18
     c8a:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
		}
		else if (port == portd)
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	e9 f4       	brne	.+58     	; 0xcce <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     c94:	41 30       	cpi	r20, 0x01	; 1
     c96:	61 f4       	brne	.+24     	; 0xcb0 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     c98:	22 b3       	in	r18, 0x12	; 18
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_writePIN+0xc8>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	6a 95       	dec	r22
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_writePIN+0xc4>
     ca8:	82 2b       	or	r24, r18
     caa:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     cb0:	22 b3       	in	r18, 0x12	; 18
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_writePIN+0xe0>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	6a 95       	dec	r22
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_writePIN+0xdc>
     cc0:	80 95       	com	r24
     cc2:	82 23       	and	r24, r18
     cc4:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     cce:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     cd0:	08 95       	ret

00000cd2 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     cd2:	68 30       	cpi	r22, 0x08	; 8
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <DIO_readPIN+0x6>
     cd6:	64 c0       	rjmp	.+200    	; 0xda0 <DIO_readPIN+0xce>
	{
		if (port == porta)
     cd8:	81 11       	cpse	r24, r1
     cda:	17 c0       	rjmp	.+46     	; 0xd0a <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     cdc:	79 b3       	in	r23, 0x19	; 25
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9c 01       	movw	r18, r24
     ce4:	06 2e       	mov	r0, r22
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_readPIN+0x1a>
     ce8:	22 0f       	add	r18, r18
     cea:	33 1f       	adc	r19, r19
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_readPIN+0x16>
     cf0:	87 2f       	mov	r24, r23
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	82 23       	and	r24, r18
     cf6:	93 23       	and	r25, r19
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_readPIN+0x2c>
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	6a 95       	dec	r22
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_readPIN+0x28>
     d02:	fa 01       	movw	r30, r20
     d04:	80 83       	st	Z, r24
			return DIO_E_OK;
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
		}
		else if (port == portb)
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	b9 f4       	brne	.+46     	; 0xd3c <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     d0e:	76 b3       	in	r23, 0x16	; 22
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9c 01       	movw	r18, r24
     d16:	06 2e       	mov	r0, r22
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_readPIN+0x4c>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_readPIN+0x48>
     d22:	87 2f       	mov	r24, r23
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	82 23       	and	r24, r18
     d28:	93 23       	and	r25, r19
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_readPIN+0x5e>
     d2c:	96 95       	lsr	r25
     d2e:	87 95       	ror	r24
     d30:	6a 95       	dec	r22
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_readPIN+0x5a>
     d34:	fa 01       	movw	r30, r20
     d36:	80 83       	st	Z, r24
			return DIO_E_OK;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	08 95       	ret
		}
		else if (port == portc)
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	b9 f4       	brne	.+46     	; 0xd6e <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     d40:	73 b3       	in	r23, 0x13	; 19
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 01       	movw	r18, r24
     d48:	06 2e       	mov	r0, r22
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_readPIN+0x7e>
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_readPIN+0x7a>
     d54:	87 2f       	mov	r24, r23
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	82 23       	and	r24, r18
     d5a:	93 23       	and	r25, r19
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_readPIN+0x90>
     d5e:	96 95       	lsr	r25
     d60:	87 95       	ror	r24
     d62:	6a 95       	dec	r22
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_readPIN+0x8c>
     d66:	fa 01       	movw	r30, r20
     d68:	80 83       	st	Z, r24
			return DIO_E_OK;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
		}
		else if (port == portd)
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	c9 f4       	brne	.+50     	; 0xda4 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     d72:	70 b3       	in	r23, 0x10	; 16
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9c 01       	movw	r18, r24
     d7a:	06 2e       	mov	r0, r22
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_readPIN+0xb0>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_readPIN+0xac>
     d86:	87 2f       	mov	r24, r23
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	82 23       	and	r24, r18
     d8c:	93 23       	and	r25, r19
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_readPIN+0xc2>
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	6a 95       	dec	r22
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_readPIN+0xbe>
     d98:	fa 01       	movw	r30, r20
     d9a:	80 83       	st	Z, r24
			return DIO_E_OK;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     da4:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     da6:	08 95       	ret

00000da8 <ext_interrupt_init>:
static void (*callback_EXT_0)(void);
static void (*callback_EXT_1)(void);

u8_en_interruptErrorType ext_interrupt_init(ext_interrupt_no_t ext_interrupt_no, EDGE_detection_t EDGE_detection){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     da8:	88 23       	and	r24, r24
     daa:	19 f0       	breq	.+6      	; 0xdb2 <ext_interrupt_init+0xa>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	41 f0       	breq	.+16     	; 0xdc0 <ext_interrupt_init+0x18>
     db0:	12 c0       	rjmp	.+36     	; 0xdd6 <ext_interrupt_init+0x2e>
    {
    case EXT_0:
        MCUCR_ADD |= EDGE_detection;	
     db2:	85 b7       	in	r24, 0x35	; 53
     db4:	68 2b       	or	r22, r24
     db6:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= Globle_INT;
     db8:	8f b7       	in	r24, 0x3f	; 63
     dba:	87 60       	ori	r24, 0x07	; 7
     dbc:	8f bf       	out	0x3f, r24	; 63
        break;
     dbe:	0b c0       	rjmp	.+22     	; 0xdd6 <ext_interrupt_init+0x2e>

    case EXT_1:
        MCUCR_ADD |= (EDGE_detection<<2);	
     dc0:	85 b7       	in	r24, 0x35	; 53
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	68 2b       	or	r22, r24
     dce:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= (1<<Globle_INT);
     dd0:	8f b7       	in	r24, 0x3f	; 63
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	8f bf       	out	0x3f, r24	; 63
    default:
        break;
    }

    return ret_val;
}
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	08 95       	ret

00000dda <ext_interrupt_enable>:
u8_en_interruptErrorType ext_interrupt_enable(ext_interrupt_no_t ext_interrupt_no){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     dda:	88 23       	and	r24, r24
     ddc:	19 f0       	breq	.+6      	; 0xde4 <ext_interrupt_enable+0xa>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	29 f0       	breq	.+10     	; 0xdec <ext_interrupt_enable+0x12>
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <ext_interrupt_enable+0x18>
    {
    case EXT_0:
        GICR_ADD |= (1<<INT0_Globle);
     de4:	8b b7       	in	r24, 0x3b	; 59
     de6:	80 64       	ori	r24, 0x40	; 64
     de8:	8b bf       	out	0x3b, r24	; 59

		
        break;
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <ext_interrupt_enable+0x18>

    case EXT_1:
        GICR_ADD |= (1<<INT1_Globle);
     dec:	8b b7       	in	r24, 0x3b	; 59
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	8b bf       	out	0x3b, r24	; 59
    
    default:
        break;
    }
    return ret_val;
}
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	08 95       	ret

00000df6 <ext_interrupt_disable>:
u8_en_interruptErrorType ext_interrupt_disable(ext_interrupt_no_t ext_interrupt_no){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     df6:	88 23       	and	r24, r24
     df8:	19 f0       	breq	.+6      	; 0xe00 <ext_interrupt_disable+0xa>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	29 f0       	breq	.+10     	; 0xe08 <ext_interrupt_disable+0x12>
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <ext_interrupt_disable+0x18>
    {
    case EXT_0:
       GICR_ADD &= ~(1<<INT0_Globle);
     e00:	8b b7       	in	r24, 0x3b	; 59
     e02:	8f 7b       	andi	r24, 0xBF	; 191
     e04:	8b bf       	out	0x3b, r24	; 59

        break;
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <ext_interrupt_disable+0x18>

    case EXT_1:
        GICR_ADD &= ~(1<<INT1_Globle);
     e08:	8b b7       	in	r24, 0x3b	; 59
     e0a:	8f 77       	andi	r24, 0x7F	; 127
     e0c:	8b bf       	out	0x3b, r24	; 59
    default:
        break;
    }
    return ret_val;

}
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	08 95       	ret

00000e12 <ext_interrupt_set_callback_init>:

u8_en_interruptErrorType ext_interrupt_set_callback_init(ext_interrupt_no_t ext_interrupt_no ,void(*callback)(void)){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     e12:	88 23       	and	r24, r24
     e14:	19 f0       	breq	.+6      	; 0xe1c <ext_interrupt_set_callback_init+0xa>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	49 f0       	breq	.+18     	; 0xe2c <ext_interrupt_set_callback_init+0x1a>
     e1a:	0b c0       	rjmp	.+22     	; 0xe32 <ext_interrupt_set_callback_init+0x20>
    {
    case EXT_0:
        GICR_ADD &= ~(1<<INT0_Globle);
     e1c:	8b b7       	in	r24, 0x3b	; 59
     e1e:	8f 7b       	andi	r24, 0xBF	; 191
     e20:	8b bf       	out	0x3b, r24	; 59
        callback_EXT_0 = callback;
     e22:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <callback_EXT_0+0x1>
     e26:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <callback_EXT_0>
		
        break;
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <ext_interrupt_set_callback_init+0x20>

    case EXT_1:
        GICR_ADD &= ~(1<<INT1_Globle);
     e2c:	8b b7       	in	r24, 0x3b	; 59
     e2e:	8f 77       	andi	r24, 0x7F	; 127
     e30:	8b bf       	out	0x3b, r24	; 59
    
    default:
        break;
    }
    return ret_val;
}
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	08 95       	ret

00000e36 <__vector_1>:
*   -Description-
*-interrupt service routine for  external interrupt 0
*
*/
ISR(EXT_INT0)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
	callback_EXT_0();
     e58:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <callback_EXT_0>
     e5c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <callback_EXT_0+0x1>
     e60:	09 95       	icall
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <TIMERx_selectClk>:
				l_ret |= E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	08 f0       	brcs	.+2      	; 0xe8a <TIMERx_selectClk+0x6>
     e88:	34 c1       	rjmp	.+616    	; 0x10f2 <TIMERx_selectClk+0x26e>
     e8a:	6a 30       	cpi	r22, 0x0A	; 10
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <TIMERx_selectClk+0xc>
     e8e:	33 c1       	rjmp	.+614    	; 0x10f6 <TIMERx_selectClk+0x272>
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f4       	brne	.+2      	; 0xe96 <TIMERx_selectClk+0x12>
     e94:	68 c0       	rjmp	.+208    	; 0xf66 <TIMERx_selectClk+0xe2>
     e96:	20 f0       	brcs	.+8      	; 0xea0 <TIMERx_selectClk+0x1c>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	09 f4       	brne	.+2      	; 0xe9e <TIMERx_selectClk+0x1a>
     e9c:	c7 c0       	rjmp	.+398    	; 0x102c <TIMERx_selectClk+0x1a8>
     e9e:	2d c1       	rjmp	.+602    	; 0x10fa <TIMERx_selectClk+0x276>
     ea0:	86 2f       	mov	r24, r22
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	8a 30       	cpi	r24, 0x0A	; 10
     ea6:	91 05       	cpc	r25, r1
     ea8:	08 f0       	brcs	.+2      	; 0xeac <TIMERx_selectClk+0x28>
     eaa:	29 c1       	rjmp	.+594    	; 0x10fe <TIMERx_selectClk+0x27a>
     eac:	fc 01       	movw	r30, r24
     eae:	e6 5d       	subi	r30, 0xD6	; 214
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__tablejump2__>
     eb6:	83 b7       	in	r24, 0x33	; 51
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	83 bf       	out	0x33, r24	; 51
     ebc:	83 b7       	in	r24, 0x33	; 51
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	83 bf       	out	0x33, r24	; 51
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	83 bf       	out	0x33, r24	; 51
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 95       	ret
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	83 bf       	out	0x33, r24	; 51
     ed2:	83 b7       	in	r24, 0x33	; 51
     ed4:	8d 7f       	andi	r24, 0xFD	; 253
     ed6:	83 bf       	out	0x33, r24	; 51
     ed8:	83 b7       	in	r24, 0x33	; 51
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	83 bf       	out	0x33, r24	; 51
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	08 95       	ret
     ee2:	83 b7       	in	r24, 0x33	; 51
     ee4:	8e 7f       	andi	r24, 0xFE	; 254
     ee6:	83 bf       	out	0x33, r24	; 51
     ee8:	83 b7       	in	r24, 0x33	; 51
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	83 bf       	out	0x33, r24	; 51
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	83 bf       	out	0x33, r24	; 51
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	08 95       	ret
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	83 bf       	out	0x33, r24	; 51
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	82 60       	ori	r24, 0x02	; 2
     f02:	83 bf       	out	0x33, r24	; 51
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	83 bf       	out	0x33, r24	; 51
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	08 95       	ret
     f0e:	83 b7       	in	r24, 0x33	; 51
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	83 bf       	out	0x33, r24	; 51
     f14:	83 b7       	in	r24, 0x33	; 51
     f16:	8d 7f       	andi	r24, 0xFD	; 253
     f18:	83 bf       	out	0x33, r24	; 51
     f1a:	83 b7       	in	r24, 0x33	; 51
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	83 bf       	out	0x33, r24	; 51
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	08 95       	ret
     f24:	83 b7       	in	r24, 0x33	; 51
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	83 bf       	out	0x33, r24	; 51
     f2a:	83 b7       	in	r24, 0x33	; 51
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	83 bf       	out	0x33, r24	; 51
     f30:	83 b7       	in	r24, 0x33	; 51
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	83 bf       	out	0x33, r24	; 51
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
     f3a:	83 b7       	in	r24, 0x33	; 51
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	83 bf       	out	0x33, r24	; 51
     f40:	83 b7       	in	r24, 0x33	; 51
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	83 bf       	out	0x33, r24	; 51
     f46:	83 b7       	in	r24, 0x33	; 51
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	83 bf       	out	0x33, r24	; 51
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	08 95       	ret
     f50:	83 b7       	in	r24, 0x33	; 51
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	83 bf       	out	0x33, r24	; 51
     f56:	83 b7       	in	r24, 0x33	; 51
     f58:	82 60       	ori	r24, 0x02	; 2
     f5a:	83 bf       	out	0x33, r24	; 51
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	84 60       	ori	r24, 0x04	; 4
     f60:	83 bf       	out	0x33, r24	; 51
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret
     f66:	86 2f       	mov	r24, r22
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	8a 30       	cpi	r24, 0x0A	; 10
     f6c:	91 05       	cpc	r25, r1
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <TIMERx_selectClk+0xee>
     f70:	c8 c0       	rjmp	.+400    	; 0x1102 <TIMERx_selectClk+0x27e>
     f72:	fc 01       	movw	r30, r24
     f74:	ec 5c       	subi	r30, 0xCC	; 204
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__tablejump2__>
     f7c:	8e b5       	in	r24, 0x2e	; 46
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8e bd       	out	0x2e, r24	; 46
     f82:	8e b5       	in	r24, 0x2e	; 46
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	8e bd       	out	0x2e, r24	; 46
     f88:	8e b5       	in	r24, 0x2e	; 46
     f8a:	8b 7f       	andi	r24, 0xFB	; 251
     f8c:	8e bd       	out	0x2e, r24	; 46
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 95       	ret
     f92:	8e b5       	in	r24, 0x2e	; 46
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	8e bd       	out	0x2e, r24	; 46
     f98:	8e b5       	in	r24, 0x2e	; 46
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	8e bd       	out	0x2e, r24	; 46
     f9e:	8e b5       	in	r24, 0x2e	; 46
     fa0:	8b 7f       	andi	r24, 0xFB	; 251
     fa2:	8e bd       	out	0x2e, r24	; 46
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret
     fa8:	8e b5       	in	r24, 0x2e	; 46
     faa:	8e 7f       	andi	r24, 0xFE	; 254
     fac:	8e bd       	out	0x2e, r24	; 46
     fae:	8e b5       	in	r24, 0x2e	; 46
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	8e bd       	out	0x2e, r24	; 46
     fb4:	8e b5       	in	r24, 0x2e	; 46
     fb6:	8b 7f       	andi	r24, 0xFB	; 251
     fb8:	8e bd       	out	0x2e, r24	; 46
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	08 95       	ret
     fbe:	8e b5       	in	r24, 0x2e	; 46
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8e bd       	out	0x2e, r24	; 46
     fc4:	8e b5       	in	r24, 0x2e	; 46
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	8e bd       	out	0x2e, r24	; 46
     fca:	8e b5       	in	r24, 0x2e	; 46
     fcc:	8b 7f       	andi	r24, 0xFB	; 251
     fce:	8e bd       	out	0x2e, r24	; 46
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	08 95       	ret
     fd4:	8e b5       	in	r24, 0x2e	; 46
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	8e bd       	out	0x2e, r24	; 46
     fda:	8e b5       	in	r24, 0x2e	; 46
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8e bd       	out	0x2e, r24	; 46
     fe0:	8e b5       	in	r24, 0x2e	; 46
     fe2:	84 60       	ori	r24, 0x04	; 4
     fe4:	8e bd       	out	0x2e, r24	; 46
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	08 95       	ret
     fea:	8e b5       	in	r24, 0x2e	; 46
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	8e bd       	out	0x2e, r24	; 46
     ff0:	8e b5       	in	r24, 0x2e	; 46
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	8e bd       	out	0x2e, r24	; 46
     ff6:	8e b5       	in	r24, 0x2e	; 46
     ff8:	84 60       	ori	r24, 0x04	; 4
     ffa:	8e bd       	out	0x2e, r24	; 46
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	08 95       	ret
    1000:	8e b5       	in	r24, 0x2e	; 46
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	8e bd       	out	0x2e, r24	; 46
    1006:	8e b5       	in	r24, 0x2e	; 46
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8e bd       	out	0x2e, r24	; 46
    100c:	8e b5       	in	r24, 0x2e	; 46
    100e:	84 60       	ori	r24, 0x04	; 4
    1010:	8e bd       	out	0x2e, r24	; 46
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	08 95       	ret
    1016:	8e b5       	in	r24, 0x2e	; 46
    1018:	81 60       	ori	r24, 0x01	; 1
    101a:	8e bd       	out	0x2e, r24	; 46
    101c:	8e b5       	in	r24, 0x2e	; 46
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	8e bd       	out	0x2e, r24	; 46
    1022:	8e b5       	in	r24, 0x2e	; 46
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8e bd       	out	0x2e, r24	; 46
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	08 95       	ret
    102c:	86 2f       	mov	r24, r22
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	91 05       	cpc	r25, r1
    1034:	08 f0       	brcs	.+2      	; 0x1038 <TIMERx_selectClk+0x1b4>
    1036:	67 c0       	rjmp	.+206    	; 0x1106 <TIMERx_selectClk+0x282>
    1038:	fc 01       	movw	r30, r24
    103a:	e2 5c       	subi	r30, 0xC2	; 194
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__tablejump2__>
    1042:	85 b5       	in	r24, 0x25	; 37
    1044:	8b 7f       	andi	r24, 0xFB	; 251
    1046:	85 bd       	out	0x25, r24	; 37
    1048:	85 b5       	in	r24, 0x25	; 37
    104a:	8d 7f       	andi	r24, 0xFD	; 253
    104c:	85 bd       	out	0x25, r24	; 37
    104e:	85 b5       	in	r24, 0x25	; 37
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	85 bd       	out	0x25, r24	; 37
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	08 95       	ret
    1058:	85 b5       	in	r24, 0x25	; 37
    105a:	84 60       	ori	r24, 0x04	; 4
    105c:	85 bd       	out	0x25, r24	; 37
    105e:	85 b5       	in	r24, 0x25	; 37
    1060:	8d 7f       	andi	r24, 0xFD	; 253
    1062:	85 bd       	out	0x25, r24	; 37
    1064:	85 b5       	in	r24, 0x25	; 37
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	85 bd       	out	0x25, r24	; 37
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	08 95       	ret
    106e:	85 b5       	in	r24, 0x25	; 37
    1070:	8b 7f       	andi	r24, 0xFB	; 251
    1072:	85 bd       	out	0x25, r24	; 37
    1074:	85 b5       	in	r24, 0x25	; 37
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	85 bd       	out	0x25, r24	; 37
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	8e 7f       	andi	r24, 0xFE	; 254
    107e:	85 bd       	out	0x25, r24	; 37
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	08 95       	ret
    1084:	85 b5       	in	r24, 0x25	; 37
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	85 bd       	out	0x25, r24	; 37
    108a:	85 b5       	in	r24, 0x25	; 37
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	85 bd       	out	0x25, r24	; 37
    1090:	85 b5       	in	r24, 0x25	; 37
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	85 bd       	out	0x25, r24	; 37
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	08 95       	ret
    109a:	85 b5       	in	r24, 0x25	; 37
    109c:	8b 7f       	andi	r24, 0xFB	; 251
    109e:	85 bd       	out	0x25, r24	; 37
    10a0:	85 b5       	in	r24, 0x25	; 37
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	85 bd       	out	0x25, r24	; 37
    10a6:	85 b5       	in	r24, 0x25	; 37
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	85 bd       	out	0x25, r24	; 37
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	08 95       	ret
    10b0:	85 b5       	in	r24, 0x25	; 37
    10b2:	84 60       	ori	r24, 0x04	; 4
    10b4:	85 bd       	out	0x25, r24	; 37
    10b6:	85 b5       	in	r24, 0x25	; 37
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	85 bd       	out	0x25, r24	; 37
    10bc:	85 b5       	in	r24, 0x25	; 37
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	85 bd       	out	0x25, r24	; 37
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	08 95       	ret
    10c6:	85 b5       	in	r24, 0x25	; 37
    10c8:	8b 7f       	andi	r24, 0xFB	; 251
    10ca:	85 bd       	out	0x25, r24	; 37
    10cc:	85 b5       	in	r24, 0x25	; 37
    10ce:	82 60       	ori	r24, 0x02	; 2
    10d0:	85 bd       	out	0x25, r24	; 37
    10d2:	85 b5       	in	r24, 0x25	; 37
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	85 bd       	out	0x25, r24	; 37
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	08 95       	ret
    10dc:	85 b5       	in	r24, 0x25	; 37
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	85 bd       	out	0x25, r24	; 37
    10e2:	85 b5       	in	r24, 0x25	; 37
    10e4:	82 60       	ori	r24, 0x02	; 2
    10e6:	85 bd       	out	0x25, r24	; 37
    10e8:	85 b5       	in	r24, 0x25	; 37
    10ea:	81 60       	ori	r24, 0x01	; 1
    10ec:	85 bd       	out	0x25, r24	; 37
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	08 95       	ret
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	08 95       	ret
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret

0000110a <TIMERx_setTimerMode>:
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f4       	brne	.+2      	; 0x1110 <TIMERx_setTimerMode+0x6>
    110e:	7d c2       	rjmp	.+1274   	; 0x160a <TIMERx_setTimerMode+0x500>
    1110:	fc 01       	movw	r30, r24
    1112:	20 81       	ld	r18, Z
    1114:	23 30       	cpi	r18, 0x03	; 3
    1116:	08 f0       	brcs	.+2      	; 0x111a <TIMERx_setTimerMode+0x10>
    1118:	7a c2       	rjmp	.+1268   	; 0x160e <TIMERx_setTimerMode+0x504>
    111a:	32 81       	ldd	r19, Z+2	; 0x02
    111c:	34 30       	cpi	r19, 0x04	; 4
    111e:	08 f0       	brcs	.+2      	; 0x1122 <TIMERx_setTimerMode+0x18>
    1120:	78 c2       	rjmp	.+1264   	; 0x1612 <TIMERx_setTimerMode+0x508>
    1122:	43 81       	ldd	r20, Z+3	; 0x03
    1124:	44 30       	cpi	r20, 0x04	; 4
    1126:	08 f0       	brcs	.+2      	; 0x112a <TIMERx_setTimerMode+0x20>
    1128:	76 c2       	rjmp	.+1260   	; 0x1616 <TIMERx_setTimerMode+0x50c>
    112a:	21 30       	cpi	r18, 0x01	; 1
    112c:	09 f4       	brne	.+2      	; 0x1130 <TIMERx_setTimerMode+0x26>
    112e:	a6 c0       	rjmp	.+332    	; 0x127c <TIMERx_setTimerMode+0x172>
    1130:	20 f0       	brcs	.+8      	; 0x113a <TIMERx_setTimerMode+0x30>
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	09 f4       	brne	.+2      	; 0x1138 <TIMERx_setTimerMode+0x2e>
    1136:	c8 c1       	rjmp	.+912    	; 0x14c8 <TIMERx_setTimerMode+0x3be>
    1138:	70 c2       	rjmp	.+1248   	; 0x161a <TIMERx_setTimerMode+0x510>
    113a:	31 30       	cpi	r19, 0x01	; 1
    113c:	d9 f0       	breq	.+54     	; 0x1174 <TIMERx_setTimerMode+0x6a>
    113e:	30 f0       	brcs	.+12     	; 0x114c <TIMERx_setTimerMode+0x42>
    1140:	32 30       	cpi	r19, 0x02	; 2
    1142:	09 f4       	brne	.+2      	; 0x1146 <TIMERx_setTimerMode+0x3c>
    1144:	65 c0       	rjmp	.+202    	; 0x1210 <TIMERx_setTimerMode+0x106>
    1146:	33 30       	cpi	r19, 0x03	; 3
    1148:	e1 f1       	breq	.+120    	; 0x11c2 <TIMERx_setTimerMode+0xb8>
    114a:	69 c2       	rjmp	.+1234   	; 0x161e <TIMERx_setTimerMode+0x514>
    114c:	83 b7       	in	r24, 0x33	; 51
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	83 bf       	out	0x33, r24	; 51
    1152:	83 b7       	in	r24, 0x33	; 51
    1154:	8f 7b       	andi	r24, 0xBF	; 191
    1156:	83 bf       	out	0x33, r24	; 51
    1158:	83 b7       	in	r24, 0x33	; 51
    115a:	87 7f       	andi	r24, 0xF7	; 247
    115c:	83 bf       	out	0x33, r24	; 51
    115e:	83 b7       	in	r24, 0x33	; 51
    1160:	8f 7e       	andi	r24, 0xEF	; 239
    1162:	83 bf       	out	0x33, r24	; 51
    1164:	83 b7       	in	r24, 0x33	; 51
    1166:	8f 7d       	andi	r24, 0xDF	; 223
    1168:	83 bf       	out	0x33, r24	; 51
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	89 bf       	out	0x39, r24	; 57
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret
    1174:	23 b7       	in	r18, 0x33	; 51
    1176:	20 64       	ori	r18, 0x40	; 64
    1178:	23 bf       	out	0x33, r18	; 51
    117a:	23 b7       	in	r18, 0x33	; 51
    117c:	27 7f       	andi	r18, 0xF7	; 247
    117e:	23 bf       	out	0x33, r18	; 51
    1180:	fc 01       	movw	r30, r24
    1182:	25 81       	ldd	r18, Z+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	59 f0       	breq	.+22     	; 0x119e <TIMERx_setTimerMode+0x94>
    1188:	23 30       	cpi	r18, 0x03	; 3
    118a:	81 f0       	breq	.+32     	; 0x11ac <TIMERx_setTimerMode+0xa2>
    118c:	21 11       	cpse	r18, r1
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <TIMERx_setTimerMode+0xae>
    1190:	23 b7       	in	r18, 0x33	; 51
    1192:	2f 7e       	andi	r18, 0xEF	; 239
    1194:	23 bf       	out	0x33, r18	; 51
    1196:	23 b7       	in	r18, 0x33	; 51
    1198:	2f 7d       	andi	r18, 0xDF	; 223
    119a:	23 bf       	out	0x33, r18	; 51
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <TIMERx_setTimerMode+0xae>
    119e:	23 b7       	in	r18, 0x33	; 51
    11a0:	2f 7e       	andi	r18, 0xEF	; 239
    11a2:	23 bf       	out	0x33, r18	; 51
    11a4:	23 b7       	in	r18, 0x33	; 51
    11a6:	20 62       	ori	r18, 0x20	; 32
    11a8:	23 bf       	out	0x33, r18	; 51
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <TIMERx_setTimerMode+0xae>
    11ac:	23 b7       	in	r18, 0x33	; 51
    11ae:	20 61       	ori	r18, 0x10	; 16
    11b0:	23 bf       	out	0x33, r18	; 51
    11b2:	23 b7       	in	r18, 0x33	; 51
    11b4:	20 62       	ori	r18, 0x20	; 32
    11b6:	23 bf       	out	0x33, r18	; 51
    11b8:	fc 01       	movw	r30, r24
    11ba:	80 85       	ldd	r24, Z+8	; 0x08
    11bc:	8c bf       	out	0x3c, r24	; 60
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret
    11c2:	23 b7       	in	r18, 0x33	; 51
    11c4:	20 64       	ori	r18, 0x40	; 64
    11c6:	23 bf       	out	0x33, r18	; 51
    11c8:	23 b7       	in	r18, 0x33	; 51
    11ca:	28 60       	ori	r18, 0x08	; 8
    11cc:	23 bf       	out	0x33, r18	; 51
    11ce:	fc 01       	movw	r30, r24
    11d0:	24 81       	ldd	r18, Z+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	59 f0       	breq	.+22     	; 0x11ec <TIMERx_setTimerMode+0xe2>
    11d6:	23 30       	cpi	r18, 0x03	; 3
    11d8:	81 f0       	breq	.+32     	; 0x11fa <TIMERx_setTimerMode+0xf0>
    11da:	21 11       	cpse	r18, r1
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <TIMERx_setTimerMode+0xfc>
    11de:	23 b7       	in	r18, 0x33	; 51
    11e0:	2f 7e       	andi	r18, 0xEF	; 239
    11e2:	23 bf       	out	0x33, r18	; 51
    11e4:	23 b7       	in	r18, 0x33	; 51
    11e6:	2f 7d       	andi	r18, 0xDF	; 223
    11e8:	23 bf       	out	0x33, r18	; 51
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <TIMERx_setTimerMode+0xfc>
    11ec:	23 b7       	in	r18, 0x33	; 51
    11ee:	2f 7e       	andi	r18, 0xEF	; 239
    11f0:	23 bf       	out	0x33, r18	; 51
    11f2:	23 b7       	in	r18, 0x33	; 51
    11f4:	20 62       	ori	r18, 0x20	; 32
    11f6:	23 bf       	out	0x33, r18	; 51
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <TIMERx_setTimerMode+0xfc>
    11fa:	23 b7       	in	r18, 0x33	; 51
    11fc:	20 61       	ori	r18, 0x10	; 16
    11fe:	23 bf       	out	0x33, r18	; 51
    1200:	23 b7       	in	r18, 0x33	; 51
    1202:	20 62       	ori	r18, 0x20	; 32
    1204:	23 bf       	out	0x33, r18	; 51
    1206:	fc 01       	movw	r30, r24
    1208:	80 85       	ldd	r24, Z+8	; 0x08
    120a:	8c bf       	out	0x3c, r24	; 60
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	08 95       	ret
    1210:	23 b7       	in	r18, 0x33	; 51
    1212:	20 68       	ori	r18, 0x80	; 128
    1214:	23 bf       	out	0x33, r18	; 51
    1216:	23 b7       	in	r18, 0x33	; 51
    1218:	2f 7b       	andi	r18, 0xBF	; 191
    121a:	23 bf       	out	0x33, r18	; 51
    121c:	23 b7       	in	r18, 0x33	; 51
    121e:	28 60       	ori	r18, 0x08	; 8
    1220:	23 bf       	out	0x33, r18	; 51
    1222:	fc 01       	movw	r30, r24
    1224:	23 81       	ldd	r18, Z+3	; 0x03
    1226:	21 30       	cpi	r18, 0x01	; 1
    1228:	69 f0       	breq	.+26     	; 0x1244 <TIMERx_setTimerMode+0x13a>
    122a:	28 f0       	brcs	.+10     	; 0x1236 <TIMERx_setTimerMode+0x12c>
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	89 f0       	breq	.+34     	; 0x1252 <TIMERx_setTimerMode+0x148>
    1230:	23 30       	cpi	r18, 0x03	; 3
    1232:	b1 f0       	breq	.+44     	; 0x1260 <TIMERx_setTimerMode+0x156>
    1234:	1b c0       	rjmp	.+54     	; 0x126c <TIMERx_setTimerMode+0x162>
    1236:	23 b7       	in	r18, 0x33	; 51
    1238:	2f 7e       	andi	r18, 0xEF	; 239
    123a:	23 bf       	out	0x33, r18	; 51
    123c:	23 b7       	in	r18, 0x33	; 51
    123e:	2f 7d       	andi	r18, 0xDF	; 223
    1240:	23 bf       	out	0x33, r18	; 51
    1242:	14 c0       	rjmp	.+40     	; 0x126c <TIMERx_setTimerMode+0x162>
    1244:	23 b7       	in	r18, 0x33	; 51
    1246:	20 61       	ori	r18, 0x10	; 16
    1248:	23 bf       	out	0x33, r18	; 51
    124a:	23 b7       	in	r18, 0x33	; 51
    124c:	2f 7d       	andi	r18, 0xDF	; 223
    124e:	23 bf       	out	0x33, r18	; 51
    1250:	0d c0       	rjmp	.+26     	; 0x126c <TIMERx_setTimerMode+0x162>
    1252:	23 b7       	in	r18, 0x33	; 51
    1254:	2f 7e       	andi	r18, 0xEF	; 239
    1256:	23 bf       	out	0x33, r18	; 51
    1258:	23 b7       	in	r18, 0x33	; 51
    125a:	20 62       	ori	r18, 0x20	; 32
    125c:	23 bf       	out	0x33, r18	; 51
    125e:	06 c0       	rjmp	.+12     	; 0x126c <TIMERx_setTimerMode+0x162>
    1260:	23 b7       	in	r18, 0x33	; 51
    1262:	20 61       	ori	r18, 0x10	; 16
    1264:	23 bf       	out	0x33, r18	; 51
    1266:	23 b7       	in	r18, 0x33	; 51
    1268:	20 62       	ori	r18, 0x20	; 32
    126a:	23 bf       	out	0x33, r18	; 51
    126c:	fc 01       	movw	r30, r24
    126e:	80 85       	ldd	r24, Z+8	; 0x08
    1270:	8c bf       	out	0x3c, r24	; 60
    1272:	89 b7       	in	r24, 0x39	; 57
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	89 bf       	out	0x39, r24	; 57
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	08 95       	ret
    127c:	31 30       	cpi	r19, 0x01	; 1
    127e:	59 f1       	breq	.+86     	; 0x12d6 <TIMERx_setTimerMode+0x1cc>
    1280:	38 f0       	brcs	.+14     	; 0x1290 <TIMERx_setTimerMode+0x186>
    1282:	32 30       	cpi	r19, 0x02	; 2
    1284:	09 f4       	brne	.+2      	; 0x1288 <TIMERx_setTimerMode+0x17e>
    1286:	c7 c0       	rjmp	.+398    	; 0x1416 <TIMERx_setTimerMode+0x30c>
    1288:	33 30       	cpi	r19, 0x03	; 3
    128a:	09 f4       	brne	.+2      	; 0x128e <TIMERx_setTimerMode+0x184>
    128c:	74 c0       	rjmp	.+232    	; 0x1376 <TIMERx_setTimerMode+0x26c>
    128e:	c9 c1       	rjmp	.+914    	; 0x1622 <TIMERx_setTimerMode+0x518>
    1290:	8f b5       	in	r24, 0x2f	; 47
    1292:	88 60       	ori	r24, 0x08	; 8
    1294:	8f bd       	out	0x2f, r24	; 47
    1296:	8f b5       	in	r24, 0x2f	; 47
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	8f bd       	out	0x2f, r24	; 47
    129c:	8f b5       	in	r24, 0x2f	; 47
    129e:	8e 7f       	andi	r24, 0xFE	; 254
    12a0:	8f bd       	out	0x2f, r24	; 47
    12a2:	8f b5       	in	r24, 0x2f	; 47
    12a4:	8d 7f       	andi	r24, 0xFD	; 253
    12a6:	8f bd       	out	0x2f, r24	; 47
    12a8:	8e b5       	in	r24, 0x2e	; 46
    12aa:	8f 7e       	andi	r24, 0xEF	; 239
    12ac:	8e bd       	out	0x2e, r24	; 46
    12ae:	8e b5       	in	r24, 0x2e	; 46
    12b0:	87 7f       	andi	r24, 0xF7	; 247
    12b2:	8e bd       	out	0x2e, r24	; 46
    12b4:	8f b5       	in	r24, 0x2f	; 47
    12b6:	8f 7b       	andi	r24, 0xBF	; 191
    12b8:	8f bd       	out	0x2f, r24	; 47
    12ba:	8f b5       	in	r24, 0x2f	; 47
    12bc:	8f 77       	andi	r24, 0x7F	; 127
    12be:	8f bd       	out	0x2f, r24	; 47
    12c0:	8f b5       	in	r24, 0x2f	; 47
    12c2:	8f 7e       	andi	r24, 0xEF	; 239
    12c4:	8f bd       	out	0x2f, r24	; 47
    12c6:	8f b5       	in	r24, 0x2f	; 47
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	8f bd       	out	0x2f, r24	; 47
    12cc:	89 b7       	in	r24, 0x39	; 57
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	89 bf       	out	0x39, r24	; 57
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	08 95       	ret
    12d6:	2f b5       	in	r18, 0x2f	; 47
    12d8:	21 60       	ori	r18, 0x01	; 1
    12da:	2f bd       	out	0x2f, r18	; 47
    12dc:	2f b5       	in	r18, 0x2f	; 47
    12de:	2d 7f       	andi	r18, 0xFD	; 253
    12e0:	2f bd       	out	0x2f, r18	; 47
    12e2:	2e b5       	in	r18, 0x2e	; 46
    12e4:	2f 7e       	andi	r18, 0xEF	; 239
    12e6:	2e bd       	out	0x2e, r18	; 46
    12e8:	2e b5       	in	r18, 0x2e	; 46
    12ea:	27 7f       	andi	r18, 0xF7	; 247
    12ec:	2e bd       	out	0x2e, r18	; 46
    12ee:	fc 01       	movw	r30, r24
    12f0:	25 81       	ldd	r18, Z+5	; 0x05
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	99 f0       	breq	.+38     	; 0x131c <TIMERx_setTimerMode+0x212>
    12f6:	28 f0       	brcs	.+10     	; 0x1302 <TIMERx_setTimerMode+0x1f8>
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	e9 f0       	breq	.+58     	; 0x1336 <TIMERx_setTimerMode+0x22c>
    12fc:	23 30       	cpi	r18, 0x03	; 3
    12fe:	41 f1       	breq	.+80     	; 0x1350 <TIMERx_setTimerMode+0x246>
    1300:	33 c0       	rjmp	.+102    	; 0x1368 <TIMERx_setTimerMode+0x25e>
    1302:	2f b5       	in	r18, 0x2f	; 47
    1304:	2f 7b       	andi	r18, 0xBF	; 191
    1306:	2f bd       	out	0x2f, r18	; 47
    1308:	2f b5       	in	r18, 0x2f	; 47
    130a:	2f 77       	andi	r18, 0x7F	; 127
    130c:	2f bd       	out	0x2f, r18	; 47
    130e:	2f b5       	in	r18, 0x2f	; 47
    1310:	2f 7e       	andi	r18, 0xEF	; 239
    1312:	2f bd       	out	0x2f, r18	; 47
    1314:	2f b5       	in	r18, 0x2f	; 47
    1316:	2f 7d       	andi	r18, 0xDF	; 223
    1318:	2f bd       	out	0x2f, r18	; 47
    131a:	26 c0       	rjmp	.+76     	; 0x1368 <TIMERx_setTimerMode+0x25e>
    131c:	2f b5       	in	r18, 0x2f	; 47
    131e:	20 64       	ori	r18, 0x40	; 64
    1320:	2f bd       	out	0x2f, r18	; 47
    1322:	2f b5       	in	r18, 0x2f	; 47
    1324:	2f 77       	andi	r18, 0x7F	; 127
    1326:	2f bd       	out	0x2f, r18	; 47
    1328:	2f b5       	in	r18, 0x2f	; 47
    132a:	20 61       	ori	r18, 0x10	; 16
    132c:	2f bd       	out	0x2f, r18	; 47
    132e:	2f b5       	in	r18, 0x2f	; 47
    1330:	2f 7d       	andi	r18, 0xDF	; 223
    1332:	2f bd       	out	0x2f, r18	; 47
    1334:	19 c0       	rjmp	.+50     	; 0x1368 <TIMERx_setTimerMode+0x25e>
    1336:	2f b5       	in	r18, 0x2f	; 47
    1338:	2f 7b       	andi	r18, 0xBF	; 191
    133a:	2f bd       	out	0x2f, r18	; 47
    133c:	2f b5       	in	r18, 0x2f	; 47
    133e:	20 68       	ori	r18, 0x80	; 128
    1340:	2f bd       	out	0x2f, r18	; 47
    1342:	2f b5       	in	r18, 0x2f	; 47
    1344:	2f 7e       	andi	r18, 0xEF	; 239
    1346:	2f bd       	out	0x2f, r18	; 47
    1348:	2f b5       	in	r18, 0x2f	; 47
    134a:	20 62       	ori	r18, 0x20	; 32
    134c:	2f bd       	out	0x2f, r18	; 47
    134e:	0c c0       	rjmp	.+24     	; 0x1368 <TIMERx_setTimerMode+0x25e>
    1350:	2f b5       	in	r18, 0x2f	; 47
    1352:	20 64       	ori	r18, 0x40	; 64
    1354:	2f bd       	out	0x2f, r18	; 47
    1356:	2f b5       	in	r18, 0x2f	; 47
    1358:	20 68       	ori	r18, 0x80	; 128
    135a:	2f bd       	out	0x2f, r18	; 47
    135c:	2f b5       	in	r18, 0x2f	; 47
    135e:	20 61       	ori	r18, 0x10	; 16
    1360:	2f bd       	out	0x2f, r18	; 47
    1362:	2f b5       	in	r18, 0x2f	; 47
    1364:	20 62       	ori	r18, 0x20	; 32
    1366:	2f bd       	out	0x2f, r18	; 47
    1368:	fc 01       	movw	r30, r24
    136a:	20 85       	ldd	r18, Z+8	; 0x08
    136c:	2a bd       	out	0x2a, r18	; 42
    136e:	81 85       	ldd	r24, Z+9	; 0x09
    1370:	8b bd       	out	0x2b, r24	; 43
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	08 95       	ret
    1376:	2f b5       	in	r18, 0x2f	; 47
    1378:	21 60       	ori	r18, 0x01	; 1
    137a:	2f bd       	out	0x2f, r18	; 47
    137c:	2f b5       	in	r18, 0x2f	; 47
    137e:	2d 7f       	andi	r18, 0xFD	; 253
    1380:	2f bd       	out	0x2f, r18	; 47
    1382:	2e b5       	in	r18, 0x2e	; 46
    1384:	20 61       	ori	r18, 0x10	; 16
    1386:	2e bd       	out	0x2e, r18	; 46
    1388:	2e b5       	in	r18, 0x2e	; 46
    138a:	27 7f       	andi	r18, 0xF7	; 247
    138c:	2e bd       	out	0x2e, r18	; 46
    138e:	fc 01       	movw	r30, r24
    1390:	24 81       	ldd	r18, Z+4	; 0x04
    1392:	21 30       	cpi	r18, 0x01	; 1
    1394:	99 f0       	breq	.+38     	; 0x13bc <TIMERx_setTimerMode+0x2b2>
    1396:	28 f0       	brcs	.+10     	; 0x13a2 <TIMERx_setTimerMode+0x298>
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	e9 f0       	breq	.+58     	; 0x13d6 <TIMERx_setTimerMode+0x2cc>
    139c:	23 30       	cpi	r18, 0x03	; 3
    139e:	41 f1       	breq	.+80     	; 0x13f0 <TIMERx_setTimerMode+0x2e6>
    13a0:	33 c0       	rjmp	.+102    	; 0x1408 <TIMERx_setTimerMode+0x2fe>
    13a2:	2f b5       	in	r18, 0x2f	; 47
    13a4:	2f 7b       	andi	r18, 0xBF	; 191
    13a6:	2f bd       	out	0x2f, r18	; 47
    13a8:	2f b5       	in	r18, 0x2f	; 47
    13aa:	2f 77       	andi	r18, 0x7F	; 127
    13ac:	2f bd       	out	0x2f, r18	; 47
    13ae:	2f b5       	in	r18, 0x2f	; 47
    13b0:	2f 7e       	andi	r18, 0xEF	; 239
    13b2:	2f bd       	out	0x2f, r18	; 47
    13b4:	2f b5       	in	r18, 0x2f	; 47
    13b6:	2f 7d       	andi	r18, 0xDF	; 223
    13b8:	2f bd       	out	0x2f, r18	; 47
    13ba:	26 c0       	rjmp	.+76     	; 0x1408 <TIMERx_setTimerMode+0x2fe>
    13bc:	2f b5       	in	r18, 0x2f	; 47
    13be:	20 64       	ori	r18, 0x40	; 64
    13c0:	2f bd       	out	0x2f, r18	; 47
    13c2:	2f b5       	in	r18, 0x2f	; 47
    13c4:	2f 77       	andi	r18, 0x7F	; 127
    13c6:	2f bd       	out	0x2f, r18	; 47
    13c8:	2f b5       	in	r18, 0x2f	; 47
    13ca:	20 61       	ori	r18, 0x10	; 16
    13cc:	2f bd       	out	0x2f, r18	; 47
    13ce:	2f b5       	in	r18, 0x2f	; 47
    13d0:	2f 7d       	andi	r18, 0xDF	; 223
    13d2:	2f bd       	out	0x2f, r18	; 47
    13d4:	19 c0       	rjmp	.+50     	; 0x1408 <TIMERx_setTimerMode+0x2fe>
    13d6:	2f b5       	in	r18, 0x2f	; 47
    13d8:	2f 7b       	andi	r18, 0xBF	; 191
    13da:	2f bd       	out	0x2f, r18	; 47
    13dc:	2f b5       	in	r18, 0x2f	; 47
    13de:	20 68       	ori	r18, 0x80	; 128
    13e0:	2f bd       	out	0x2f, r18	; 47
    13e2:	2f b5       	in	r18, 0x2f	; 47
    13e4:	2f 7e       	andi	r18, 0xEF	; 239
    13e6:	2f bd       	out	0x2f, r18	; 47
    13e8:	2f b5       	in	r18, 0x2f	; 47
    13ea:	20 62       	ori	r18, 0x20	; 32
    13ec:	2f bd       	out	0x2f, r18	; 47
    13ee:	0c c0       	rjmp	.+24     	; 0x1408 <TIMERx_setTimerMode+0x2fe>
    13f0:	2f b5       	in	r18, 0x2f	; 47
    13f2:	20 64       	ori	r18, 0x40	; 64
    13f4:	2f bd       	out	0x2f, r18	; 47
    13f6:	2f b5       	in	r18, 0x2f	; 47
    13f8:	20 68       	ori	r18, 0x80	; 128
    13fa:	2f bd       	out	0x2f, r18	; 47
    13fc:	2f b5       	in	r18, 0x2f	; 47
    13fe:	20 61       	ori	r18, 0x10	; 16
    1400:	2f bd       	out	0x2f, r18	; 47
    1402:	2f b5       	in	r18, 0x2f	; 47
    1404:	20 62       	ori	r18, 0x20	; 32
    1406:	2f bd       	out	0x2f, r18	; 47
    1408:	fc 01       	movw	r30, r24
    140a:	20 85       	ldd	r18, Z+8	; 0x08
    140c:	2a bd       	out	0x2a, r18	; 42
    140e:	81 85       	ldd	r24, Z+9	; 0x09
    1410:	8b bd       	out	0x2b, r24	; 43
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	08 95       	ret
    1416:	2f b5       	in	r18, 0x2f	; 47
    1418:	28 60       	ori	r18, 0x08	; 8
    141a:	2f bd       	out	0x2f, r18	; 47
    141c:	2f b5       	in	r18, 0x2f	; 47
    141e:	24 60       	ori	r18, 0x04	; 4
    1420:	2f bd       	out	0x2f, r18	; 47
    1422:	2f b5       	in	r18, 0x2f	; 47
    1424:	2e 7f       	andi	r18, 0xFE	; 254
    1426:	2f bd       	out	0x2f, r18	; 47
    1428:	2f b5       	in	r18, 0x2f	; 47
    142a:	2d 7f       	andi	r18, 0xFD	; 253
    142c:	2f bd       	out	0x2f, r18	; 47
    142e:	2e b5       	in	r18, 0x2e	; 46
    1430:	20 61       	ori	r18, 0x10	; 16
    1432:	2e bd       	out	0x2e, r18	; 46
    1434:	2e b5       	in	r18, 0x2e	; 46
    1436:	27 7f       	andi	r18, 0xF7	; 247
    1438:	2e bd       	out	0x2e, r18	; 46
    143a:	fc 01       	movw	r30, r24
    143c:	23 81       	ldd	r18, Z+3	; 0x03
    143e:	21 30       	cpi	r18, 0x01	; 1
    1440:	99 f0       	breq	.+38     	; 0x1468 <TIMERx_setTimerMode+0x35e>
    1442:	28 f0       	brcs	.+10     	; 0x144e <TIMERx_setTimerMode+0x344>
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	e9 f0       	breq	.+58     	; 0x1482 <TIMERx_setTimerMode+0x378>
    1448:	23 30       	cpi	r18, 0x03	; 3
    144a:	41 f1       	breq	.+80     	; 0x149c <TIMERx_setTimerMode+0x392>
    144c:	33 c0       	rjmp	.+102    	; 0x14b4 <TIMERx_setTimerMode+0x3aa>
    144e:	2f b5       	in	r18, 0x2f	; 47
    1450:	2f 7b       	andi	r18, 0xBF	; 191
    1452:	2f bd       	out	0x2f, r18	; 47
    1454:	2f b5       	in	r18, 0x2f	; 47
    1456:	2f 77       	andi	r18, 0x7F	; 127
    1458:	2f bd       	out	0x2f, r18	; 47
    145a:	2f b5       	in	r18, 0x2f	; 47
    145c:	2f 7e       	andi	r18, 0xEF	; 239
    145e:	2f bd       	out	0x2f, r18	; 47
    1460:	2f b5       	in	r18, 0x2f	; 47
    1462:	2f 7d       	andi	r18, 0xDF	; 223
    1464:	2f bd       	out	0x2f, r18	; 47
    1466:	26 c0       	rjmp	.+76     	; 0x14b4 <TIMERx_setTimerMode+0x3aa>
    1468:	2f b5       	in	r18, 0x2f	; 47
    146a:	20 64       	ori	r18, 0x40	; 64
    146c:	2f bd       	out	0x2f, r18	; 47
    146e:	2f b5       	in	r18, 0x2f	; 47
    1470:	2f 77       	andi	r18, 0x7F	; 127
    1472:	2f bd       	out	0x2f, r18	; 47
    1474:	2f b5       	in	r18, 0x2f	; 47
    1476:	20 61       	ori	r18, 0x10	; 16
    1478:	2f bd       	out	0x2f, r18	; 47
    147a:	2f b5       	in	r18, 0x2f	; 47
    147c:	2f 7d       	andi	r18, 0xDF	; 223
    147e:	2f bd       	out	0x2f, r18	; 47
    1480:	19 c0       	rjmp	.+50     	; 0x14b4 <TIMERx_setTimerMode+0x3aa>
    1482:	2f b5       	in	r18, 0x2f	; 47
    1484:	2f 7b       	andi	r18, 0xBF	; 191
    1486:	2f bd       	out	0x2f, r18	; 47
    1488:	2f b5       	in	r18, 0x2f	; 47
    148a:	20 68       	ori	r18, 0x80	; 128
    148c:	2f bd       	out	0x2f, r18	; 47
    148e:	2f b5       	in	r18, 0x2f	; 47
    1490:	2f 7e       	andi	r18, 0xEF	; 239
    1492:	2f bd       	out	0x2f, r18	; 47
    1494:	2f b5       	in	r18, 0x2f	; 47
    1496:	20 62       	ori	r18, 0x20	; 32
    1498:	2f bd       	out	0x2f, r18	; 47
    149a:	0c c0       	rjmp	.+24     	; 0x14b4 <TIMERx_setTimerMode+0x3aa>
    149c:	2f b5       	in	r18, 0x2f	; 47
    149e:	20 64       	ori	r18, 0x40	; 64
    14a0:	2f bd       	out	0x2f, r18	; 47
    14a2:	2f b5       	in	r18, 0x2f	; 47
    14a4:	20 68       	ori	r18, 0x80	; 128
    14a6:	2f bd       	out	0x2f, r18	; 47
    14a8:	2f b5       	in	r18, 0x2f	; 47
    14aa:	20 61       	ori	r18, 0x10	; 16
    14ac:	2f bd       	out	0x2f, r18	; 47
    14ae:	2f b5       	in	r18, 0x2f	; 47
    14b0:	20 62       	ori	r18, 0x20	; 32
    14b2:	2f bd       	out	0x2f, r18	; 47
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 85       	ldd	r18, Z+8	; 0x08
    14b8:	2a bd       	out	0x2a, r18	; 42
    14ba:	81 85       	ldd	r24, Z+9	; 0x09
    14bc:	8b bd       	out	0x2b, r24	; 43
    14be:	89 b7       	in	r24, 0x39	; 57
    14c0:	80 61       	ori	r24, 0x10	; 16
    14c2:	89 bf       	out	0x39, r24	; 57
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret
    14c8:	31 30       	cpi	r19, 0x01	; 1
    14ca:	d9 f0       	breq	.+54     	; 0x1502 <TIMERx_setTimerMode+0x3f8>
    14cc:	30 f0       	brcs	.+12     	; 0x14da <TIMERx_setTimerMode+0x3d0>
    14ce:	32 30       	cpi	r19, 0x02	; 2
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <TIMERx_setTimerMode+0x3ca>
    14d2:	65 c0       	rjmp	.+202    	; 0x159e <TIMERx_setTimerMode+0x494>
    14d4:	33 30       	cpi	r19, 0x03	; 3
    14d6:	e1 f1       	breq	.+120    	; 0x1550 <TIMERx_setTimerMode+0x446>
    14d8:	a6 c0       	rjmp	.+332    	; 0x1626 <TIMERx_setTimerMode+0x51c>
    14da:	85 b5       	in	r24, 0x25	; 37
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	85 bd       	out	0x25, r24	; 37
    14e0:	85 b5       	in	r24, 0x25	; 37
    14e2:	8f 7b       	andi	r24, 0xBF	; 191
    14e4:	85 bd       	out	0x25, r24	; 37
    14e6:	85 b5       	in	r24, 0x25	; 37
    14e8:	87 7f       	andi	r24, 0xF7	; 247
    14ea:	85 bd       	out	0x25, r24	; 37
    14ec:	85 b5       	in	r24, 0x25	; 37
    14ee:	8f 7e       	andi	r24, 0xEF	; 239
    14f0:	85 bd       	out	0x25, r24	; 37
    14f2:	85 b5       	in	r24, 0x25	; 37
    14f4:	8f 7d       	andi	r24, 0xDF	; 223
    14f6:	85 bd       	out	0x25, r24	; 37
    14f8:	89 b7       	in	r24, 0x39	; 57
    14fa:	80 64       	ori	r24, 0x40	; 64
    14fc:	89 bf       	out	0x39, r24	; 57
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	08 95       	ret
    1502:	25 b5       	in	r18, 0x25	; 37
    1504:	20 64       	ori	r18, 0x40	; 64
    1506:	25 bd       	out	0x25, r18	; 37
    1508:	25 b5       	in	r18, 0x25	; 37
    150a:	27 7f       	andi	r18, 0xF7	; 247
    150c:	25 bd       	out	0x25, r18	; 37
    150e:	fc 01       	movw	r30, r24
    1510:	25 81       	ldd	r18, Z+5	; 0x05
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	59 f0       	breq	.+22     	; 0x152c <TIMERx_setTimerMode+0x422>
    1516:	23 30       	cpi	r18, 0x03	; 3
    1518:	81 f0       	breq	.+32     	; 0x153a <TIMERx_setTimerMode+0x430>
    151a:	21 11       	cpse	r18, r1
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <TIMERx_setTimerMode+0x43c>
    151e:	25 b5       	in	r18, 0x25	; 37
    1520:	2f 7e       	andi	r18, 0xEF	; 239
    1522:	25 bd       	out	0x25, r18	; 37
    1524:	25 b5       	in	r18, 0x25	; 37
    1526:	2f 7d       	andi	r18, 0xDF	; 223
    1528:	25 bd       	out	0x25, r18	; 37
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <TIMERx_setTimerMode+0x43c>
    152c:	25 b5       	in	r18, 0x25	; 37
    152e:	2f 7e       	andi	r18, 0xEF	; 239
    1530:	25 bd       	out	0x25, r18	; 37
    1532:	25 b5       	in	r18, 0x25	; 37
    1534:	20 62       	ori	r18, 0x20	; 32
    1536:	25 bd       	out	0x25, r18	; 37
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <TIMERx_setTimerMode+0x43c>
    153a:	25 b5       	in	r18, 0x25	; 37
    153c:	20 61       	ori	r18, 0x10	; 16
    153e:	25 bd       	out	0x25, r18	; 37
    1540:	25 b5       	in	r18, 0x25	; 37
    1542:	20 62       	ori	r18, 0x20	; 32
    1544:	25 bd       	out	0x25, r18	; 37
    1546:	fc 01       	movw	r30, r24
    1548:	80 85       	ldd	r24, Z+8	; 0x08
    154a:	83 bd       	out	0x23, r24	; 35
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	08 95       	ret
    1550:	25 b5       	in	r18, 0x25	; 37
    1552:	20 64       	ori	r18, 0x40	; 64
    1554:	25 bd       	out	0x25, r18	; 37
    1556:	25 b5       	in	r18, 0x25	; 37
    1558:	28 60       	ori	r18, 0x08	; 8
    155a:	25 bd       	out	0x25, r18	; 37
    155c:	fc 01       	movw	r30, r24
    155e:	24 81       	ldd	r18, Z+4	; 0x04
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	59 f0       	breq	.+22     	; 0x157a <TIMERx_setTimerMode+0x470>
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	81 f0       	breq	.+32     	; 0x1588 <TIMERx_setTimerMode+0x47e>
    1568:	21 11       	cpse	r18, r1
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <TIMERx_setTimerMode+0x48a>
    156c:	25 b5       	in	r18, 0x25	; 37
    156e:	2f 7e       	andi	r18, 0xEF	; 239
    1570:	25 bd       	out	0x25, r18	; 37
    1572:	25 b5       	in	r18, 0x25	; 37
    1574:	2f 7d       	andi	r18, 0xDF	; 223
    1576:	25 bd       	out	0x25, r18	; 37
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <TIMERx_setTimerMode+0x48a>
    157a:	25 b5       	in	r18, 0x25	; 37
    157c:	2f 7e       	andi	r18, 0xEF	; 239
    157e:	25 bd       	out	0x25, r18	; 37
    1580:	25 b5       	in	r18, 0x25	; 37
    1582:	20 62       	ori	r18, 0x20	; 32
    1584:	25 bd       	out	0x25, r18	; 37
    1586:	06 c0       	rjmp	.+12     	; 0x1594 <TIMERx_setTimerMode+0x48a>
    1588:	25 b5       	in	r18, 0x25	; 37
    158a:	20 61       	ori	r18, 0x10	; 16
    158c:	25 bd       	out	0x25, r18	; 37
    158e:	25 b5       	in	r18, 0x25	; 37
    1590:	20 62       	ori	r18, 0x20	; 32
    1592:	25 bd       	out	0x25, r18	; 37
    1594:	fc 01       	movw	r30, r24
    1596:	80 85       	ldd	r24, Z+8	; 0x08
    1598:	83 bd       	out	0x23, r24	; 35
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	08 95       	ret
    159e:	25 b5       	in	r18, 0x25	; 37
    15a0:	20 68       	ori	r18, 0x80	; 128
    15a2:	25 bd       	out	0x25, r18	; 37
    15a4:	25 b5       	in	r18, 0x25	; 37
    15a6:	2f 7b       	andi	r18, 0xBF	; 191
    15a8:	25 bd       	out	0x25, r18	; 37
    15aa:	25 b5       	in	r18, 0x25	; 37
    15ac:	28 60       	ori	r18, 0x08	; 8
    15ae:	25 bd       	out	0x25, r18	; 37
    15b0:	fc 01       	movw	r30, r24
    15b2:	23 81       	ldd	r18, Z+3	; 0x03
    15b4:	21 30       	cpi	r18, 0x01	; 1
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <TIMERx_setTimerMode+0x4c8>
    15b8:	28 f0       	brcs	.+10     	; 0x15c4 <TIMERx_setTimerMode+0x4ba>
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	89 f0       	breq	.+34     	; 0x15e0 <TIMERx_setTimerMode+0x4d6>
    15be:	23 30       	cpi	r18, 0x03	; 3
    15c0:	b1 f0       	breq	.+44     	; 0x15ee <TIMERx_setTimerMode+0x4e4>
    15c2:	1b c0       	rjmp	.+54     	; 0x15fa <TIMERx_setTimerMode+0x4f0>
    15c4:	25 b5       	in	r18, 0x25	; 37
    15c6:	2f 7e       	andi	r18, 0xEF	; 239
    15c8:	25 bd       	out	0x25, r18	; 37
    15ca:	25 b5       	in	r18, 0x25	; 37
    15cc:	2f 7d       	andi	r18, 0xDF	; 223
    15ce:	25 bd       	out	0x25, r18	; 37
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <TIMERx_setTimerMode+0x4f0>
    15d2:	25 b5       	in	r18, 0x25	; 37
    15d4:	20 61       	ori	r18, 0x10	; 16
    15d6:	25 bd       	out	0x25, r18	; 37
    15d8:	25 b5       	in	r18, 0x25	; 37
    15da:	2f 7d       	andi	r18, 0xDF	; 223
    15dc:	25 bd       	out	0x25, r18	; 37
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <TIMERx_setTimerMode+0x4f0>
    15e0:	25 b5       	in	r18, 0x25	; 37
    15e2:	2f 7e       	andi	r18, 0xEF	; 239
    15e4:	25 bd       	out	0x25, r18	; 37
    15e6:	25 b5       	in	r18, 0x25	; 37
    15e8:	20 62       	ori	r18, 0x20	; 32
    15ea:	25 bd       	out	0x25, r18	; 37
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <TIMERx_setTimerMode+0x4f0>
    15ee:	25 b5       	in	r18, 0x25	; 37
    15f0:	20 61       	ori	r18, 0x10	; 16
    15f2:	25 bd       	out	0x25, r18	; 37
    15f4:	25 b5       	in	r18, 0x25	; 37
    15f6:	20 62       	ori	r18, 0x20	; 32
    15f8:	25 bd       	out	0x25, r18	; 37
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 85       	ldd	r24, Z+8	; 0x08
    15fe:	83 bd       	out	0x23, r24	; 35
    1600:	89 b7       	in	r24, 0x39	; 57
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	89 bf       	out	0x39, r24	; 57
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	08 95       	ret
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	08 95       	ret
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	08 95       	ret
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	08 95       	ret
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	08 95       	ret
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	08 95       	ret
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	08 95       	ret
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	08 95       	ret

0000162a <__vector_9>:
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_Timer1_callBackPtr>
    1650:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_Timer1_callBackPtr+0x1>
    1654:	89 2b       	or	r24, r25
    1656:	41 f0       	breq	.+16     	; 0x1668 <__vector_9+0x3e>
    1658:	88 b7       	in	r24, 0x38	; 56
    165a:	8b 7f       	andi	r24, 0xFB	; 251
    165c:	88 bf       	out	0x38, r24	; 56
    165e:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <g_Timer1_callBackPtr>
    1662:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <g_Timer1_callBackPtr+0x1>
    1666:	09 95       	icall
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <__vector_11>:
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <g_Timer0_callBackPtr>
    16b0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <g_Timer0_callBackPtr+0x1>
    16b4:	89 2b       	or	r24, r25
    16b6:	41 f0       	breq	.+16     	; 0x16c8 <__vector_11+0x3e>
    16b8:	88 b7       	in	r24, 0x38	; 56
    16ba:	8e 7f       	andi	r24, 0xFE	; 254
    16bc:	88 bf       	out	0x38, r24	; 56
    16be:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <g_Timer0_callBackPtr>
    16c2:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <g_Timer0_callBackPtr+0x1>
    16c6:	09 95       	icall
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <TIMERx_setCallBack>:
    16ea:	63 30       	cpi	r22, 0x03	; 3
    16ec:	a8 f4       	brcc	.+42     	; 0x1718 <TIMERx_setCallBack+0x2e>
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	a9 f0       	breq	.+42     	; 0x171c <TIMERx_setCallBack+0x32>
    16f2:	61 30       	cpi	r22, 0x01	; 1
    16f4:	59 f0       	breq	.+22     	; 0x170c <TIMERx_setCallBack+0x22>
    16f6:	20 f0       	brcs	.+8      	; 0x1700 <TIMERx_setCallBack+0x16>
    16f8:	62 30       	cpi	r22, 0x02	; 2
    16fa:	91 f0       	breq	.+36     	; 0x1720 <TIMERx_setCallBack+0x36>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	08 95       	ret
    1700:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <g_Timer0_callBackPtr+0x1>
    1704:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <g_Timer0_callBackPtr>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	08 95       	ret
    170c:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <g_Timer1_callBackPtr+0x1>
    1710:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <g_Timer1_callBackPtr>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	08 95       	ret
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	08 95       	ret
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	08 95       	ret

00001724 <TIMERx_init>:
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	b1 f1       	breq	.+108    	; 0x1794 <TIMERx_init+0x70>
    1728:	fc 01       	movw	r30, r24
    172a:	20 81       	ld	r18, Z
    172c:	23 30       	cpi	r18, 0x03	; 3
    172e:	a0 f5       	brcc	.+104    	; 0x1798 <TIMERx_init+0x74>
    1730:	32 81       	ldd	r19, Z+2	; 0x02
    1732:	34 30       	cpi	r19, 0x04	; 4
    1734:	98 f5       	brcc	.+102    	; 0x179c <TIMERx_init+0x78>
    1736:	33 81       	ldd	r19, Z+3	; 0x03
    1738:	34 30       	cpi	r19, 0x04	; 4
    173a:	90 f5       	brcc	.+100    	; 0x17a0 <TIMERx_init+0x7c>
    173c:	34 81       	ldd	r19, Z+4	; 0x04
    173e:	34 30       	cpi	r19, 0x04	; 4
    1740:	88 f5       	brcc	.+98     	; 0x17a4 <TIMERx_init+0x80>
    1742:	21 30       	cpi	r18, 0x01	; 1
    1744:	71 f0       	breq	.+28     	; 0x1762 <TIMERx_init+0x3e>
    1746:	18 f0       	brcs	.+6      	; 0x174e <TIMERx_init+0x2a>
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	d1 f0       	breq	.+52     	; 0x1780 <TIMERx_init+0x5c>
    174c:	2d c0       	rjmp	.+90     	; 0x17a8 <TIMERx_init+0x84>
    174e:	12 be       	out	0x32, r1	; 50
    1750:	13 be       	out	0x33, r1	; 51
    1752:	1c be       	out	0x3c, r1	; 60
    1754:	fc 01       	movw	r30, r24
    1756:	26 81       	ldd	r18, Z+6	; 0x06
    1758:	22 bf       	out	0x32, r18	; 50
    175a:	0e 94 85 08 	call	0x110a	; 0x110a <TIMERx_setTimerMode>
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	08 95       	ret
    1762:	1c bc       	out	0x2c, r1	; 44
    1764:	1d bc       	out	0x2d, r1	; 45
    1766:	1f bc       	out	0x2f, r1	; 47
    1768:	1e bc       	out	0x2e, r1	; 46
    176a:	1b bc       	out	0x2b, r1	; 43
    176c:	1a bc       	out	0x2a, r1	; 42
    176e:	fc 01       	movw	r30, r24
    1770:	26 81       	ldd	r18, Z+6	; 0x06
    1772:	37 81       	ldd	r19, Z+7	; 0x07
    1774:	3d bd       	out	0x2d, r19	; 45
    1776:	2c bd       	out	0x2c, r18	; 44
    1778:	0e 94 85 08 	call	0x110a	; 0x110a <TIMERx_setTimerMode>
    177c:	81 60       	ori	r24, 0x01	; 1
    177e:	08 95       	ret
    1780:	14 bc       	out	0x24, r1	; 36
    1782:	15 bc       	out	0x25, r1	; 37
    1784:	13 bc       	out	0x23, r1	; 35
    1786:	fc 01       	movw	r30, r24
    1788:	26 81       	ldd	r18, Z+6	; 0x06
    178a:	24 bd       	out	0x24, r18	; 36
    178c:	0e 94 85 08 	call	0x110a	; 0x110a <TIMERx_setTimerMode>
    1790:	81 60       	ori	r24, 0x01	; 1
    1792:	08 95       	ret
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	08 95       	ret
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	08 95       	ret
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	08 95       	ret
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	08 95       	ret
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	08 95       	ret

000017ac <TIMERx_start>:
    17ac:	8a 30       	cpi	r24, 0x0A	; 10
    17ae:	40 f4       	brcc	.+16     	; 0x17c0 <TIMERx_start+0x14>
    17b0:	63 30       	cpi	r22, 0x03	; 3
    17b2:	40 f4       	brcc	.+16     	; 0x17c4 <TIMERx_start+0x18>
    17b4:	96 2f       	mov	r25, r22
    17b6:	68 2f       	mov	r22, r24
    17b8:	89 2f       	mov	r24, r25
    17ba:	0e 94 42 07 	call	0xe84	; 0xe84 <TIMERx_selectClk>
    17be:	08 95       	ret
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	08 95       	ret
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	08 95       	ret

000017c8 <TIMERx_stop>:

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) )
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	38 f5       	brcc	.+78     	; 0x181a <TIMERx_stop+0x52>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	79 f0       	breq	.+30     	; 0x17ee <TIMERx_stop+0x26>
    17d0:	18 f0       	brcs	.+6      	; 0x17d8 <TIMERx_stop+0x10>
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	b9 f0       	breq	.+46     	; 0x1804 <TIMERx_stop+0x3c>
    17d6:	23 c0       	rjmp	.+70     	; 0x181e <TIMERx_stop+0x56>
		{
			case Timer0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
    17d8:	83 b7       	in	r24, 0x33	; 51
    17da:	8e 7f       	andi	r24, 0xFE	; 254
    17dc:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
    17de:	83 b7       	in	r24, 0x33	; 51
    17e0:	8d 7f       	andi	r24, 0xFD	; 253
    17e2:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
    17e4:	83 b7       	in	r24, 0x33	; 51
    17e6:	8b 7f       	andi	r24, 0xFB	; 251
    17e8:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
			case Timer0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
    17ec:	08 95       	ret
				
			case Timer1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
    17ee:	8e b5       	in	r24, 0x2e	; 46
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
    17f4:	8e b5       	in	r24, 0x2e	; 46
    17f6:	8d 7f       	andi	r24, 0xFD	; 253
    17f8:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
    17fa:	8e b5       	in	r24, 0x2e	; 46
    17fc:	8b 7f       	andi	r24, 0xFB	; 251
    17fe:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    1800:	81 e0       	ldi	r24, 0x01	; 1
			case Timer1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
    1802:	08 95       	ret
				
			case Timer2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
    1804:	85 b5       	in	r24, 0x25	; 37
    1806:	8b 7f       	andi	r24, 0xFB	; 251
    1808:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
    180a:	85 b5       	in	r24, 0x25	; 37
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
    1810:	85 b5       	in	r24, 0x25	; 37
    1812:	8e 7f       	andi	r24, 0xFE	; 254
    1814:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    1816:	81 e0       	ldi	r24, 0x01	; 1
			case Timer2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
    1818:	08 95       	ret
Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				l_ret |= E_NOT_OK;
    181e:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return l_ret;
}
    1820:	08 95       	ret

00001822 <__tablejump2__>:
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	05 90       	lpm	r0, Z+
    1828:	f4 91       	lpm	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	09 94       	ijmp

0000182e <_exit>:
    182e:	f8 94       	cli

00001830 <__stop_program>:
    1830:	ff cf       	rjmp	.-2      	; 0x1830 <__stop_program>
