
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000093a  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001568  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000035c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d9  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a77  00000000  00000000  00003f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 76 03 	call	0x6ec	; 0x6ec <main>
  8a:	0c 94 9b 04 	jmp	0x936	; 0x936 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

uint8_t volatile u8_gv_delay = 0; 


ISR(TIMER1_OVF)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	u8_gv_delay++;
  a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	
	TCNT1 = 61629;		// 500 ms with prescaler 1024 and F_CPU = 8M
  aa:	8d eb       	ldi	r24, 0xBD	; 189
  ac:	90 ef       	ldi	r25, 0xF0	; 240
  ae:	9d bd       	out	0x2d, r25	; 45
  b0:	8c bd       	out	0x2c, r24	; 44
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_11>:

ISR(TIMER0_OVF)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	u8_gv_delay++;
  ce:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	
	TCNT1 = 61629;		// 500 ms with prescaler 1024 and F_CPU = 8M
  d8:	8d eb       	ldi	r24, 0xBD	; 189
  da:	90 ef       	ldi	r25, 0xF0	; 240
  dc:	9d bd       	out	0x2d, r25	; 45
  de:	8c bd       	out	0x2c, r24	; 44
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_1>:


ISR(EXT_INT0)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	u8_gv_delay = 0;
  fa:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	u8_gs_v_progState = BTN_STOP;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <APP_init>:
		}
	}
}

void APP_init(void)
{
 110:	cf 93       	push	r28
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	0b c0       	rjmp	.+22     	; 0x12c <APP_init+0x1c>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
 116:	ec 2f       	mov	r30, r28
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	e5 59       	subi	r30, 0x95	; 149
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	61 81       	ldd	r22, Z+1	; 0x01
 124:	80 81       	ld	r24, Z
 126:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LED_init>
	}
}

void APP_init(void)
{
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	c4 30       	cpi	r28, 0x04	; 4
 12e:	98 f3       	brcs	.-26     	; 0x116 <APP_init+0x6>
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	11 c0       	rjmp	.+34     	; 0x156 <APP_init+0x46>
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(portd,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
 134:	ec 2f       	mov	r30, r28
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	cf 01       	movw	r24, r30
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	ef 59       	subi	r30, 0x9F	; 159
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	42 81       	ldd	r20, Z+2	; 0x02
 14c:	61 81       	ldd	r22, Z+1	; 0x01
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 35 03 	call	0x66a	; 0x66a <BUTTON_init>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	c2 30       	cpi	r28, 0x02	; 2
 158:	68 f3       	brcs	.-38     	; 0x134 <APP_init+0x24>
	timer1.timer_mode = 0;
	timer1.timer_InitialValue = 61629;
	TIMER_MANGER_init(&timer1);*/
	
	
	GICR = 1<<INT0;
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01;
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	85 bf       	out	0x35, r24	; 53
	
	
	TCCR1A = 0x00;
 162:	1f bc       	out	0x2f, r1	; 47
	
	TIMSK = 1 << TOIE1;
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 61629;
 168:	8d eb       	ldi	r24, 0xBD	; 189
 16a:	90 ef       	ldi	r25, 0xF0	; 240
 16c:	9d bd       	out	0x2d, r25	; 45
 16e:	8c bd       	out	0x2c, r24	; 44
	
	
	sei();
 170:	78 94       	sei
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <APP_start>:
void APP_start(void)
{
	
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	APP_init();
 176:	0e 94 88 00 	call	0x110	; 0x110 <APP_init>
	
	while(1)
	{
		BUTTON_mainTask();
 17a:	0e 94 2a 03 	call	0x654	; 0x654 <BUTTON_mainTask>
		while (u8_gs_v_progState == BTN_STOP)
 17e:	1c c0       	rjmp	.+56     	; 0x1b8 <APP_start+0x42>
		{
			TCCR1B = 0;						// stop timer 1
 180:	1e bc       	out	0x2e, r1	; 46
			BUTTON_mainTask();
 182:	0e 94 2a 03 	call	0x654	; 0x654 <BUTTON_mainTask>
			
			
			LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
			LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 18e:	66 e0       	ldi	r22, 0x06	; 6
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
			LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
			LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 19e:	67 e0       	ldi	r22, 0x07	; 7
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
			// Here We Will STOP motors
			
			// Here Stop timer 1
			
			
			btnState = BUTTON_getState(st_gc_btn_config[0].u8_a_ID);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <BUTTON_getState>
			
			if (btnState == BT_RELEASED)
 1ac:	85 30       	cpi	r24, 0x05	; 5
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <APP_start+0x3e>
			{
				u8_gs_v_progState = BTN_START;
 1b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			u8_gv_delay = 0;
 1b4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	APP_init();
	
	while(1)
	{
		BUTTON_mainTask();
		while (u8_gs_v_progState == BTN_STOP)
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	01 f3       	breq	.-64     	; 0x180 <APP_start+0xa>
 1c0:	ce c0       	rjmp	.+412    	; 0x35e <APP_start+0x1e8>
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
		{
			TCCR1B = 1<< CS10 | 1<<CS12;								// start timer 1
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	8e bd       	out	0x2e, r24	; 46
			if (u8_gv_delay>= 2)										// 1s delay
 1c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <APP_start+0x5a>
 1ce:	c7 c0       	rjmp	.+398    	; 0x35e <APP_start+0x1e8>
			{
				if (u8_gv_delay <= 8 )									// longest side for 3s with speed 50%
 1d0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1d4:	89 30       	cpi	r24, 0x09	; 9
 1d6:	88 f4       	brcc	.+34     	; 0x1fa <APP_start+0x84>
				{
					// car move forward with 50% speed
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 1e0:	66 e0       	ldi	r22, 0x06	; 6
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
 1f8:	b2 c0       	rjmp	.+356    	; 0x35e <APP_start+0x1e8>
				}
				else if (u8_gv_delay>8 && u8_gv_delay <=9)				// stop for 0.5		
 1fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1fe:	89 30       	cpi	r24, 0x09	; 9
 200:	a8 f0       	brcs	.+42     	; 0x22c <APP_start+0xb6>
 202:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 206:	8a 30       	cpi	r24, 0x0A	; 10
 208:	88 f4       	brcc	.+34     	; 0x22c <APP_start+0xb6>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 20a:	65 e0       	ldi	r22, 0x05	; 5
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 212:	66 e0       	ldi	r22, 0x06	; 6
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
 22a:	99 c0       	rjmp	.+306    	; 0x35e <APP_start+0x1e8>
					
					// Here We Will STOP motors
					
					
				}
				else if (u8_gv_delay >9 && u8_gv_delay <=10)			// rotate 90 degree to right
 22c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 230:	8a 30       	cpi	r24, 0x0A	; 10
 232:	a8 f0       	brcs	.+42     	; 0x25e <APP_start+0xe8>
 234:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 238:	8b 30       	cpi	r24, 0x0B	; 11
 23a:	88 f4       	brcc	.+34     	; 0x25e <APP_start+0xe8>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 23c:	65 e0       	ldi	r22, 0x05	; 5
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 244:	66 e0       	ldi	r22, 0x06	; 6
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 254:	67 e0       	ldi	r22, 0x07	; 7
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
 25c:	80 c0       	rjmp	.+256    	; 0x35e <APP_start+0x1e8>
				}
				else if (u8_gv_delay > 10 && u8_gv_delay <=11)			// Stop the car for 0.5 s
 25e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 262:	8b 30       	cpi	r24, 0x0B	; 11
 264:	a8 f0       	brcs	.+42     	; 0x290 <APP_start+0x11a>
 266:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 26a:	8c 30       	cpi	r24, 0x0C	; 12
 26c:	88 f4       	brcc	.+34     	; 0x290 <APP_start+0x11a>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 26e:	65 e0       	ldi	r22, 0x05	; 5
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 286:	67 e0       	ldi	r22, 0x07	; 7
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
 28e:	67 c0       	rjmp	.+206    	; 0x35e <APP_start+0x1e8>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay > 11 && u8_gv_delay <= 15)				// short size for 2 s with speed 30%
 290:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 294:	8c 30       	cpi	r24, 0x0C	; 12
 296:	a8 f0       	brcs	.+42     	; 0x2c2 <APP_start+0x14c>
 298:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 29c:	80 31       	cpi	r24, 0x10	; 16
 29e:	88 f4       	brcc	.+34     	; 0x2c2 <APP_start+0x14c>
				{
					// move forward
					LED_on(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 2a0:	65 e0       	ldi	r22, 0x05	; 5
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 2a8:	66 e0       	ldi	r22, 0x06	; 6
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
 2c0:	4e c0       	rjmp	.+156    	; 0x35e <APP_start+0x1e8>
				}
				else if (u8_gv_delay>15 && u8_gv_delay <=16)				// stop for 0.5		
 2c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	a8 f0       	brcs	.+42     	; 0x2f4 <APP_start+0x17e>
 2ca:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2ce:	81 31       	cpi	r24, 0x11	; 17
 2d0:	88 f4       	brcc	.+34     	; 0x2f4 <APP_start+0x17e>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 2d2:	65 e0       	ldi	r22, 0x05	; 5
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 2da:	66 e0       	ldi	r22, 0x06	; 6
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
 2f2:	35 c0       	rjmp	.+106    	; 0x35e <APP_start+0x1e8>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay >16 && u8_gv_delay <=17)			// rotate 90 degree to right
 2f4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2f8:	81 31       	cpi	r24, 0x11	; 17
 2fa:	a8 f0       	brcs	.+42     	; 0x326 <APP_start+0x1b0>
 2fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 300:	82 31       	cpi	r24, 0x12	; 18
 302:	88 f4       	brcc	.+34     	; 0x326 <APP_start+0x1b0>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 304:	65 e0       	ldi	r22, 0x05	; 5
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 30c:	66 e0       	ldi	r22, 0x06	; 6
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 31c:	67 e0       	ldi	r22, 0x07	; 7
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
 324:	1c c0       	rjmp	.+56     	; 0x35e <APP_start+0x1e8>
				}
				else if (u8_gv_delay > 17 && u8_gv_delay <=18)			// Stop the car for 0.5 s
 326:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 32a:	82 31       	cpi	r24, 0x12	; 18
 32c:	a8 f0       	brcs	.+42     	; 0x358 <APP_start+0x1e2>
 32e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 332:	83 31       	cpi	r24, 0x13	; 19
 334:	88 f4       	brcc	.+34     	; 0x358 <APP_start+0x1e2>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 336:	65 e0       	ldi	r22, 0x05	; 5
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 33e:	66 e0       	ldi	r22, 0x06	; 6
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 34e:	67 e0       	ldi	r22, 0x07	; 7
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_on>
 356:	03 c0       	rjmp	.+6      	; 0x35e <APP_start+0x1e8>
					// Here We Will STOP motors
					
					
				}
				else{
					u8_gv_delay = 2;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			{
				u8_gs_v_progState = BTN_START;
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
 35e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 362:	88 23       	and	r24, r24
 364:	09 f4       	brne	.+2      	; 0x368 <APP_start+0x1f2>
 366:	2d cf       	rjmp	.-422    	; 0x1c2 <APP_start+0x4c>
 368:	08 cf       	rjmp	.-496    	; 0x17a <APP_start+0x4>

0000036a <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(u8_en_btnIdType en_a_BtnId)
{
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	1f 92       	push	r1
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8BtnValue);
 378:	08 2f       	mov	r16, r24
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	f8 01       	movw	r30, r16
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	e0 0f       	add	r30, r16
 388:	f1 1f       	adc	r31, r17
 38a:	eb 58       	subi	r30, 0x8B	; 139
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	61 81       	ldd	r22, Z+1	; 0x01
 390:	ae 01       	movw	r20, r28
 392:	4f 5f       	subi	r20, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	80 81       	ld	r24, Z
 398:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	61 f4       	brne	.+24     	; 0x3ba <vidPrePushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
 3a2:	f8 01       	movw	r30, r16
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	0e 0f       	add	r16, r30
 3ae:	1f 1f       	adc	r17, r31
 3b0:	f8 01       	movw	r30, r16
 3b2:	eb 58       	subi	r30, 0x8B	; 139
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	82 83       	std	Z+2, r24	; 0x02
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <vidPrePushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 3ba:	f8 01       	movw	r30, r16
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	0e 0f       	add	r16, r30
 3c6:	1f 1f       	adc	r17, r31
 3c8:	f8 01       	movw	r30, r16
 3ca:	eb 58       	subi	r30, 0x8B	; 139
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	12 82       	std	Z+2, r1	; 0x02
	}
}
 3d0:	0f 90       	pop	r0
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret

000003dc <vidPushState>:
static void vidPushState(u8_en_btnIdType en_a_BtnId)
{
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	1f 92       	push	r1
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 3ea:	08 2f       	mov	r16, r24
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	f8 01       	movw	r30, r16
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e0 0f       	add	r30, r16
 3fa:	f1 1f       	adc	r31, r17
 3fc:	eb 58       	subi	r30, 0x8B	; 139
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	61 81       	ldd	r22, Z+1	; 0x01
 402:	ae 01       	movw	r20, r28
 404:	4f 5f       	subi	r20, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	80 81       	ld	r24, Z
 40a:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	69 f4       	brne	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
 414:	f8 01       	movw	r30, r16
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	0e 0f       	add	r16, r30
 420:	1f 1f       	adc	r17, r31
 422:	f8 01       	movw	r30, r16
 424:	eb 58       	subi	r30, 0x8B	; 139
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	82 83       	std	Z+2, r24	; 0x02
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 42e:	f8 01       	movw	r30, r16
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	0e 0f       	add	r16, r30
 43a:	1f 1f       	adc	r17, r31
 43c:	f8 01       	movw	r30, r16
 43e:	eb 58       	subi	r30, 0x8B	; 139
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	82 83       	std	Z+2, r24	; 0x02
	}
}
 446:	0f 90       	pop	r0
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <vidPreHoldState>:
static void vidPreHoldState(u8_en_btnIdType en_a_BtnId)
{
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	1f 92       	push	r1
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 460:	08 2f       	mov	r16, r24
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	f8 01       	movw	r30, r16
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e0 0f       	add	r30, r16
 470:	f1 1f       	adc	r31, r17
 472:	eb 58       	subi	r30, 0x8B	; 139
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	61 81       	ldd	r22, Z+1	; 0x01
 478:	ae 01       	movw	r20, r28
 47a:	4f 5f       	subi	r20, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	80 81       	ld	r24, Z
 480:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	69 f4       	brne	.+26     	; 0x4a4 <vidPreHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
 48a:	f8 01       	movw	r30, r16
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	0e 0f       	add	r16, r30
 496:	1f 1f       	adc	r17, r31
 498:	f8 01       	movw	r30, r16
 49a:	eb 58       	subi	r30, 0x8B	; 139
 49c:	ff 4f       	sbci	r31, 0xFF	; 255
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	82 83       	std	Z+2, r24	; 0x02
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <vidPreHoldState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
 4a4:	f8 01       	movw	r30, r16
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	0e 0f       	add	r16, r30
 4b0:	1f 1f       	adc	r17, r31
 4b2:	f8 01       	movw	r30, r16
 4b4:	eb 58       	subi	r30, 0x8B	; 139
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	82 83       	std	Z+2, r24	; 0x02
	}
}
 4bc:	0f 90       	pop	r0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <vidHoldState>:
static void vidHoldState(u8_en_btnIdType en_a_BtnId)
{
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	1f 92       	push	r1
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 4d6:	08 2f       	mov	r16, r24
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	f8 01       	movw	r30, r16
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	e0 0f       	add	r30, r16
 4e6:	f1 1f       	adc	r31, r17
 4e8:	eb 58       	subi	r30, 0x8B	; 139
 4ea:	ff 4f       	sbci	r31, 0xFF	; 255
 4ec:	61 81       	ldd	r22, Z+1	; 0x01
 4ee:	ae 01       	movw	r20, r28
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	80 81       	ld	r24, Z
 4f6:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	69 f4       	brne	.+26     	; 0x51a <vidHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 500:	f8 01       	movw	r30, r16
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	0e 0f       	add	r16, r30
 50c:	1f 1f       	adc	r17, r31
 50e:	f8 01       	movw	r30, r16
 510:	eb 58       	subi	r30, 0x8B	; 139
 512:	ff 4f       	sbci	r31, 0xFF	; 255
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
 514:	13 82       	std	Z+3, r1	; 0x03
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	82 83       	std	Z+2, r24	; 0x02
	}
	else
	{
		// do nothing
	}
}
 51a:	0f 90       	pop	r0
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

00000526 <vidPreReleaseState>:
static void vidPreReleaseState(u8_en_btnIdType en_a_BtnId)
{
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	1f 92       	push	r1
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 534:	08 2f       	mov	r16, r24
 536:	10 e0       	ldi	r17, 0x00	; 0
 538:	f8 01       	movw	r30, r16
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e0 0f       	add	r30, r16
 544:	f1 1f       	adc	r31, r17
 546:	eb 58       	subi	r30, 0x8B	; 139
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	61 81       	ldd	r22, Z+1	; 0x01
 54c:	ae 01       	movw	r20, r28
 54e:	4f 5f       	subi	r20, 0xFF	; 255
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	80 81       	ld	r24, Z
 554:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	71 f4       	brne	.+28     	; 0x57a <vidPreReleaseState+0x54>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 55e:	f8 01       	movw	r30, r16
 560:	ee 0f       	add	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	0e 0f       	add	r16, r30
 56a:	1f 1f       	adc	r17, r31
 56c:	f8 01       	movw	r30, r16
 56e:	eb 58       	subi	r30, 0x8B	; 139
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	83 83       	std	Z+3, r24	; 0x03
 578:	0d c0       	rjmp	.+26     	; 0x594 <vidPreReleaseState+0x6e>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 57a:	f8 01       	movw	r30, r16
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	0e 0f       	add	r16, r30
 586:	1f 1f       	adc	r17, r31
 588:	f8 01       	movw	r30, r16
 58a:	eb 58       	subi	r30, 0x8B	; 139
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	85 e0       	ldi	r24, 0x05	; 5
 590:	82 83       	std	Z+2, r24	; 0x02
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);	
 592:	13 82       	std	Z+3, r1	; 0x03
	}
}
 594:	0f 90       	pop	r0
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <vidReleaseState>:
static void vidReleaseState(u8_en_btnIdType en_a_BtnId)
{
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 5ae:	08 2f       	mov	r16, r24
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	f8 01       	movw	r30, r16
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e0 0f       	add	r30, r16
 5be:	f1 1f       	adc	r31, r17
 5c0:	eb 58       	subi	r30, 0x8B	; 139
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	61 81       	ldd	r22, Z+1	; 0x01
 5c6:	ae 01       	movw	r20, r28
 5c8:	4f 5f       	subi	r20, 0xFF	; 255
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	80 81       	ld	r24, Z
 5ce:	0e 94 30 04 	call	0x860	; 0x860 <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	81 11       	cpse	r24, r1
 5d6:	0b c0       	rjmp	.+22     	; 0x5ee <vidReleaseState+0x4e>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 5d8:	f8 01       	movw	r30, r16
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	ee 0f       	add	r30, r30
 5e0:	ff 1f       	adc	r31, r31
 5e2:	0e 0f       	add	r16, r30
 5e4:	1f 1f       	adc	r17, r31
 5e6:	f8 01       	movw	r30, r16
 5e8:	eb 58       	subi	r30, 0x8B	; 139
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	12 82       	std	Z+2, r1	; 0x02
	}
	else
	{
		/* Do nothing */
	}
 5ee:	0f 90       	pop	r0
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(u8_en_btnIdType en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	2e 0f       	add	r18, r30
 60a:	3f 1f       	adc	r19, r31
 60c:	f9 01       	movw	r30, r18
 60e:	eb 58       	subi	r30, 0x8B	; 139
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	92 81       	ldd	r25, Z+2	; 0x02
 614:	92 30       	cpi	r25, 0x02	; 2
 616:	91 f0       	breq	.+36     	; 0x63c <vidUpdateBtnState+0x42>
 618:	28 f4       	brcc	.+10     	; 0x624 <vidUpdateBtnState+0x2a>
 61a:	99 23       	and	r25, r25
 61c:	49 f0       	breq	.+18     	; 0x630 <vidUpdateBtnState+0x36>
 61e:	91 30       	cpi	r25, 0x01	; 1
 620:	51 f0       	breq	.+20     	; 0x636 <vidUpdateBtnState+0x3c>
 622:	08 95       	ret
 624:	94 30       	cpi	r25, 0x04	; 4
 626:	81 f0       	breq	.+32     	; 0x648 <vidUpdateBtnState+0x4e>
 628:	60 f0       	brcs	.+24     	; 0x642 <vidUpdateBtnState+0x48>
 62a:	95 30       	cpi	r25, 0x05	; 5
 62c:	81 f0       	breq	.+32     	; 0x64e <vidUpdateBtnState+0x54>
 62e:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
 630:	0e 94 b5 01 	call	0x36a	; 0x36a <vidPrePushState>
		break;
 634:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
 636:	0e 94 ee 01 	call	0x3dc	; 0x3dc <vidPushState>
		break;
 63a:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
 63c:	0e 94 29 02 	call	0x452	; 0x452 <vidPreHoldState>
		break;
 640:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
 642:	0e 94 64 02 	call	0x4c8	; 0x4c8 <vidHoldState>
		break;
 646:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
 648:	0e 94 93 02 	call	0x526	; 0x526 <vidPreReleaseState>
		break;
 64c:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
 64e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vidReleaseState>
 652:	08 95       	ret

00000654 <BUTTON_mainTask>:
/******************************************************************************/
/*********************** Public Functions Implementation **********************/
/******************************************************************************/

void BUTTON_mainTask(void)
{
 654:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 656:	c0 e0       	ldi	r28, 0x00	; 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
 65a:	8c 2f       	mov	r24, r28
 65c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 660:	cf 5f       	subi	r28, 0xFF	; 255
 662:	c2 30       	cpi	r28, 0x02	; 2
 664:	d0 f3       	brcs	.-12     	; 0x65a <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
	}
}
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <BUTTON_init>:
u8_en_btnStateType BUTTON_init(uint8_t u8_a_port , uint8_t u8_a_pin, u8_en_btnIdType en_btnId)
{
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	18 2f       	mov	r17, r24
 672:	d6 2f       	mov	r29, r22
 674:	c4 2f       	mov	r28, r20
	uint8_t u8_RetVal;
	// Set button pin as input
	u8_RetVal = DIO_init(u8_a_port, u8_a_pin , STD_INPUT);
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <DIO_init>
	
	// Enable PULLUP
	u8_RetVal = DIO_writePIN(u8_a_port, u8_a_pin, STD_HIGH);
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	6d 2f       	mov	r22, r29
 680:	81 2f       	mov	r24, r17
 682:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_writePIN>
	
	st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
 686:	4c 2f       	mov	r20, r28
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	fa 01       	movw	r30, r20
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	ee 0f       	add	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	e4 0f       	add	r30, r20
 696:	f5 1f       	adc	r31, r21
 698:	eb 58       	subi	r30, 0x8B	; 139
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	12 82       	std	Z+2, r1	; 0x02
	st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
 69e:	13 82       	std	Z+3, r1	; 0x03
	st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
 6a0:	14 82       	std	Z+4, r1	; 0x04
	st_gs_strBtnInfo[en_btnId].port = u8_a_port;
 6a2:	10 83       	st	Z, r17
	st_gs_strBtnInfo[en_btnId].pin = u8_a_pin;
 6a4:	d1 83       	std	Z+1, r29	; 0x01
		
		st_gs_strBtnInfo[u8Index].u8_a_btnState     = BT_PRE_PUSH;
		st_gs_strBtnInfo[u8Index].u8_a_debounceThreshold  = ((uint8_t)0U);
		st_gs_strBtnInfo[u8Index].u8_a_holdThreshold      = ((uint8_t)0U);
	}*/
	if (u8_RetVal == DIO_E_OK)
 6a6:	81 11       	cpse	r24, r1
	{
		return BT_PRE_PUSH;
	}
	else
	{
		return BT_UNDEFINED;
 6a8:	86 e0       	ldi	r24, 0x06	; 6
	}
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	08 95       	ret

000006b2 <BUTTON_getState>:
u8_en_btnStateType BUTTON_getState(u8_en_btnIdType en_btnId)
{
	u8_en_btnStateType enuReturn;
	
	if(en_btnId < BUTTONS_NUM)
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	68 f4       	brcc	.+26     	; 0x6d0 <BUTTON_getState+0x1e>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	fc 01       	movw	r30, r24
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	8e 0f       	add	r24, r30
 6c4:	9f 1f       	adc	r25, r31
 6c6:	fc 01       	movw	r30, r24
 6c8:	eb 58       	subi	r30, 0x8B	; 139
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 6d0:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 6d2:	08 95       	ret

000006d4 <LED_init>:
};
*/

u8_en_ledErrorType LED_init(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_init(u8_a_port, u8_a_pin, STD_OUTPUT);
 6d4:	41 e0       	ldi	r20, 0x01	; 1
 6d6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <DIO_init>
}
 6da:	08 95       	ret

000006dc <LED_off>:



u8_en_ledErrorType LED_off(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_OFF);
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_writePIN>
}
 6e2:	08 95       	ret

000006e4 <LED_on>:
u8_en_ledErrorType LED_on(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_ON);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_writePIN>
 6ea:	08 95       	ret

000006ec <main>:
#include "APP/app.h"


int main(void)
{
	APP_start();
 6ec:	0e 94 bb 00 	call	0x176	; 0x176 <APP_start>
}
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	08 95       	ret

000006f6 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 6f6:	68 30       	cpi	r22, 0x08	; 8
 6f8:	a0 f5       	brcc	.+104    	; 0x762 <DIO_init+0x6c>
	{
		if (port == porta)
 6fa:	81 11       	cpse	r24, r1
 6fc:	0b c0       	rjmp	.+22     	; 0x714 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 6fe:	8a b3       	in	r24, 0x1a	; 26
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_init+0x12>
 704:	44 0f       	add	r20, r20
 706:	55 1f       	adc	r21, r21
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_init+0xe>
 70c:	48 2b       	or	r20, r24
 70e:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret
		}
		else if (port == portb)
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	59 f4       	brne	.+22     	; 0x72e <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 718:	87 b3       	in	r24, 0x17	; 23
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_init+0x2c>
 71e:	44 0f       	add	r20, r20
 720:	55 1f       	adc	r21, r21
 722:	6a 95       	dec	r22
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_init+0x28>
 726:	48 2b       	or	r20, r24
 728:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret
		}
		else if (port == portc)
 72e:	82 30       	cpi	r24, 0x02	; 2
 730:	59 f4       	brne	.+22     	; 0x748 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 732:	84 b3       	in	r24, 0x14	; 20
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_init+0x46>
 738:	44 0f       	add	r20, r20
 73a:	55 1f       	adc	r21, r21
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_init+0x42>
 740:	48 2b       	or	r20, r24
 742:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
		}
		else if (port == portd)
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	69 f4       	brne	.+26     	; 0x766 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 74c:	81 b3       	in	r24, 0x11	; 17
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_init+0x60>
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_init+0x5c>
 75a:	48 2b       	or	r20, r24
 75c:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 766:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 768:	08 95       	ret

0000076a <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 76a:	68 30       	cpi	r22, 0x08	; 8
 76c:	08 f0       	brcs	.+2      	; 0x770 <DIO_writePIN+0x6>
 76e:	74 c0       	rjmp	.+232    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	{
		if (port == porta)
 770:	81 11       	cpse	r24, r1
 772:	1b c0       	rjmp	.+54     	; 0x7aa <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 774:	41 30       	cpi	r20, 0x01	; 1
 776:	61 f4       	brne	.+24     	; 0x790 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 778:	2b b3       	in	r18, 0x1b	; 27
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_writePIN+0x1a>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_writePIN+0x16>
 788:	82 2b       	or	r24, r18
 78a:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 790:	2b b3       	in	r18, 0x1b	; 27
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_writePIN+0x32>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_writePIN+0x2e>
 7a0:	80 95       	com	r24
 7a2:	82 23       	and	r24, r18
 7a4:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
		}
		else if (port == portb)
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	d9 f4       	brne	.+54     	; 0x7e4 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 7ae:	41 30       	cpi	r20, 0x01	; 1
 7b0:	61 f4       	brne	.+24     	; 0x7ca <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 7b2:	28 b3       	in	r18, 0x18	; 24
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_writePIN+0x54>
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	6a 95       	dec	r22
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_writePIN+0x50>
 7c2:	82 2b       	or	r24, r18
 7c4:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 7ca:	28 b3       	in	r18, 0x18	; 24
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_writePIN+0x6c>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_writePIN+0x68>
 7da:	80 95       	com	r24
 7dc:	82 23       	and	r24, r18
 7de:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
		}
		else if (port == portc)
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	d9 f4       	brne	.+54     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		{
			if (state == STD_HIGH)
 7e8:	41 30       	cpi	r20, 0x01	; 1
 7ea:	61 f4       	brne	.+24     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			{
				WR_PORT_C |= (1U << pin);
 7ec:	25 b3       	in	r18, 0x15	; 21
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_writePIN+0x8e>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_writePIN+0x8a>
 7fc:	82 2b       	or	r24, r18
 7fe:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 804:	25 b3       	in	r18, 0x15	; 21
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	80 95       	com	r24
 816:	82 23       	and	r24, r18
 818:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
		}
		else if (port == portd)
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	e9 f4       	brne	.+58     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		{
			if (state == STD_HIGH)
 822:	41 30       	cpi	r20, 0x01	; 1
 824:	61 f4       	brne	.+24     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			{
				WR_PORT_D |= (1U << pin);
 826:	22 b3       	in	r18, 0x12	; 18
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	6a 95       	dec	r22
 834:	e2 f7       	brpl	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	82 2b       	or	r24, r18
 838:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 83e:	22 b3       	in	r18, 0x12	; 18
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	6a 95       	dec	r22
 84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	80 95       	com	r24
 850:	82 23       	and	r24, r18
 852:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 85c:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 85e:	08 95       	ret

00000860 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 860:	68 30       	cpi	r22, 0x08	; 8
 862:	08 f0       	brcs	.+2      	; 0x866 <DIO_readPIN+0x6>
 864:	64 c0       	rjmp	.+200    	; 0x92e <DIO_readPIN+0xce>
	{
		if (port == porta)
 866:	81 11       	cpse	r24, r1
 868:	17 c0       	rjmp	.+46     	; 0x898 <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 86a:	79 b3       	in	r23, 0x19	; 25
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	9c 01       	movw	r18, r24
 872:	06 2e       	mov	r0, r22
 874:	02 c0       	rjmp	.+4      	; 0x87a <DIO_readPIN+0x1a>
 876:	22 0f       	add	r18, r18
 878:	33 1f       	adc	r19, r19
 87a:	0a 94       	dec	r0
 87c:	e2 f7       	brpl	.-8      	; 0x876 <DIO_readPIN+0x16>
 87e:	87 2f       	mov	r24, r23
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	82 23       	and	r24, r18
 884:	93 23       	and	r25, r19
 886:	02 c0       	rjmp	.+4      	; 0x88c <DIO_readPIN+0x2c>
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	6a 95       	dec	r22
 88e:	e2 f7       	brpl	.-8      	; 0x888 <DIO_readPIN+0x28>
 890:	fa 01       	movw	r30, r20
 892:	80 83       	st	Z, r24
			return DIO_E_OK;
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
		}
		else if (port == portb)
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	b9 f4       	brne	.+46     	; 0x8ca <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 89c:	76 b3       	in	r23, 0x16	; 22
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	9c 01       	movw	r18, r24
 8a4:	06 2e       	mov	r0, r22
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <DIO_readPIN+0x4c>
 8a8:	22 0f       	add	r18, r18
 8aa:	33 1f       	adc	r19, r19
 8ac:	0a 94       	dec	r0
 8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <DIO_readPIN+0x48>
 8b0:	87 2f       	mov	r24, r23
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	82 23       	and	r24, r18
 8b6:	93 23       	and	r25, r19
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_readPIN+0x5e>
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	6a 95       	dec	r22
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_readPIN+0x5a>
 8c2:	fa 01       	movw	r30, r20
 8c4:	80 83       	st	Z, r24
			return DIO_E_OK;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret
		}
		else if (port == portc)
 8ca:	82 30       	cpi	r24, 0x02	; 2
 8cc:	b9 f4       	brne	.+46     	; 0x8fc <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 8ce:	73 b3       	in	r23, 0x13	; 19
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	9c 01       	movw	r18, r24
 8d6:	06 2e       	mov	r0, r22
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <DIO_readPIN+0x7e>
 8da:	22 0f       	add	r18, r18
 8dc:	33 1f       	adc	r19, r19
 8de:	0a 94       	dec	r0
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <DIO_readPIN+0x7a>
 8e2:	87 2f       	mov	r24, r23
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	82 23       	and	r24, r18
 8e8:	93 23       	and	r25, r19
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_readPIN+0x90>
 8ec:	96 95       	lsr	r25
 8ee:	87 95       	ror	r24
 8f0:	6a 95       	dec	r22
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_readPIN+0x8c>
 8f4:	fa 01       	movw	r30, r20
 8f6:	80 83       	st	Z, r24
			return DIO_E_OK;
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	08 95       	ret
		}
		else if (port == portd)
 8fc:	83 30       	cpi	r24, 0x03	; 3
 8fe:	c9 f4       	brne	.+50     	; 0x932 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 900:	70 b3       	in	r23, 0x10	; 16
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	9c 01       	movw	r18, r24
 908:	06 2e       	mov	r0, r22
 90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_readPIN+0xb0>
 90c:	22 0f       	add	r18, r18
 90e:	33 1f       	adc	r19, r19
 910:	0a 94       	dec	r0
 912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_readPIN+0xac>
 914:	87 2f       	mov	r24, r23
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	82 23       	and	r24, r18
 91a:	93 23       	and	r25, r19
 91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_readPIN+0xc2>
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	6a 95       	dec	r22
 924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_readPIN+0xbe>
 926:	fa 01       	movw	r30, r20
 928:	80 83       	st	Z, r24
			return DIO_E_OK;
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 932:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
