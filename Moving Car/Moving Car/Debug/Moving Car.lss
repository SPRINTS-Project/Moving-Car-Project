
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001750  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080008a  0080008a  0000180e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ffa  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fec  00000000  00000000  00004b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000239a  00000000  00000000  00005b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  00007edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010d9  00000000  00000000  000085dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002049  00000000  00000000  000096b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000b6fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_1>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	d4 06       	cpc	r13, r20
      56:	df 06       	cpc	r13, r31
      58:	ea 06       	cpc	r14, r26
      5a:	f8 07       	cpc	r31, r24
      5c:	f5 06       	cpc	r15, r21
      5e:	f8 07       	cpc	r31, r24
      60:	00 07       	cpc	r16, r16
      62:	0b 07       	cpc	r16, r27
      64:	16 07       	cpc	r17, r22
      66:	21 07       	cpc	r18, r17
      68:	37 07       	cpc	r19, r23
      6a:	42 07       	cpc	r20, r18
      6c:	4d 07       	cpc	r20, r29
      6e:	fa 07       	cpc	r31, r26
      70:	58 07       	cpc	r21, r24
      72:	fa 07       	cpc	r31, r26
      74:	63 07       	cpc	r22, r19
      76:	6e 07       	cpc	r22, r30
      78:	79 07       	cpc	r23, r25
      7a:	84 07       	cpc	r24, r20
      7c:	9a 07       	cpc	r25, r26
      7e:	a5 07       	cpc	r26, r21
      80:	b0 07       	cpc	r27, r16
      82:	bb 07       	cpc	r27, r27
      84:	c6 07       	cpc	r28, r22
      86:	d1 07       	cpc	r29, r17
      88:	dc 07       	cpc	r29, r28
      8a:	e7 07       	cpc	r30, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 38       	cpi	r26, 0x8A	; 138
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	aa e8       	ldi	r26, 0x8A	; 138
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a6 3a       	cpi	r26, 0xA6	; 166
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 28 05 	call	0xa50	; 0xa50 <main>
      c2:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <APP_extInt0OvfHandeler>:
}

void APP_extInt0OvfHandeler(void)
{
	// Set Delay counter and PWM Counter to zero
	u8_gv_delay = 0;
      ca:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <u8_gv_delay>
	u8_gv_pwm = 0 ;
      ce:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	
	// Change program state to stop 
	u8_gs_v_progState = BTN_STOP;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      d8:	08 95       	ret

000000da <APP_timer0OvfHandeler>:


void APP_timer0OvfHandeler(void)
{
	// Increment PWM counter
	u8_gv_pwm++;
      da:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
      de:	8f 5f       	subi	r24, 0xFF	; 255
      e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
	
	// Set timer 0 with the Initial value to generate interrupt every 2 ms
	TIMER_MANGER_setValue(Timer0,st_gc_timer0.timer_InitialValue);		// 2 ms with prescaler 1024 and F_CPU = 8M
      e4:	60 ef       	ldi	r22, 0xF0	; 240
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER_MANGER_setValue>
      ee:	08 95       	ret

000000f0 <APP_timer1OvfHandeler>:
}

void APP_timer1OvfHandeler(void)
{
	// Increment Delay counter
	u8_gv_delay++;
      f0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
      f4:	8f 5f       	subi	r24, 0xFF	; 255
      f6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_gv_delay>
	
	// Set timer 1 value to generate interrupt every 500 ms
	TIMER_MANGER_setValue(Timer1,st_gc_timer1.timer_InitialValue);	// 500 ms with prescaler 1024 and F_CPU = 8M
      fa:	6c eb       	ldi	r22, 0xBC	; 188
      fc:	70 ef       	ldi	r23, 0xF0	; 240
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER_MANGER_setValue>
     104:	08 95       	ret

00000106 <APP_init>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/

void APP_init(void)
{
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	00 d0       	rcall	.+0      	; 0x10e <APP_init+0x8>
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
	// Initialize all LEDs
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
     112:	10 e0       	ldi	r17, 0x00	; 0
     114:	0b c0       	rjmp	.+22     	; 0x12c <APP_init+0x26>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
     116:	e1 2f       	mov	r30, r17
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	ee 0f       	add	r30, r30
     11c:	ff 1f       	adc	r31, r31
     11e:	ef 57       	subi	r30, 0x7F	; 127
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	61 81       	ldd	r22, Z+1	; 0x01
     124:	80 81       	ld	r24, Z
     126:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LED_init>
/******************************************************************************/

void APP_init(void)
{
	// Initialize all LEDs
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
     12a:	1f 5f       	subi	r17, 0xFF	; 255
     12c:	14 30       	cpi	r17, 0x04	; 4
     12e:	98 f3       	brcs	.-26     	; 0x116 <APP_init+0x10>
     130:	10 e0       	ldi	r17, 0x00	; 0
     132:	11 c0       	rjmp	.+34     	; 0x156 <APP_init+0x50>
	}
	
	// Initialize all buttons
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(st_gc_btn_config[u8_index].u8_a_port,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
     134:	e1 2f       	mov	r30, r17
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	cf 01       	movw	r24, r30
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	e8 0f       	add	r30, r24
     144:	f9 1f       	adc	r31, r25
     146:	e9 58       	subi	r30, 0x89	; 137
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	42 81       	ldd	r20, Z+2	; 0x02
     14c:	61 81       	ldd	r22, Z+1	; 0x01
     14e:	80 81       	ld	r24, Z
     150:	0e 94 a1 03 	call	0x742	; 0x742 <BUTTON_init>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
	}
	
	// Initialize all buttons
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
     154:	1f 5f       	subi	r17, 0xFF	; 255
     156:	12 30       	cpi	r17, 0x02	; 2
     158:	68 f3       	brcs	.-38     	; 0x134 <APP_init+0x2e>
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	16 c0       	rjmp	.+44     	; 0x18a <APP_init+0x84>
	}
	
	// Initialize car module
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index+=2)
	{
		CAR_INIT(&st_gc_motorConfig[u8_index],&st_gc_motorConfig[u8_index+1]);
     15e:	81 2f       	mov	r24, r17
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	9c 01       	movw	r18, r24
     164:	2f 5f       	subi	r18, 0xFF	; 255
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	b9 01       	movw	r22, r18
     16a:	66 0f       	add	r22, r22
     16c:	77 1f       	adc	r23, r23
     16e:	62 0f       	add	r22, r18
     170:	73 1f       	adc	r23, r19
     172:	6f 58       	subi	r22, 0x8F	; 143
     174:	7f 4f       	sbci	r23, 0xFF	; 255
     176:	9c 01       	movw	r18, r24
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	82 0f       	add	r24, r18
     17e:	93 1f       	adc	r25, r19
     180:	8f 58       	subi	r24, 0x8F	; 143
     182:	9f 4f       	sbci	r25, 0xFF	; 255
     184:	0e 94 d6 03 	call	0x7ac	; 0x7ac <CAR_INIT>
	{
		BUTTON_init(st_gc_btn_config[u8_index].u8_a_port,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
	}
	
	// Initialize car module
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index+=2)
     188:	1e 5f       	subi	r17, 0xFE	; 254
     18a:	12 30       	cpi	r17, 0x02	; 2
     18c:	40 f3       	brcs	.-48     	; 0x15e <APP_init+0x58>
	{
		CAR_INIT(&st_gc_motorConfig[u8_index],&st_gc_motorConfig[u8_index+1]);
	}
	
	// Initialize Timer 1
	TIMER_MANGER_init(&st_gc_timer1);
     18e:	89 e6       	ldi	r24, 0x69	; 105
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TIMER_MANGER_init>
	
	
	// Initialize Timer 0
	TIMER_MANGER_init(&st_gc_timer0);
     196:	81 e6       	ldi	r24, 0x61	; 97
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TIMER_MANGER_init>
	
	// Initialize External Interrupt module
	ext_interrupt_config_t st_l_int0Config ;
	st_l_int0Config.ext_interrupt_no = EXT_0;
     19e:	19 82       	std	Y+1, r1	; 0x01
	st_l_int0Config.edge_select = FALLING_EDGE;
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	8a 83       	std	Y+2, r24	; 0x02
	ext_init(&st_l_int0Config,APP_extInt0OvfHandeler);
     1a4:	65 e6       	ldi	r22, 0x65	; 101
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	ce 01       	movw	r24, r28
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ext_init>
	
	// Enable golbal interrupts
	sei();
     1b0:	78 94       	sei
}
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	08 95       	ret

000001be <APP_longSide>:


void APP_longSide(void)
{
	// Turn all LEDs off and turn long side LED on
	LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     1be:	65 e0       	ldi	r22, 0x05	; 5
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_on(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     1c6:	66 e0       	ldi	r22, 0x06	; 6
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 86 04 	call	0x90c	; 0x90c <LED_on>
	LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     1d6:	67 e0       	ldi	r22, 0x07	; 7
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	
	
	// car move forward with 50% speed
	
	u8_gv_pwm = 0;
     1de:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	TIMER_MANGER_start(F_CPU_1024,Timer0);							// start timer 0
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	87 e0       	ldi	r24, 0x07	; 7
     1e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <TIMER_MANGER_start>
	while (u8_gv_pwm <= 5)						// 10 ms ON
     1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <APP_longSide+0x3a>
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     1ec:	64 e7       	ldi	r22, 0x74	; 116
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	81 e7       	ldi	r24, 0x71	; 113
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <CAR_FORWARD>
	
	// car move forward with 50% speed
	
	u8_gv_pwm = 0;
	TIMER_MANGER_start(F_CPU_1024,Timer0);							// start timer 0
	while (u8_gv_pwm <= 5)						// 10 ms ON
     1f8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     1fc:	86 30       	cpi	r24, 0x06	; 6
     1fe:	b0 f3       	brcs	.-20     	; 0x1ec <APP_longSide+0x2e>
     200:	06 c0       	rjmp	.+12     	; 0x20e <APP_longSide+0x50>
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)	// 10 ms OFF
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     202:	64 e7       	ldi	r22, 0x74	; 116
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	81 e7       	ldi	r24, 0x71	; 113
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 3f 04 	call	0x87e	; 0x87e <CAR_STOP>
	TIMER_MANGER_start(F_CPU_1024,Timer0);							// start timer 0
	while (u8_gv_pwm <= 5)						// 10 ms ON
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)	// 10 ms OFF
     20e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     212:	86 30       	cpi	r24, 0x06	; 6
     214:	20 f0       	brcs	.+8      	; 0x21e <APP_longSide+0x60>
     216:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     21a:	8b 30       	cpi	r24, 0x0B	; 11
     21c:	90 f3       	brcs	.-28     	; 0x202 <APP_longSide+0x44>
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	TIMER_MANGER_stop(Timer0);										// stop timer 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 1a 05 	call	0xa34	; 0xa34 <TIMER_MANGER_stop>
	u8_gv_pwm = 0;
     224:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
     228:	08 95       	ret

0000022a <APP_shortSide>:


void APP_shortSide(void)
{
	// Turn all LEDs off and turn short side LED on
	LED_on(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     22a:	65 e0       	ldi	r22, 0x05	; 5
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 86 04 	call	0x90c	; 0x90c <LED_on>
	LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     232:	66 e0       	ldi	r22, 0x06	; 6
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     242:	67 e0       	ldi	r22, 0x07	; 7
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	
	
	// move forward with 30% speed
	
	u8_gv_pwm = 0;
     24a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	87 e0       	ldi	r24, 0x07	; 7
     252:	0e 94 0f 05 	call	0xa1e	; 0xa1e <TIMER_MANGER_start>
	while (u8_gv_pwm <= 3)							// 6 ms ON
     256:	06 c0       	rjmp	.+12     	; 0x264 <APP_shortSide+0x3a>
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     258:	64 e7       	ldi	r22, 0x74	; 116
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	81 e7       	ldi	r24, 0x71	; 113
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <CAR_FORWARD>
	
	// move forward with 30% speed
	
	u8_gv_pwm = 0;
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
	while (u8_gv_pwm <= 3)							// 6 ms ON
     264:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     268:	84 30       	cpi	r24, 0x04	; 4
     26a:	b0 f3       	brcs	.-20     	; 0x258 <APP_shortSide+0x2e>
     26c:	06 c0       	rjmp	.+12     	; 0x27a <APP_shortSide+0x50>
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 3 && u8_gv_pwm <= 10)		// 14 ms OFF
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     26e:	64 e7       	ldi	r22, 0x74	; 116
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	81 e7       	ldi	r24, 0x71	; 113
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 3f 04 	call	0x87e	; 0x87e <CAR_STOP>
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
	while (u8_gv_pwm <= 3)							// 6 ms ON
	{
		CAR_FORWARD(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 3 && u8_gv_pwm <= 10)		// 14 ms OFF
     27a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	20 f0       	brcs	.+8      	; 0x28a <APP_shortSide+0x60>
     282:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     286:	8b 30       	cpi	r24, 0x0B	; 11
     288:	90 f3       	brcs	.-28     	; 0x26e <APP_shortSide+0x44>
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	TIMER_MANGER_stop(Timer0);										// stop timer 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 1a 05 	call	0xa34	; 0xa34 <TIMER_MANGER_stop>
	u8_gv_pwm = 0;
     290:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
     294:	08 95       	ret

00000296 <APP_stop>:


void APP_stop(void)
{
	// Turn all LEDs off and turn stop LED on
	LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     296:	65 e0       	ldi	r22, 0x05	; 5
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     29e:	66 e0       	ldi	r22, 0x06	; 6
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     2ae:	67 e0       	ldi	r22, 0x07	; 7
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 86 04 	call	0x90c	; 0x90c <LED_on>
	
	
	// Here We Will STOP motors
	CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     2b6:	64 e7       	ldi	r22, 0x74	; 116
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	81 e7       	ldi	r24, 0x71	; 113
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 3f 04 	call	0x87e	; 0x87e <CAR_STOP>
     2c2:	08 95       	ret

000002c4 <App_rotate>:


void App_rotate(void)
{
	// Turn all LEDs off and turn rotate LED on
	LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
     2c4:	65 e0       	ldi	r22, 0x05	; 5
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
     2cc:	66 e0       	ldi	r22, 0x06	; 6
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 86 04 	call	0x90c	; 0x90c <LED_on>
	LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
     2dc:	67 e0       	ldi	r22, 0x07	; 7
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 82 04 	call	0x904	; 0x904 <LED_off>
	
	
	
	// rotate to right with 50% speed for 0.5 s to achieve 90 degree rotate to side
	u8_gv_pwm = 0;
     2e4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e0       	ldi	r24, 0x07	; 7
     2ec:	0e 94 0f 05 	call	0xa1e	; 0xa1e <TIMER_MANGER_start>
	while (u8_gv_pwm <= 5)							// 10 ms ON
     2f0:	06 c0       	rjmp	.+12     	; 0x2fe <App_rotate+0x3a>
	{
		CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     2f2:	64 e7       	ldi	r22, 0x74	; 116
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	81 e7       	ldi	r24, 0x71	; 113
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 1c 04 	call	0x838	; 0x838 <CAR_REVERSE_RIGHT>
	
	
	// rotate to right with 50% speed for 0.5 s to achieve 90 degree rotate to side
	u8_gv_pwm = 0;
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
	while (u8_gv_pwm <= 5)							// 10 ms ON
     2fe:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     302:	86 30       	cpi	r24, 0x06	; 6
     304:	b0 f3       	brcs	.-20     	; 0x2f2 <App_rotate+0x2e>
     306:	06 c0       	rjmp	.+12     	; 0x314 <App_rotate+0x50>
	{
		CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)		// 10 ms OFF
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
     308:	64 e7       	ldi	r22, 0x74	; 116
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	81 e7       	ldi	r24, 0x71	; 113
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 3f 04 	call	0x87e	; 0x87e <CAR_STOP>
	TIMER_MANGER_start(F_CPU_1024,Timer0);									// start timer 0
	while (u8_gv_pwm <= 5)							// 10 ms ON
	{
		CAR_REVERSE_RIGHT(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	while (u8_gv_pwm > 5 && u8_gv_pwm <= 10)		// 10 ms OFF
     314:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     318:	86 30       	cpi	r24, 0x06	; 6
     31a:	20 f0       	brcs	.+8      	; 0x324 <App_rotate+0x60>
     31c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     320:	8b 30       	cpi	r24, 0x0B	; 11
     322:	90 f3       	brcs	.-28     	; 0x308 <App_rotate+0x44>
	{
		CAR_STOP(&st_gc_motorConfig[0],&st_gc_motorConfig[1]);
	}
	TIMER_MANGER_stop(Timer0);										// stop timer 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 1a 05 	call	0xa34	; 0xa34 <TIMER_MANGER_stop>
	u8_gv_pwm = 0;
     32a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
     32e:	08 95       	ret

00000330 <APP_startState>:



void APP_startState(void)
{
	ext_enable(EXT_0);											// Enable External interrupt 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 76 04 	call	0x8ec	; 0x8ec <ext_enable>
	TIMER_MANGER_start(F_CPU_1024,Timer1);						// start timer 1
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	87 e0       	ldi	r24, 0x07	; 7
     33a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <TIMER_MANGER_start>
	if (u8_gv_delay>= 2)										// 1s delay
     33e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	08 f4       	brcc	.+2      	; 0x348 <APP_startState+0x18>
     346:	57 c0       	rjmp	.+174    	; 0x3f6 <APP_startState+0xc6>
	{
		if (u8_gv_delay <= 8 )									// longest side for 3s with speed 50%
     348:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     34c:	89 30       	cpi	r24, 0x09	; 9
     34e:	18 f4       	brcc	.+6      	; 0x356 <APP_startState+0x26>
		{
			APP_longSide();
     350:	0e 94 df 00 	call	0x1be	; 0x1be <APP_longSide>
     354:	08 95       	ret
		}
		else if (u8_gv_delay>8 && u8_gv_delay <=9)				// stop for 0.5
     356:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     35a:	89 30       	cpi	r24, 0x09	; 9
     35c:	38 f0       	brcs	.+14     	; 0x36c <APP_startState+0x3c>
     35e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     362:	8a 30       	cpi	r24, 0x0A	; 10
     364:	18 f4       	brcc	.+6      	; 0x36c <APP_startState+0x3c>
		{
			APP_stop();
     366:	0e 94 4b 01 	call	0x296	; 0x296 <APP_stop>
     36a:	08 95       	ret
			
		}
		else if (u8_gv_delay >9 && u8_gv_delay <=10)			// rotate 90 degree to right
     36c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     370:	8a 30       	cpi	r24, 0x0A	; 10
     372:	38 f0       	brcs	.+14     	; 0x382 <APP_startState+0x52>
     374:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     378:	8b 30       	cpi	r24, 0x0B	; 11
     37a:	18 f4       	brcc	.+6      	; 0x382 <APP_startState+0x52>
		{
			App_rotate();
     37c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <App_rotate>
     380:	08 95       	ret
		}
		else if (u8_gv_delay > 10 && u8_gv_delay <=11)			// Stop the car for 0.5 s
     382:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     386:	8b 30       	cpi	r24, 0x0B	; 11
     388:	38 f0       	brcs	.+14     	; 0x398 <APP_startState+0x68>
     38a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     38e:	8c 30       	cpi	r24, 0x0C	; 12
     390:	18 f4       	brcc	.+6      	; 0x398 <APP_startState+0x68>
		{
			APP_stop();
     392:	0e 94 4b 01 	call	0x296	; 0x296 <APP_stop>
     396:	08 95       	ret
		}
		else if (u8_gv_delay > 11 && u8_gv_delay <= 15)				// short size for 2 s with speed 30%
     398:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     39c:	8c 30       	cpi	r24, 0x0C	; 12
     39e:	38 f0       	brcs	.+14     	; 0x3ae <APP_startState+0x7e>
     3a0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3a4:	80 31       	cpi	r24, 0x10	; 16
     3a6:	18 f4       	brcc	.+6      	; 0x3ae <APP_startState+0x7e>
		{
			APP_shortSide();
     3a8:	0e 94 15 01 	call	0x22a	; 0x22a <APP_shortSide>
     3ac:	08 95       	ret
		}
		else if (u8_gv_delay>15 && u8_gv_delay <=16)				// stop for 0.5 s
     3ae:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3b2:	80 31       	cpi	r24, 0x10	; 16
     3b4:	38 f0       	brcs	.+14     	; 0x3c4 <APP_startState+0x94>
     3b6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3ba:	81 31       	cpi	r24, 0x11	; 17
     3bc:	18 f4       	brcc	.+6      	; 0x3c4 <APP_startState+0x94>
		{
			APP_stop();
     3be:	0e 94 4b 01 	call	0x296	; 0x296 <APP_stop>
     3c2:	08 95       	ret
			
			
		}
		else if (u8_gv_delay >16 && u8_gv_delay <=17)			// rotate 90 degree to right
     3c4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3c8:	81 31       	cpi	r24, 0x11	; 17
     3ca:	38 f0       	brcs	.+14     	; 0x3da <APP_startState+0xaa>
     3cc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3d0:	82 31       	cpi	r24, 0x12	; 18
     3d2:	18 f4       	brcc	.+6      	; 0x3da <APP_startState+0xaa>
		{
			App_rotate();
     3d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <App_rotate>
     3d8:	08 95       	ret
		}
		else if (u8_gv_delay > 17 && u8_gv_delay <=18)			// Stop the car for 0.5 s
     3da:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3de:	82 31       	cpi	r24, 0x12	; 18
     3e0:	38 f0       	brcs	.+14     	; 0x3f0 <APP_startState+0xc0>
     3e2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_gv_delay>
     3e6:	83 31       	cpi	r24, 0x13	; 19
     3e8:	18 f4       	brcc	.+6      	; 0x3f0 <APP_startState+0xc0>
		{
			APP_stop();
     3ea:	0e 94 4b 01 	call	0x296	; 0x296 <APP_stop>
     3ee:	08 95       	ret
			
		}
		else{
			u8_gv_delay = 2;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_gv_delay>
     3f6:	08 95       	ret

000003f8 <APP_stopState>:
void APP_stopState(void)
{
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	
	ext_disable(EXT_0);						// Disable External interrupt 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <ext_disable>
	
	TIMER_MANGER_stop(Timer1);				// stop timer 1
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 1a 05 	call	0xa34	; 0xa34 <TIMER_MANGER_stop>
	
	BUTTON_mainTask();						// Update all buttons states
     404:	0e 94 96 03 	call	0x72c	; 0x72c <BUTTON_mainTask>
	
	
	APP_stop();							
     408:	0e 94 4b 01 	call	0x296	; 0x296 <APP_stop>
	
	
	// Read Start Button state
	btnState = BUTTON_getState(st_gc_btn_config[0].u8_a_ID);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 c5 03 	call	0x78a	; 0x78a <BUTTON_getState>
	
	if (btnState == BT_RELEASED)
     412:	85 30       	cpi	r24, 0x05	; 5
     414:	11 f4       	brne	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		u8_gs_v_progState = BTN_START;
     416:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	u8_gv_delay = 0;
     41a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <u8_gv_delay>
     41e:	08 95       	ret

00000420 <APP_start>:
/******************************************************************************/

void APP_start(void)
{
	// Initialize all modules used in the app
	APP_init();
     420:	0e 94 83 00 	call	0x106	; 0x106 <APP_init>
     424:	02 c0       	rjmp	.+4      	; 0x42a <APP_start+0xa>
	while(1)
	{
		while (u8_gs_v_progState == BTN_STOP)
		{
			// Perform stop state routine 
			APP_stopState();
     426:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <APP_stopState>
	// Initialize all modules used in the app
	APP_init();
	
	while(1)
	{
		while (u8_gs_v_progState == BTN_STOP)
     42a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	19 f4       	brne	.+6      	; 0x438 <APP_start+0x18>
     432:	f9 cf       	rjmp	.-14     	; 0x426 <APP_start+0x6>
			APP_stopState();
		}
		while (u8_gs_v_progState == BTN_START)
		{
			// Perform start state routine
			APP_startState();
     434:	0e 94 98 01 	call	0x330	; 0x330 <APP_startState>
		while (u8_gs_v_progState == BTN_STOP)
		{
			// Perform stop state routine 
			APP_stopState();
		}
		while (u8_gs_v_progState == BTN_START)
     438:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     43c:	88 23       	and	r24, r24
     43e:	d1 f3       	breq	.-12     	; 0x434 <APP_start+0x14>
     440:	f4 cf       	rjmp	.-24     	; 0x42a <APP_start+0xa>

00000442 <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(u8_en_btnIdType en_a_BtnId)
{
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8BtnValue);
     450:	08 2f       	mov	r16, r24
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	f8 01       	movw	r30, r16
     456:	ee 0f       	add	r30, r30
     458:	ff 1f       	adc	r31, r31
     45a:	ee 0f       	add	r30, r30
     45c:	ff 1f       	adc	r31, r31
     45e:	e0 0f       	add	r30, r16
     460:	f1 1f       	adc	r31, r17
     462:	e4 57       	subi	r30, 0x74	; 116
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	61 81       	ldd	r22, Z+1	; 0x01
     468:	ae 01       	movw	r20, r28
     46a:	4f 5f       	subi	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	80 81       	ld	r24, Z
     470:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	61 f4       	brne	.+24     	; 0x492 <vidPrePushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
     47a:	f8 01       	movw	r30, r16
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	0e 0f       	add	r16, r30
     486:	1f 1f       	adc	r17, r31
     488:	f8 01       	movw	r30, r16
     48a:	e4 57       	subi	r30, 0x74	; 116
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	82 83       	std	Z+2, r24	; 0x02
     490:	0b c0       	rjmp	.+22     	; 0x4a8 <vidPrePushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     492:	f8 01       	movw	r30, r16
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	0e 0f       	add	r16, r30
     49e:	1f 1f       	adc	r17, r31
     4a0:	f8 01       	movw	r30, r16
     4a2:	e4 57       	subi	r30, 0x74	; 116
     4a4:	ff 4f       	sbci	r31, 0xFF	; 255
     4a6:	12 82       	std	Z+2, r1	; 0x02
	}
}
     4a8:	0f 90       	pop	r0
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <vidPushState>:
static void vidPushState(u8_en_btnIdType en_a_BtnId)
{
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     4c2:	08 2f       	mov	r16, r24
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	f8 01       	movw	r30, r16
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	e0 0f       	add	r30, r16
     4d2:	f1 1f       	adc	r31, r17
     4d4:	e4 57       	subi	r30, 0x74	; 116
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	61 81       	ldd	r22, Z+1	; 0x01
     4da:	ae 01       	movw	r20, r28
     4dc:	4f 5f       	subi	r20, 0xFF	; 255
     4de:	5f 4f       	sbci	r21, 0xFF	; 255
     4e0:	80 81       	ld	r24, Z
     4e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	69 f4       	brne	.+26     	; 0x506 <vidPushState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
     4ec:	f8 01       	movw	r30, r16
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	0e 0f       	add	r16, r30
     4f8:	1f 1f       	adc	r17, r31
     4fa:	f8 01       	movw	r30, r16
     4fc:	e4 57       	subi	r30, 0x74	; 116
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	82 83       	std	Z+2, r24	; 0x02
     504:	0c c0       	rjmp	.+24     	; 0x51e <vidPushState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     506:	f8 01       	movw	r30, r16
     508:	ee 0f       	add	r30, r30
     50a:	ff 1f       	adc	r31, r31
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	0e 0f       	add	r16, r30
     512:	1f 1f       	adc	r17, r31
     514:	f8 01       	movw	r30, r16
     516:	e4 57       	subi	r30, 0x74	; 116
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	82 83       	std	Z+2, r24	; 0x02
	}
}
     51e:	0f 90       	pop	r0
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	08 95       	ret

0000052a <vidPreHoldState>:
static void vidPreHoldState(u8_en_btnIdType en_a_BtnId)
{
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	1f 92       	push	r1
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     538:	08 2f       	mov	r16, r24
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	f8 01       	movw	r30, r16
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	e0 0f       	add	r30, r16
     548:	f1 1f       	adc	r31, r17
     54a:	e4 57       	subi	r30, 0x74	; 116
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	61 81       	ldd	r22, Z+1	; 0x01
     550:	ae 01       	movw	r20, r28
     552:	4f 5f       	subi	r20, 0xFF	; 255
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	80 81       	ld	r24, Z
     558:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	69 f4       	brne	.+26     	; 0x57c <vidPreHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
     562:	f8 01       	movw	r30, r16
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	0e 0f       	add	r16, r30
     56e:	1f 1f       	adc	r17, r31
     570:	f8 01       	movw	r30, r16
     572:	e4 57       	subi	r30, 0x74	; 116
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	82 83       	std	Z+2, r24	; 0x02
     57a:	0c c0       	rjmp	.+24     	; 0x594 <vidPreHoldState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
     57c:	f8 01       	movw	r30, r16
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	0e 0f       	add	r16, r30
     588:	1f 1f       	adc	r17, r31
     58a:	f8 01       	movw	r30, r16
     58c:	e4 57       	subi	r30, 0x74	; 116
     58e:	ff 4f       	sbci	r31, 0xFF	; 255
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	82 83       	std	Z+2, r24	; 0x02
	}
}
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <vidHoldState>:
static void vidHoldState(u8_en_btnIdType en_a_BtnId)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     5ae:	08 2f       	mov	r16, r24
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	f8 01       	movw	r30, r16
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e0 0f       	add	r30, r16
     5be:	f1 1f       	adc	r31, r17
     5c0:	e4 57       	subi	r30, 0x74	; 116
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	61 81       	ldd	r22, Z+1	; 0x01
     5c6:	ae 01       	movw	r20, r28
     5c8:	4f 5f       	subi	r20, 0xFF	; 255
     5ca:	5f 4f       	sbci	r21, 0xFF	; 255
     5cc:	80 81       	ld	r24, Z
     5ce:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	69 f4       	brne	.+26     	; 0x5f2 <vidHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     5d8:	f8 01       	movw	r30, r16
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	0e 0f       	add	r16, r30
     5e4:	1f 1f       	adc	r17, r31
     5e6:	f8 01       	movw	r30, r16
     5e8:	e4 57       	subi	r30, 0x74	; 116
     5ea:	ff 4f       	sbci	r31, 0xFF	; 255
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
     5ec:	13 82       	std	Z+3, r1	; 0x03
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	82 83       	std	Z+2, r24	; 0x02
	}
	else
	{
		// do nothing
	}
}
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	08 95       	ret

000005fe <vidPreReleaseState>:
static void vidPreReleaseState(u8_en_btnIdType en_a_BtnId)
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     60c:	08 2f       	mov	r16, r24
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	f8 01       	movw	r30, r16
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e0 0f       	add	r30, r16
     61c:	f1 1f       	adc	r31, r17
     61e:	e4 57       	subi	r30, 0x74	; 116
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	61 81       	ldd	r22, Z+1	; 0x01
     624:	ae 01       	movw	r20, r28
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	80 81       	ld	r24, Z
     62c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	71 f4       	brne	.+28     	; 0x652 <vidPreReleaseState+0x54>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     636:	f8 01       	movw	r30, r16
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	0e 0f       	add	r16, r30
     642:	1f 1f       	adc	r17, r31
     644:	f8 01       	movw	r30, r16
     646:	e4 57       	subi	r30, 0x74	; 116
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	83 81       	ldd	r24, Z+3	; 0x03
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	83 83       	std	Z+3, r24	; 0x03
     650:	0d c0       	rjmp	.+26     	; 0x66c <vidPreReleaseState+0x6e>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     652:	f8 01       	movw	r30, r16
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	0e 0f       	add	r16, r30
     65e:	1f 1f       	adc	r17, r31
     660:	f8 01       	movw	r30, r16
     662:	e4 57       	subi	r30, 0x74	; 116
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	82 83       	std	Z+2, r24	; 0x02
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);	
     66a:	13 82       	std	Z+3, r1	; 0x03
	}
}
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	08 95       	ret

00000678 <vidReleaseState>:
static void vidReleaseState(u8_en_btnIdType en_a_BtnId)
{
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	1f 92       	push	r1
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
     686:	08 2f       	mov	r16, r24
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	f8 01       	movw	r30, r16
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e0 0f       	add	r30, r16
     696:	f1 1f       	adc	r31, r17
     698:	e4 57       	subi	r30, 0x74	; 116
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	61 81       	ldd	r22, Z+1	; 0x01
     69e:	ae 01       	movw	r20, r28
     6a0:	4f 5f       	subi	r20, 0xFF	; 255
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
     6a4:	80 81       	ld	r24, Z
     6a6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	81 11       	cpse	r24, r1
     6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <vidReleaseState+0x4e>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     6b0:	f8 01       	movw	r30, r16
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	0e 0f       	add	r16, r30
     6bc:	1f 1f       	adc	r17, r31
     6be:	f8 01       	movw	r30, r16
     6c0:	e4 57       	subi	r30, 0x74	; 116
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	12 82       	std	Z+2, r1	; 0x02
	}
	else
	{
		/* Do nothing */
	}
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(u8_en_btnIdType en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	2e 0f       	add	r18, r30
     6e2:	3f 1f       	adc	r19, r31
     6e4:	f9 01       	movw	r30, r18
     6e6:	e4 57       	subi	r30, 0x74	; 116
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	92 81       	ldd	r25, Z+2	; 0x02
     6ec:	92 30       	cpi	r25, 0x02	; 2
     6ee:	91 f0       	breq	.+36     	; 0x714 <vidUpdateBtnState+0x42>
     6f0:	28 f4       	brcc	.+10     	; 0x6fc <vidUpdateBtnState+0x2a>
     6f2:	99 23       	and	r25, r25
     6f4:	49 f0       	breq	.+18     	; 0x708 <vidUpdateBtnState+0x36>
     6f6:	91 30       	cpi	r25, 0x01	; 1
     6f8:	51 f0       	breq	.+20     	; 0x70e <vidUpdateBtnState+0x3c>
     6fa:	08 95       	ret
     6fc:	94 30       	cpi	r25, 0x04	; 4
     6fe:	81 f0       	breq	.+32     	; 0x720 <vidUpdateBtnState+0x4e>
     700:	60 f0       	brcs	.+24     	; 0x71a <vidUpdateBtnState+0x48>
     702:	95 30       	cpi	r25, 0x05	; 5
     704:	81 f0       	breq	.+32     	; 0x726 <vidUpdateBtnState+0x54>
     706:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
     708:	0e 94 21 02 	call	0x442	; 0x442 <vidPrePushState>
		break;
     70c:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
     70e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <vidPushState>
		break;
     712:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
     714:	0e 94 95 02 	call	0x52a	; 0x52a <vidPreHoldState>
		break;
     718:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
     71a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vidHoldState>
		break;
     71e:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
     720:	0e 94 ff 02 	call	0x5fe	; 0x5fe <vidPreReleaseState>
		break;
     724:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
     726:	0e 94 3c 03 	call	0x678	; 0x678 <vidReleaseState>
     72a:	08 95       	ret

0000072c <BUTTON_mainTask>:
/******************************************************************************/
/*********************** Public Functions Implementation **********************/
/******************************************************************************/

void BUTTON_mainTask(void)
{
     72c:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
     72e:	c0 e0       	ldi	r28, 0x00	; 0
     730:	04 c0       	rjmp	.+8      	; 0x73a <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
     732:	8c 2f       	mov	r24, r28
     734:	0e 94 69 03 	call	0x6d2	; 0x6d2 <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
     738:	cf 5f       	subi	r28, 0xFF	; 255
     73a:	c2 30       	cpi	r28, 0x02	; 2
     73c:	d0 f3       	brcs	.-12     	; 0x732 <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
	}
}
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <BUTTON_init>:
u8_en_btnStateType BUTTON_init(uint8_t u8_a_port , uint8_t u8_a_pin, u8_en_btnIdType en_btnId)
{
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	18 2f       	mov	r17, r24
     74a:	d6 2f       	mov	r29, r22
     74c:	c4 2f       	mov	r28, r20
	uint8_t u8_RetVal;
	// Set button pin as input
	u8_RetVal = DIO_init(u8_a_port, u8_a_pin , STD_INPUT);
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_init>
	
	// Enable PULLUP
	u8_RetVal = DIO_writePIN(u8_a_port, u8_a_pin, STD_HIGH);
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	6d 2f       	mov	r22, r29
     758:	81 2f       	mov	r24, r17
     75a:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
	
	st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
     75e:	4c 2f       	mov	r20, r28
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	fa 01       	movw	r30, r20
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	e4 0f       	add	r30, r20
     76e:	f5 1f       	adc	r31, r21
     770:	e4 57       	subi	r30, 0x74	; 116
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	12 82       	std	Z+2, r1	; 0x02
	st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
     776:	13 82       	std	Z+3, r1	; 0x03
	st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
     778:	14 82       	std	Z+4, r1	; 0x04
	st_gs_strBtnInfo[en_btnId].port = u8_a_port;
     77a:	10 83       	st	Z, r17
	st_gs_strBtnInfo[en_btnId].pin = u8_a_pin;
     77c:	d1 83       	std	Z+1, r29	; 0x01
		
		st_gs_strBtnInfo[u8Index].u8_a_btnState     = BT_PRE_PUSH;
		st_gs_strBtnInfo[u8Index].u8_a_debounceThreshold  = ((uint8_t)0U);
		st_gs_strBtnInfo[u8Index].u8_a_holdThreshold      = ((uint8_t)0U);
	}*/
	if (u8_RetVal == DIO_E_OK)
     77e:	81 11       	cpse	r24, r1
	{
		return BT_PRE_PUSH;
	}
	else
	{
		return BT_UNDEFINED;
     780:	86 e0       	ldi	r24, 0x06	; 6
	}
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	08 95       	ret

0000078a <BUTTON_getState>:
u8_en_btnStateType BUTTON_getState(u8_en_btnIdType en_btnId)
{
	u8_en_btnStateType enuReturn;
	
	if(en_btnId < BUTTONS_NUM)
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	68 f4       	brcc	.+26     	; 0x7a8 <BUTTON_getState+0x1e>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	8e 0f       	add	r24, r30
     79c:	9f 1f       	adc	r25, r31
     79e:	fc 01       	movw	r30, r24
     7a0:	e4 57       	subi	r30, 0x74	; 116
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	82 81       	ldd	r24, Z+2	; 0x02
     7a6:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
     7a8:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
     7aa:	08 95       	ret

000007ac <CAR_INIT>:
*description : used to initlize the two motor as output 
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK                                                             
************************************************************************/
EN_car_error_t CAR_INIT(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ec 01       	movw	r28, r24
     7b8:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(motor_1);
     7ba:	0e 94 8a 04 	call	0x914	; 0x914 <MOTOR_INIT>
     7be:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_INIT(motor_2);
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 8a 04 	call	0x914	; 0x914 <MOTOR_INIT>
	if(motor_1==NULL || motor_2 ==NULL)
     7c6:	cd 2b       	or	r28, r29
     7c8:	39 f0       	breq	.+14     	; 0x7d8 <CAR_INIT+0x2c>
     7ca:	01 2b       	or	r16, r17
     7cc:	39 f0       	breq	.+14     	; 0x7dc <CAR_INIT+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     7ce:	f1 10       	cpse	r15, r1
     7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <CAR_INIT+0x34>
     7d2:	81 11       	cpse	r24, r1
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <CAR_INIT+0x38>
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <CAR_INIT+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_INIT(motor_1);
	EN_motor_error_t motor_error2=MOTOR_INIT(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <CAR_INIT+0x3a>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <CAR_INIT+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <CAR_INIT+0x3a>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	08 95       	ret

000007f2 <CAR_FORWARD>:
*description : used to move the car forward by specific speed
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_FORWARD(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
     7fe:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
     800:	0e 94 a2 04 	call	0x944	; 0x944 <MOTOR_FORWARD>
     804:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_FORWARD(motor_2);
     806:	c8 01       	movw	r24, r16
     808:	0e 94 a2 04 	call	0x944	; 0x944 <MOTOR_FORWARD>
	if(motor_1==NULL || motor_2 ==NULL)
     80c:	cd 2b       	or	r28, r29
     80e:	39 f0       	breq	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     810:	01 2b       	or	r16, r17
     812:	39 f0       	breq	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     814:	f1 10       	cpse	r15, r1
     816:	07 c0       	rjmp	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     818:	81 11       	cpse	r24, r1
     81a:	07 c0       	rjmp	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81c:	07 c0       	rjmp	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
	EN_motor_error_t motor_error2=MOTOR_FORWARD(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	01 c0       	rjmp	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	08 95       	ret

00000838 <CAR_REVERSE_RIGHT>:
*description : used to reverse the car to the right
*input       : this function take two pointers to motor structure and speed of the car
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_REVERSE_RIGHT(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
     846:	0e 94 a2 04 	call	0x944	; 0x944 <MOTOR_FORWARD>
     84a:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(motor_2);
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 ba 04 	call	0x974	; 0x974 <MOTOR_BACKWARD>
	if(motor_1==NULL || motor_2 ==NULL)
     852:	cd 2b       	or	r28, r29
     854:	39 f0       	breq	.+14     	; 0x864 <__stack+0x5>
     856:	01 2b       	or	r16, r17
     858:	39 f0       	breq	.+14     	; 0x868 <__stack+0x9>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     85a:	f1 10       	cpse	r15, r1
     85c:	07 c0       	rjmp	.+14     	; 0x86c <__stack+0xd>
     85e:	81 11       	cpse	r24, r1
     860:	07 c0       	rjmp	.+14     	; 0x870 <__stack+0x11>
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_FORWARD(motor_1);
	EN_motor_error_t motor_error2=MOTOR_BACKWARD(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	05 c0       	rjmp	.+10     	; 0x872 <__stack+0x13>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	03 c0       	rjmp	.+6      	; 0x872 <__stack+0x13>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	01 c0       	rjmp	.+2      	; 0x872 <__stack+0x13>
     870:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	08 95       	ret

0000087e <CAR_STOP>:
*description : used to stop gthe car
*input       : this function take two pointers to motor structure
*return      : MOTOR_OK, MOTOR_NOK
************************************************************************/
EN_car_error_t CAR_STOP(const ST_motor_t* motor_1,const ST_motor_t* motor_2)
{
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	8b 01       	movw	r16, r22
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(motor_1);
     88c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <MOTOR_STOP>
     890:	f8 2e       	mov	r15, r24
	EN_motor_error_t motor_error2=MOTOR_STOP(motor_2);
     892:	c8 01       	movw	r24, r16
     894:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <MOTOR_STOP>
	if(motor_1==NULL || motor_2 ==NULL)
     898:	cd 2b       	or	r28, r29
     89a:	39 f0       	breq	.+14     	; 0x8aa <CAR_STOP+0x2c>
     89c:	01 2b       	or	r16, r17
     89e:	39 f0       	breq	.+14     	; 0x8ae <CAR_STOP+0x30>
	{
		ret_val=CAR_NOK;
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
     8a0:	f1 10       	cpse	r15, r1
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <CAR_STOP+0x34>
     8a4:	81 11       	cpse	r24, r1
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <CAR_STOP+0x38>
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <CAR_STOP+0x3a>
	EN_car_error_t ret_val=CAR_OK;
	EN_motor_error_t motor_error1=MOTOR_STOP(motor_1);
	EN_motor_error_t motor_error2=MOTOR_STOP(motor_2);
	if(motor_1==NULL || motor_2 ==NULL)
	{
		ret_val=CAR_NOK;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <CAR_STOP+0x3a>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <CAR_STOP+0x3a>
	}
	else if(motor_error1 != MOTOR_OK || motor_error2 != MOTOR_OK)
	{
		ret_val=CAR_NOK;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <CAR_STOP+0x3a>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		// do nothing
	}
	return ret_val;
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	08 95       	ret

000008c4 <ext_init>:
#include "EXT_interrupt_manager.h"



u8_en_interruptErrorType ext_init(ext_interrupt_config_t *ext_interrupt_config, void(*callback)(void)){
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	8b 01       	movw	r16, r22

    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_init(ext_interrupt_config->ext_interrupt_no, ext_interrupt_config->edge_select);
     8d0:	69 81       	ldd	r22, Y+1	; 0x01
     8d2:	88 81       	ld	r24, Y
     8d4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ext_interrupt_init>
    ext_interrupt_set_callback_init(ext_interrupt_config->ext_interrupt_no , callback);
     8d8:	b8 01       	movw	r22, r16
     8da:	88 81       	ld	r24, Y
     8dc:	0e 94 82 06 	call	0xd04	; 0xd04 <ext_interrupt_set_callback_init>
    return ret_val;
}
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <ext_enable>:
u8_en_interruptErrorType ext_enable(uint8_t u8_intNum){
    
    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_enable(u8_intNum);
     8ec:	0e 94 66 06 	call	0xccc	; 0xccc <ext_interrupt_enable>
    return ret_val;
}
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	08 95       	ret

000008f4 <ext_disable>:
u8_en_interruptErrorType ext_disable(uint8_t u8_intNum){

    u8_en_interruptErrorType ret_val=INT_E_OK;
    ext_interrupt_disable(u8_intNum);
     8f4:	0e 94 74 06 	call	0xce8	; 0xce8 <ext_interrupt_disable>
    return ret_val;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	08 95       	ret

000008fc <LED_init>:
};
*/

u8_en_ledErrorType LED_init(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_init(u8_a_port, u8_a_pin, STD_OUTPUT);
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_init>
}
     902:	08 95       	ret

00000904 <LED_off>:



u8_en_ledErrorType LED_off(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_OFF);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
}
     90a:	08 95       	ret

0000090c <LED_on>:
u8_en_ledErrorType LED_on(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_ON);
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     912:	08 95       	ret

00000914 <MOTOR_INIT>:
/*including sections*/
#include "motor.h"

/* APIs impelementation*/
EN_motor_error_t MOTOR_INIT(const ST_motor_t* motor)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
	if((DIO_init(motor->port,motor->pin_num1,STD_OUTPUT)==DIO_E_OK) && (DIO_init(motor->port,motor->pin_num2,STD_OUTPUT)==DIO_E_OK ))
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	88 81       	ld	r24, Y
     920:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_init>
     924:	81 11       	cpse	r24, r1
     926:	08 c0       	rjmp	.+16     	; 0x938 <MOTOR_INIT+0x24>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	6a 81       	ldd	r22, Y+2	; 0x02
     92c:	88 81       	ld	r24, Y
     92e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_init>
     932:	81 11       	cpse	r24, r1
     934:	03 c0       	rjmp	.+6      	; 0x93c <MOTOR_INIT+0x28>
     936:	03 c0       	rjmp	.+6      	; 0x93e <MOTOR_INIT+0x2a>
	{
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <MOTOR_INIT+0x2a>
     93c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <MOTOR_FORWARD>:
EN_motor_error_t MOTOR_FORWARD(const ST_motor_t* motor)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_HIGH)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	69 81       	ldd	r22, Y+1	; 0x01
     94e:	88 81       	ld	r24, Y
     950:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     954:	81 11       	cpse	r24, r1
     956:	08 c0       	rjmp	.+16     	; 0x968 <MOTOR_FORWARD+0x24>
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	6a 81       	ldd	r22, Y+2	; 0x02
     95c:	88 81       	ld	r24, Y
     95e:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     962:	81 11       	cpse	r24, r1
     964:	03 c0       	rjmp	.+6      	; 0x96c <MOTOR_FORWARD+0x28>
     966:	03 c0       	rjmp	.+6      	; 0x96e <MOTOR_FORWARD+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <MOTOR_FORWARD+0x2a>
     96c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <MOTOR_BACKWARD>:
EN_motor_error_t MOTOR_BACKWARD(const ST_motor_t* motor)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_HIGH)==DIO_E_OK)
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	69 81       	ldd	r22, Y+1	; 0x01
     97e:	88 81       	ld	r24, Y
     980:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     984:	81 11       	cpse	r24, r1
     986:	08 c0       	rjmp	.+16     	; 0x998 <MOTOR_BACKWARD+0x24>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	6a 81       	ldd	r22, Y+2	; 0x02
     98c:	88 81       	ld	r24, Y
     98e:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     992:	81 11       	cpse	r24, r1
     994:	03 c0       	rjmp	.+6      	; 0x99c <MOTOR_BACKWARD+0x28>
     996:	03 c0       	rjmp	.+6      	; 0x99e <MOTOR_BACKWARD+0x2a>
	{    
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	01 c0       	rjmp	.+2      	; 0x99e <MOTOR_BACKWARD+0x2a>
     99c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <MOTOR_STOP>:
EN_motor_error_t MOTOR_STOP(const ST_motor_t* motor)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
	if(DIO_writePIN(motor->port,motor->pin_num1,STD_LOW)==DIO_E_OK && DIO_writePIN(motor->port,motor->pin_num2,STD_LOW)==DIO_E_OK)
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	69 81       	ldd	r22, Y+1	; 0x01
     9ae:	88 81       	ld	r24, Y
     9b0:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     9b4:	81 11       	cpse	r24, r1
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <MOTOR_STOP+0x24>
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	6a 81       	ldd	r22, Y+2	; 0x02
     9bc:	88 81       	ld	r24, Y
     9be:	0e 94 67 05 	call	0xace	; 0xace <DIO_writePIN>
     9c2:	81 11       	cpse	r24, r1
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <MOTOR_STOP+0x28>
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <MOTOR_STOP+0x2a>
	{   
		return MOTOR_OK;
	}
	else
	{
		return MOTOR_NOK;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <MOTOR_STOP+0x2a>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <TIMER_MANGER_init>:
 */ 
#include "timer_manger.h"

static Timer_Config_t st_g_Timer;
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
     9da:	fc 01       	movw	r30, r24
     9dc:	20 81       	ld	r18, Z
     9de:	23 30       	cpi	r18, 0x03	; 3
     9e0:	c8 f4       	brcc	.+50     	; 0xa14 <TIMER_MANGER_init+0x40>
     9e2:	ec 01       	movw	r28, r24
	}
	else
	{
		/*initiate the timer */
		
		st_g_Timer.timer_type=stPtr_a_TimerConfig->timer_num;
     9e4:	e6 e9       	ldi	r30, 0x96	; 150
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	20 83       	st	Z, r18
		st_g_Timer.timer_mode=stPtr_a_TimerConfig->timer_mode;
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	82 83       	std	Z+2, r24	; 0x02
		st_g_Timer.timer_InitialValue=stPtr_a_TimerConfig->timer_InitialValue;
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	97 83       	std	Z+7, r25	; 0x07
     9f4:	86 83       	std	Z+6, r24	; 0x06
		st_g_Timer.timer_compare_MatchValue=stPtr_a_TimerConfig->timer_compare_MatchValue;
     9f6:	8c 81       	ldd	r24, Y+4	; 0x04
     9f8:	9d 81       	ldd	r25, Y+5	; 0x05
     9fa:	91 87       	std	Z+9, r25	; 0x09
     9fc:	80 87       	std	Z+8, r24	; 0x08
		
		l_ret = TIMERx_init(&st_g_Timer);
     9fe:	cf 01       	movw	r24, r30
     a00:	0e 94 0b 0b 	call	0x1616	; 0x1616 <TIMERx_init>
     a04:	18 2f       	mov	r17, r24
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
     a06:	68 81       	ld	r22, Y
     a08:	8e 81       	ldd	r24, Y+6	; 0x06
     a0a:	9f 81       	ldd	r25, Y+7	; 0x07
     a0c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TIMERx_setCallBack>
     a10:	81 2b       	or	r24, r17
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <TIMER_MANGER_init+0x42>
Std_ReturnType TIMER_MANGER_init(const TimerManger_config_t *stPtr_a_TimerConfig)
{
	Std_ReturnType l_ret = E_OK;
	if( (stPtr_a_TimerConfig->timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
     a14:	80 e0       	ldi	r24, 0x00	; 0
		l_ret = TIMERx_init(&st_g_Timer);
		/*set call-back function  */
		l_ret |= TIMERx_setCallBack(stPtr_a_TimerConfig->call_back_function , stPtr_a_TimerConfig->timer_num);
	}
	return l_ret;
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	08 95       	ret

00000a1e <TIMER_MANGER_start>:

Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
     a1e:	8a 30       	cpi	r24, 0x0A	; 10
     a20:	28 f4       	brcc	.+10     	; 0xa2c <TIMER_MANGER_start+0xe>
     a22:	63 30       	cpi	r22, 0x03	; 3
     a24:	28 f4       	brcc	.+10     	; 0xa30 <TIMER_MANGER_start+0x12>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
     a26:	0e 94 4f 0b 	call	0x169e	; 0x169e <TIMERx_start>
     a2a:	08 95       	ret
Std_ReturnType TIMER_MANGER_start(const TimerClock_t en_a_timer_clock,const TimerType_t en_a_timer_num)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_clock >= INVALID_TIMER_CLK)||(en_a_timer_num >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 95       	ret
     a30:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		l_ret = TIMERx_start(en_a_timer_clock,en_a_timer_num);
	}
	return l_ret;
}
     a32:	08 95       	ret

00000a34 <TIMER_MANGER_stop>:

Std_ReturnType TIMER_MANGER_stop(const TimerType_t en_a_timer_num)
{
	
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
     a34:	83 30       	cpi	r24, 0x03	; 3
     a36:	18 f4       	brcc	.+6      	; 0xa3e <TIMER_MANGER_stop+0xa>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(en_a_timer_num);
     a38:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <TIMERx_stop>
     a3c:	08 95       	ret
{
	
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
	{
		l_ret = E_NOT_OK;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*stop the clock for the specific timer*/
		l_ret = TIMERx_stop(en_a_timer_num);
	}
	return l_ret;
}
     a40:	08 95       	ret

00000a42 <TIMER_MANGER_setValue>:


Std_ReturnType TIMER_MANGER_setValue(const TimerType_t en_a_timer_num , uint16_t u16_a_InitialValue)
{
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	18 f4       	brcc	.+6      	; 0xa4c <TIMER_MANGER_setValue+0xa>
		l_ret = E_NOT_OK;
	}
	else
	{
		/*stop the clock for the specific timer*/
		l_ret =  TIMERx_setValue(en_a_timer_num , u16_a_InitialValue);
     a46:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <TIMERx_setValue>
     a4a:	08 95       	ret
Std_ReturnType TIMER_MANGER_setValue(const TimerType_t en_a_timer_num , uint16_t u16_a_InitialValue)
{
	Std_ReturnType l_ret = E_OK;
	if(en_a_timer_num >= INVALID_TIMER_TYPE)
	{
		l_ret = E_NOT_OK;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*stop the clock for the specific timer*/
		l_ret =  TIMERx_setValue(en_a_timer_num , u16_a_InitialValue);
	}
	return l_ret;
     a4e:	08 95       	ret

00000a50 <main>:
#include "APP/app.h"


int main(void)
{
	APP_start();
     a50:	0e 94 10 02 	call	0x420	; 0x420 <APP_start>
}
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	08 95       	ret

00000a5a <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
     a5a:	68 30       	cpi	r22, 0x08	; 8
     a5c:	a0 f5       	brcc	.+104    	; 0xac6 <DIO_init+0x6c>
	{
		if (port == porta)
     a5e:	81 11       	cpse	r24, r1
     a60:	0b c0       	rjmp	.+22     	; 0xa78 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     a62:	8a b3       	in	r24, 0x1a	; 26
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <DIO_init+0x12>
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	6a 95       	dec	r22
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <DIO_init+0xe>
     a70:	48 2b       	or	r20, r24
     a72:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	08 95       	ret
		}
		else if (port == portb)
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	59 f4       	brne	.+22     	; 0xa92 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     a7c:	87 b3       	in	r24, 0x17	; 23
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_init+0x2c>
     a82:	44 0f       	add	r20, r20
     a84:	55 1f       	adc	r21, r21
     a86:	6a 95       	dec	r22
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_init+0x28>
     a8a:	48 2b       	or	r20, r24
     a8c:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	08 95       	ret
		}
		else if (port == portc)
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	59 f4       	brne	.+22     	; 0xaac <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     a96:	84 b3       	in	r24, 0x14	; 20
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_init+0x46>
     a9c:	44 0f       	add	r20, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_init+0x42>
     aa4:	48 2b       	or	r20, r24
     aa6:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret
		}
		else if (port == portd)
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	69 f4       	brne	.+26     	; 0xaca <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     ab0:	81 b3       	in	r24, 0x11	; 17
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <DIO_init+0x60>
     ab6:	44 0f       	add	r20, r20
     ab8:	55 1f       	adc	r21, r21
     aba:	6a 95       	dec	r22
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <DIO_init+0x5c>
     abe:	48 2b       	or	r20, r24
     ac0:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     aca:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     acc:	08 95       	ret

00000ace <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
     ace:	68 30       	cpi	r22, 0x08	; 8
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <DIO_writePIN+0x6>
     ad2:	74 c0       	rjmp	.+232    	; 0xbbc <DIO_writePIN+0xee>
	{
		if (port == porta)
     ad4:	81 11       	cpse	r24, r1
     ad6:	1b c0       	rjmp	.+54     	; 0xb0e <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     ad8:	41 30       	cpi	r20, 0x01	; 1
     ada:	61 f4       	brne	.+24     	; 0xaf4 <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     adc:	2b b3       	in	r18, 0x1b	; 27
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_writePIN+0x1a>
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	6a 95       	dec	r22
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_writePIN+0x16>
     aec:	82 2b       	or	r24, r18
     aee:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     af4:	2b b3       	in	r18, 0x1b	; 27
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_writePIN+0x32>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_writePIN+0x2e>
     b04:	80 95       	com	r24
     b06:	82 23       	and	r24, r18
     b08:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	08 95       	ret
		}
		else if (port == portb)
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	d9 f4       	brne	.+54     	; 0xb48 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     b12:	41 30       	cpi	r20, 0x01	; 1
     b14:	61 f4       	brne	.+24     	; 0xb2e <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     b16:	28 b3       	in	r18, 0x18	; 24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_writePIN+0x54>
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	6a 95       	dec	r22
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_writePIN+0x50>
     b26:	82 2b       	or	r24, r18
     b28:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     b2e:	28 b3       	in	r18, 0x18	; 24
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <DIO_writePIN+0x6c>
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	6a 95       	dec	r22
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <DIO_writePIN+0x68>
     b3e:	80 95       	com	r24
     b40:	82 23       	and	r24, r18
     b42:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	08 95       	ret
		}
		else if (port == portc)
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	d9 f4       	brne	.+54     	; 0xb82 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     b4c:	41 30       	cpi	r20, 0x01	; 1
     b4e:	61 f4       	brne	.+24     	; 0xb68 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     b50:	25 b3       	in	r18, 0x15	; 21
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_writePIN+0x8e>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	6a 95       	dec	r22
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_writePIN+0x8a>
     b60:	82 2b       	or	r24, r18
     b62:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     b68:	25 b3       	in	r18, 0x15	; 21
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <DIO_writePIN+0xa6>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	6a 95       	dec	r22
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <DIO_writePIN+0xa2>
     b78:	80 95       	com	r24
     b7a:	82 23       	and	r24, r18
     b7c:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	08 95       	ret
		}
		else if (port == portd)
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	e9 f4       	brne	.+58     	; 0xbc0 <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     b86:	41 30       	cpi	r20, 0x01	; 1
     b88:	61 f4       	brne	.+24     	; 0xba2 <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     b8a:	22 b3       	in	r18, 0x12	; 18
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_writePIN+0xc8>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	6a 95       	dec	r22
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_writePIN+0xc4>
     b9a:	82 2b       	or	r24, r18
     b9c:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     ba2:	22 b3       	in	r18, 0x12	; 18
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_writePIN+0xe0>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	6a 95       	dec	r22
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_writePIN+0xdc>
     bb2:	80 95       	com	r24
     bb4:	82 23       	and	r24, r18
     bb6:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     bc2:	08 95       	ret

00000bc4 <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
     bc4:	68 30       	cpi	r22, 0x08	; 8
     bc6:	08 f0       	brcs	.+2      	; 0xbca <DIO_readPIN+0x6>
     bc8:	64 c0       	rjmp	.+200    	; 0xc92 <DIO_readPIN+0xce>
	{
		if (port == porta)
     bca:	81 11       	cpse	r24, r1
     bcc:	17 c0       	rjmp	.+46     	; 0xbfc <DIO_readPIN+0x38>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     bce:	79 b3       	in	r23, 0x19	; 25
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9c 01       	movw	r18, r24
     bd6:	06 2e       	mov	r0, r22
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_readPIN+0x1a>
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_readPIN+0x16>
     be2:	87 2f       	mov	r24, r23
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	82 23       	and	r24, r18
     be8:	93 23       	and	r25, r19
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_readPIN+0x2c>
     bec:	96 95       	lsr	r25
     bee:	87 95       	ror	r24
     bf0:	6a 95       	dec	r22
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_readPIN+0x28>
     bf4:	fa 01       	movw	r30, r20
     bf6:	80 83       	st	Z, r24
			return DIO_E_OK;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
		}
		else if (port == portb)
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	b9 f4       	brne	.+46     	; 0xc2e <DIO_readPIN+0x6a>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     c00:	76 b3       	in	r23, 0x16	; 22
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9c 01       	movw	r18, r24
     c08:	06 2e       	mov	r0, r22
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <DIO_readPIN+0x4c>
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <DIO_readPIN+0x48>
     c14:	87 2f       	mov	r24, r23
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	82 23       	and	r24, r18
     c1a:	93 23       	and	r25, r19
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_readPIN+0x5e>
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	6a 95       	dec	r22
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_readPIN+0x5a>
     c26:	fa 01       	movw	r30, r20
     c28:	80 83       	st	Z, r24
			return DIO_E_OK;
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	08 95       	ret
		}
		else if (port == portc)
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	b9 f4       	brne	.+46     	; 0xc60 <DIO_readPIN+0x9c>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     c32:	73 b3       	in	r23, 0x13	; 19
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9c 01       	movw	r18, r24
     c3a:	06 2e       	mov	r0, r22
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_readPIN+0x7e>
     c3e:	22 0f       	add	r18, r18
     c40:	33 1f       	adc	r19, r19
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_readPIN+0x7a>
     c46:	87 2f       	mov	r24, r23
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	82 23       	and	r24, r18
     c4c:	93 23       	and	r25, r19
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <DIO_readPIN+0x90>
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	6a 95       	dec	r22
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <DIO_readPIN+0x8c>
     c58:	fa 01       	movw	r30, r20
     c5a:	80 83       	st	Z, r24
			return DIO_E_OK;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	08 95       	ret
		}
		else if (port == portd)
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	c9 f4       	brne	.+50     	; 0xc96 <DIO_readPIN+0xd2>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     c64:	70 b3       	in	r23, 0x10	; 16
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9c 01       	movw	r18, r24
     c6c:	06 2e       	mov	r0, r22
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_readPIN+0xb0>
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_readPIN+0xac>
     c78:	87 2f       	mov	r24, r23
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	82 23       	and	r24, r18
     c7e:	93 23       	and	r25, r19
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_readPIN+0xc2>
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	6a 95       	dec	r22
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_readPIN+0xbe>
     c8a:	fa 01       	movw	r30, r20
     c8c:	80 83       	st	Z, r24
			return DIO_E_OK;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     c96:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     c98:	08 95       	ret

00000c9a <ext_interrupt_init>:
static void (*callback_EXT_0)(void);
static void (*callback_EXT_1)(void);

u8_en_interruptErrorType ext_interrupt_init(ext_interrupt_no_t ext_interrupt_no, EDGE_detection_t EDGE_detection){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     c9a:	88 23       	and	r24, r24
     c9c:	19 f0       	breq	.+6      	; 0xca4 <ext_interrupt_init+0xa>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <ext_interrupt_init+0x18>
     ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <ext_interrupt_init+0x2e>
    {
    case EXT_0:
        MCUCR_ADD |= EDGE_detection;	
     ca4:	85 b7       	in	r24, 0x35	; 53
     ca6:	68 2b       	or	r22, r24
     ca8:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= Globle_INT;
     caa:	8f b7       	in	r24, 0x3f	; 63
     cac:	87 60       	ori	r24, 0x07	; 7
     cae:	8f bf       	out	0x3f, r24	; 63
        break;
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <ext_interrupt_init+0x2e>

    case EXT_1:
        MCUCR_ADD |= (EDGE_detection<<2);	
     cb2:	85 b7       	in	r24, 0x35	; 53
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	66 0f       	add	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	68 2b       	or	r22, r24
     cc0:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= (1<<Globle_INT);
     cc2:	8f b7       	in	r24, 0x3f	; 63
     cc4:	80 68       	ori	r24, 0x80	; 128
     cc6:	8f bf       	out	0x3f, r24	; 63
    default:
        break;
    }

    return ret_val;
}
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret

00000ccc <ext_interrupt_enable>:
u8_en_interruptErrorType ext_interrupt_enable(ext_interrupt_no_t ext_interrupt_no){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     ccc:	88 23       	and	r24, r24
     cce:	19 f0       	breq	.+6      	; 0xcd6 <ext_interrupt_enable+0xa>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	29 f0       	breq	.+10     	; 0xcde <ext_interrupt_enable+0x12>
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <ext_interrupt_enable+0x18>
    {
    case EXT_0:
        GICR_ADD |= (1<<INT0_Globle);
     cd6:	8b b7       	in	r24, 0x3b	; 59
     cd8:	80 64       	ori	r24, 0x40	; 64
     cda:	8b bf       	out	0x3b, r24	; 59

		
        break;
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <ext_interrupt_enable+0x18>

    case EXT_1:
        GICR_ADD |= (1<<INT1_Globle);
     cde:	8b b7       	in	r24, 0x3b	; 59
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	8b bf       	out	0x3b, r24	; 59
    
    default:
        break;
    }
    return ret_val;
}
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	08 95       	ret

00000ce8 <ext_interrupt_disable>:
u8_en_interruptErrorType ext_interrupt_disable(ext_interrupt_no_t ext_interrupt_no){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     ce8:	88 23       	and	r24, r24
     cea:	19 f0       	breq	.+6      	; 0xcf2 <ext_interrupt_disable+0xa>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	29 f0       	breq	.+10     	; 0xcfa <ext_interrupt_disable+0x12>
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <ext_interrupt_disable+0x18>
    {
    case EXT_0:
       GICR_ADD &= ~(1<<INT0_Globle);
     cf2:	8b b7       	in	r24, 0x3b	; 59
     cf4:	8f 7b       	andi	r24, 0xBF	; 191
     cf6:	8b bf       	out	0x3b, r24	; 59

        break;
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <ext_interrupt_disable+0x18>

    case EXT_1:
        GICR_ADD &= ~(1<<INT1_Globle);
     cfa:	8b b7       	in	r24, 0x3b	; 59
     cfc:	8f 77       	andi	r24, 0x7F	; 127
     cfe:	8b bf       	out	0x3b, r24	; 59
    default:
        break;
    }
    return ret_val;

}
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	08 95       	ret

00000d04 <ext_interrupt_set_callback_init>:

u8_en_interruptErrorType ext_interrupt_set_callback_init(ext_interrupt_no_t ext_interrupt_no ,void(*callback)(void)){
    u8_en_interruptErrorType ret_val=INT_E_OK;
    switch (ext_interrupt_no)
     d04:	88 23       	and	r24, r24
     d06:	19 f0       	breq	.+6      	; 0xd0e <ext_interrupt_set_callback_init+0xa>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	49 f0       	breq	.+18     	; 0xd1e <ext_interrupt_set_callback_init+0x1a>
     d0c:	0b c0       	rjmp	.+22     	; 0xd24 <ext_interrupt_set_callback_init+0x20>
    {
    case EXT_0:
        GICR_ADD &= ~(1<<INT0_Globle);
     d0e:	8b b7       	in	r24, 0x3b	; 59
     d10:	8f 7b       	andi	r24, 0xBF	; 191
     d12:	8b bf       	out	0x3b, r24	; 59
        callback_EXT_0 = callback;
     d14:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <callback_EXT_0+0x1>
     d18:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <callback_EXT_0>
		
        break;
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <ext_interrupt_set_callback_init+0x20>

    case EXT_1:
        GICR_ADD &= ~(1<<INT1_Globle);
     d1e:	8b b7       	in	r24, 0x3b	; 59
     d20:	8f 77       	andi	r24, 0x7F	; 127
     d22:	8b bf       	out	0x3b, r24	; 59
    
    default:
        break;
    }
    return ret_val;
}
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	08 95       	ret

00000d28 <__vector_1>:
*   -Description-
*-interrupt service routine for  external interrupt 0
*
*/
ISR(EXT_INT0)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	callback_EXT_0();
     d4a:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <callback_EXT_0>
     d4e:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <callback_EXT_0+0x1>
     d52:	09 95       	icall
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <TIMERx_selectClk>:
				l_ret |= E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	08 f0       	brcs	.+2      	; 0xd7c <TIMERx_selectClk+0x6>
     d7a:	34 c1       	rjmp	.+616    	; 0xfe4 <TIMERx_selectClk+0x26e>
     d7c:	6a 30       	cpi	r22, 0x0A	; 10
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <TIMERx_selectClk+0xc>
     d80:	33 c1       	rjmp	.+614    	; 0xfe8 <TIMERx_selectClk+0x272>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	09 f4       	brne	.+2      	; 0xd88 <TIMERx_selectClk+0x12>
     d86:	68 c0       	rjmp	.+208    	; 0xe58 <TIMERx_selectClk+0xe2>
     d88:	20 f0       	brcs	.+8      	; 0xd92 <TIMERx_selectClk+0x1c>
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	09 f4       	brne	.+2      	; 0xd90 <TIMERx_selectClk+0x1a>
     d8e:	c7 c0       	rjmp	.+398    	; 0xf1e <TIMERx_selectClk+0x1a8>
     d90:	2d c1       	rjmp	.+602    	; 0xfec <TIMERx_selectClk+0x276>
     d92:	86 2f       	mov	r24, r22
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	8a 30       	cpi	r24, 0x0A	; 10
     d98:	91 05       	cpc	r25, r1
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <TIMERx_selectClk+0x28>
     d9c:	29 c1       	rjmp	.+594    	; 0xff0 <TIMERx_selectClk+0x27a>
     d9e:	fc 01       	movw	r30, r24
     da0:	e6 5d       	subi	r30, 0xD6	; 214
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__tablejump2__>
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	8e 7f       	andi	r24, 0xFE	; 254
     dac:	83 bf       	out	0x33, r24	; 51
     dae:	83 b7       	in	r24, 0x33	; 51
     db0:	8d 7f       	andi	r24, 0xFD	; 253
     db2:	83 bf       	out	0x33, r24	; 51
     db4:	83 b7       	in	r24, 0x33	; 51
     db6:	8b 7f       	andi	r24, 0xFB	; 251
     db8:	83 bf       	out	0x33, r24	; 51
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	08 95       	ret
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	83 bf       	out	0x33, r24	; 51
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	8d 7f       	andi	r24, 0xFD	; 253
     dc8:	83 bf       	out	0x33, r24	; 51
     dca:	83 b7       	in	r24, 0x33	; 51
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	83 bf       	out	0x33, r24	; 51
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	08 95       	ret
     dd4:	83 b7       	in	r24, 0x33	; 51
     dd6:	8e 7f       	andi	r24, 0xFE	; 254
     dd8:	83 bf       	out	0x33, r24	; 51
     dda:	83 b7       	in	r24, 0x33	; 51
     ddc:	82 60       	ori	r24, 0x02	; 2
     dde:	83 bf       	out	0x33, r24	; 51
     de0:	83 b7       	in	r24, 0x33	; 51
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	83 bf       	out	0x33, r24	; 51
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	08 95       	ret
     dea:	83 b7       	in	r24, 0x33	; 51
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	83 bf       	out	0x33, r24	; 51
     df0:	83 b7       	in	r24, 0x33	; 51
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	83 bf       	out	0x33, r24	; 51
     df6:	83 b7       	in	r24, 0x33	; 51
     df8:	8b 7f       	andi	r24, 0xFB	; 251
     dfa:	83 bf       	out	0x33, r24	; 51
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	08 95       	ret
     e00:	83 b7       	in	r24, 0x33	; 51
     e02:	8e 7f       	andi	r24, 0xFE	; 254
     e04:	83 bf       	out	0x33, r24	; 51
     e06:	83 b7       	in	r24, 0x33	; 51
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	83 bf       	out	0x33, r24	; 51
     e0c:	83 b7       	in	r24, 0x33	; 51
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	83 bf       	out	0x33, r24	; 51
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret
     e16:	83 b7       	in	r24, 0x33	; 51
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	83 bf       	out	0x33, r24	; 51
     e1c:	83 b7       	in	r24, 0x33	; 51
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	83 bf       	out	0x33, r24	; 51
     e22:	83 b7       	in	r24, 0x33	; 51
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	83 bf       	out	0x33, r24	; 51
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	08 95       	ret
     e2c:	83 b7       	in	r24, 0x33	; 51
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	83 bf       	out	0x33, r24	; 51
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	83 bf       	out	0x33, r24	; 51
     e38:	83 b7       	in	r24, 0x33	; 51
     e3a:	84 60       	ori	r24, 0x04	; 4
     e3c:	83 bf       	out	0x33, r24	; 51
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	08 95       	ret
     e42:	83 b7       	in	r24, 0x33	; 51
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	83 bf       	out	0x33, r24	; 51
     e48:	83 b7       	in	r24, 0x33	; 51
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	83 bf       	out	0x33, r24	; 51
     e4e:	83 b7       	in	r24, 0x33	; 51
     e50:	84 60       	ori	r24, 0x04	; 4
     e52:	83 bf       	out	0x33, r24	; 51
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	08 95       	ret
     e58:	86 2f       	mov	r24, r22
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	8a 30       	cpi	r24, 0x0A	; 10
     e5e:	91 05       	cpc	r25, r1
     e60:	08 f0       	brcs	.+2      	; 0xe64 <TIMERx_selectClk+0xee>
     e62:	c8 c0       	rjmp	.+400    	; 0xff4 <TIMERx_selectClk+0x27e>
     e64:	fc 01       	movw	r30, r24
     e66:	ec 5c       	subi	r30, 0xCC	; 204
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__tablejump2__>
     e6e:	8e b5       	in	r24, 0x2e	; 46
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	8e bd       	out	0x2e, r24	; 46
     e74:	8e b5       	in	r24, 0x2e	; 46
     e76:	8d 7f       	andi	r24, 0xFD	; 253
     e78:	8e bd       	out	0x2e, r24	; 46
     e7a:	8e b5       	in	r24, 0x2e	; 46
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	8e bd       	out	0x2e, r24	; 46
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	08 95       	ret
     e84:	8e b5       	in	r24, 0x2e	; 46
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	8e bd       	out	0x2e, r24	; 46
     e8a:	8e b5       	in	r24, 0x2e	; 46
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	8e bd       	out	0x2e, r24	; 46
     e90:	8e b5       	in	r24, 0x2e	; 46
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	8e bd       	out	0x2e, r24	; 46
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	08 95       	ret
     e9a:	8e b5       	in	r24, 0x2e	; 46
     e9c:	8e 7f       	andi	r24, 0xFE	; 254
     e9e:	8e bd       	out	0x2e, r24	; 46
     ea0:	8e b5       	in	r24, 0x2e	; 46
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8e bd       	out	0x2e, r24	; 46
     ea6:	8e b5       	in	r24, 0x2e	; 46
     ea8:	8b 7f       	andi	r24, 0xFB	; 251
     eaa:	8e bd       	out	0x2e, r24	; 46
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	08 95       	ret
     eb0:	8e b5       	in	r24, 0x2e	; 46
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	8e bd       	out	0x2e, r24	; 46
     eb6:	8e b5       	in	r24, 0x2e	; 46
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	8e bd       	out	0x2e, r24	; 46
     ebc:	8e b5       	in	r24, 0x2e	; 46
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8e bd       	out	0x2e, r24	; 46
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	8e b5       	in	r24, 0x2e	; 46
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8e bd       	out	0x2e, r24	; 46
     ecc:	8e b5       	in	r24, 0x2e	; 46
     ece:	8d 7f       	andi	r24, 0xFD	; 253
     ed0:	8e bd       	out	0x2e, r24	; 46
     ed2:	8e b5       	in	r24, 0x2e	; 46
     ed4:	84 60       	ori	r24, 0x04	; 4
     ed6:	8e bd       	out	0x2e, r24	; 46
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	08 95       	ret
     edc:	8e b5       	in	r24, 0x2e	; 46
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	8e bd       	out	0x2e, r24	; 46
     ee2:	8e b5       	in	r24, 0x2e	; 46
     ee4:	8d 7f       	andi	r24, 0xFD	; 253
     ee6:	8e bd       	out	0x2e, r24	; 46
     ee8:	8e b5       	in	r24, 0x2e	; 46
     eea:	84 60       	ori	r24, 0x04	; 4
     eec:	8e bd       	out	0x2e, r24	; 46
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
     ef2:	8e b5       	in	r24, 0x2e	; 46
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	8e bd       	out	0x2e, r24	; 46
     ef8:	8e b5       	in	r24, 0x2e	; 46
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	8e bd       	out	0x2e, r24	; 46
     efe:	8e b5       	in	r24, 0x2e	; 46
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	8e bd       	out	0x2e, r24	; 46
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	08 95       	ret
     f08:	8e b5       	in	r24, 0x2e	; 46
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	8e bd       	out	0x2e, r24	; 46
     f0e:	8e b5       	in	r24, 0x2e	; 46
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	8e bd       	out	0x2e, r24	; 46
     f14:	8e b5       	in	r24, 0x2e	; 46
     f16:	84 60       	ori	r24, 0x04	; 4
     f18:	8e bd       	out	0x2e, r24	; 46
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	08 95       	ret
     f1e:	86 2f       	mov	r24, r22
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	91 05       	cpc	r25, r1
     f26:	08 f0       	brcs	.+2      	; 0xf2a <TIMERx_selectClk+0x1b4>
     f28:	67 c0       	rjmp	.+206    	; 0xff8 <TIMERx_selectClk+0x282>
     f2a:	fc 01       	movw	r30, r24
     f2c:	e2 5c       	subi	r30, 0xC2	; 194
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__tablejump2__>
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	8b 7f       	andi	r24, 0xFB	; 251
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	8d 7f       	andi	r24, 0xFD	; 253
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	85 b5       	in	r24, 0x25	; 37
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	85 bd       	out	0x25, r24	; 37
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	08 95       	ret
     f4a:	85 b5       	in	r24, 0x25	; 37
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	85 bd       	out	0x25, r24	; 37
     f50:	85 b5       	in	r24, 0x25	; 37
     f52:	8d 7f       	andi	r24, 0xFD	; 253
     f54:	85 bd       	out	0x25, r24	; 37
     f56:	85 b5       	in	r24, 0x25	; 37
     f58:	8e 7f       	andi	r24, 0xFE	; 254
     f5a:	85 bd       	out	0x25, r24	; 37
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	08 95       	ret
     f60:	85 b5       	in	r24, 0x25	; 37
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	85 bd       	out	0x25, r24	; 37
     f66:	85 b5       	in	r24, 0x25	; 37
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	85 bd       	out	0x25, r24	; 37
     f6c:	85 b5       	in	r24, 0x25	; 37
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	85 bd       	out	0x25, r24	; 37
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
     f76:	85 b5       	in	r24, 0x25	; 37
     f78:	84 60       	ori	r24, 0x04	; 4
     f7a:	85 bd       	out	0x25, r24	; 37
     f7c:	85 b5       	in	r24, 0x25	; 37
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	85 bd       	out	0x25, r24	; 37
     f82:	85 b5       	in	r24, 0x25	; 37
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	85 bd       	out	0x25, r24	; 37
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	08 95       	ret
     f8c:	85 b5       	in	r24, 0x25	; 37
     f8e:	8b 7f       	andi	r24, 0xFB	; 251
     f90:	85 bd       	out	0x25, r24	; 37
     f92:	85 b5       	in	r24, 0x25	; 37
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	85 bd       	out	0x25, r24	; 37
     f98:	85 b5       	in	r24, 0x25	; 37
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	85 bd       	out	0x25, r24	; 37
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret
     fa2:	85 b5       	in	r24, 0x25	; 37
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	85 bd       	out	0x25, r24	; 37
     fa8:	85 b5       	in	r24, 0x25	; 37
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	85 bd       	out	0x25, r24	; 37
     fae:	85 b5       	in	r24, 0x25	; 37
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	85 bd       	out	0x25, r24	; 37
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	85 b5       	in	r24, 0x25	; 37
     fba:	8b 7f       	andi	r24, 0xFB	; 251
     fbc:	85 bd       	out	0x25, r24	; 37
     fbe:	85 b5       	in	r24, 0x25	; 37
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	85 bd       	out	0x25, r24	; 37
     fc4:	85 b5       	in	r24, 0x25	; 37
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	85 bd       	out	0x25, r24	; 37
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	08 95       	ret
     fce:	85 b5       	in	r24, 0x25	; 37
     fd0:	84 60       	ori	r24, 0x04	; 4
     fd2:	85 bd       	out	0x25, r24	; 37
     fd4:	85 b5       	in	r24, 0x25	; 37
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	85 bd       	out	0x25, r24	; 37
     fda:	85 b5       	in	r24, 0x25	; 37
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	85 bd       	out	0x25, r24	; 37
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 95       	ret
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	08 95       	ret
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	08 95       	ret
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	08 95       	ret

00000ffc <TIMERx_setTimerMode>:
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	09 f4       	brne	.+2      	; 0x1002 <TIMERx_setTimerMode+0x6>
    1000:	7d c2       	rjmp	.+1274   	; 0x14fc <TIMERx_setTimerMode+0x500>
    1002:	fc 01       	movw	r30, r24
    1004:	20 81       	ld	r18, Z
    1006:	23 30       	cpi	r18, 0x03	; 3
    1008:	08 f0       	brcs	.+2      	; 0x100c <TIMERx_setTimerMode+0x10>
    100a:	7a c2       	rjmp	.+1268   	; 0x1500 <TIMERx_setTimerMode+0x504>
    100c:	32 81       	ldd	r19, Z+2	; 0x02
    100e:	34 30       	cpi	r19, 0x04	; 4
    1010:	08 f0       	brcs	.+2      	; 0x1014 <TIMERx_setTimerMode+0x18>
    1012:	78 c2       	rjmp	.+1264   	; 0x1504 <TIMERx_setTimerMode+0x508>
    1014:	43 81       	ldd	r20, Z+3	; 0x03
    1016:	44 30       	cpi	r20, 0x04	; 4
    1018:	08 f0       	brcs	.+2      	; 0x101c <TIMERx_setTimerMode+0x20>
    101a:	76 c2       	rjmp	.+1260   	; 0x1508 <TIMERx_setTimerMode+0x50c>
    101c:	21 30       	cpi	r18, 0x01	; 1
    101e:	09 f4       	brne	.+2      	; 0x1022 <TIMERx_setTimerMode+0x26>
    1020:	a6 c0       	rjmp	.+332    	; 0x116e <TIMERx_setTimerMode+0x172>
    1022:	20 f0       	brcs	.+8      	; 0x102c <TIMERx_setTimerMode+0x30>
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	09 f4       	brne	.+2      	; 0x102a <TIMERx_setTimerMode+0x2e>
    1028:	c8 c1       	rjmp	.+912    	; 0x13ba <TIMERx_setTimerMode+0x3be>
    102a:	70 c2       	rjmp	.+1248   	; 0x150c <TIMERx_setTimerMode+0x510>
    102c:	31 30       	cpi	r19, 0x01	; 1
    102e:	d9 f0       	breq	.+54     	; 0x1066 <TIMERx_setTimerMode+0x6a>
    1030:	30 f0       	brcs	.+12     	; 0x103e <TIMERx_setTimerMode+0x42>
    1032:	32 30       	cpi	r19, 0x02	; 2
    1034:	09 f4       	brne	.+2      	; 0x1038 <TIMERx_setTimerMode+0x3c>
    1036:	65 c0       	rjmp	.+202    	; 0x1102 <TIMERx_setTimerMode+0x106>
    1038:	33 30       	cpi	r19, 0x03	; 3
    103a:	e1 f1       	breq	.+120    	; 0x10b4 <TIMERx_setTimerMode+0xb8>
    103c:	69 c2       	rjmp	.+1234   	; 0x1510 <TIMERx_setTimerMode+0x514>
    103e:	83 b7       	in	r24, 0x33	; 51
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	83 bf       	out	0x33, r24	; 51
    1044:	83 b7       	in	r24, 0x33	; 51
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	83 bf       	out	0x33, r24	; 51
    104a:	83 b7       	in	r24, 0x33	; 51
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	83 bf       	out	0x33, r24	; 51
    1050:	83 b7       	in	r24, 0x33	; 51
    1052:	8f 7e       	andi	r24, 0xEF	; 239
    1054:	83 bf       	out	0x33, r24	; 51
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	8f 7d       	andi	r24, 0xDF	; 223
    105a:	83 bf       	out	0x33, r24	; 51
    105c:	89 b7       	in	r24, 0x39	; 57
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	89 bf       	out	0x39, r24	; 57
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	08 95       	ret
    1066:	23 b7       	in	r18, 0x33	; 51
    1068:	20 64       	ori	r18, 0x40	; 64
    106a:	23 bf       	out	0x33, r18	; 51
    106c:	23 b7       	in	r18, 0x33	; 51
    106e:	27 7f       	andi	r18, 0xF7	; 247
    1070:	23 bf       	out	0x33, r18	; 51
    1072:	fc 01       	movw	r30, r24
    1074:	25 81       	ldd	r18, Z+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	59 f0       	breq	.+22     	; 0x1090 <TIMERx_setTimerMode+0x94>
    107a:	23 30       	cpi	r18, 0x03	; 3
    107c:	81 f0       	breq	.+32     	; 0x109e <TIMERx_setTimerMode+0xa2>
    107e:	21 11       	cpse	r18, r1
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <TIMERx_setTimerMode+0xae>
    1082:	23 b7       	in	r18, 0x33	; 51
    1084:	2f 7e       	andi	r18, 0xEF	; 239
    1086:	23 bf       	out	0x33, r18	; 51
    1088:	23 b7       	in	r18, 0x33	; 51
    108a:	2f 7d       	andi	r18, 0xDF	; 223
    108c:	23 bf       	out	0x33, r18	; 51
    108e:	0d c0       	rjmp	.+26     	; 0x10aa <TIMERx_setTimerMode+0xae>
    1090:	23 b7       	in	r18, 0x33	; 51
    1092:	2f 7e       	andi	r18, 0xEF	; 239
    1094:	23 bf       	out	0x33, r18	; 51
    1096:	23 b7       	in	r18, 0x33	; 51
    1098:	20 62       	ori	r18, 0x20	; 32
    109a:	23 bf       	out	0x33, r18	; 51
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <TIMERx_setTimerMode+0xae>
    109e:	23 b7       	in	r18, 0x33	; 51
    10a0:	20 61       	ori	r18, 0x10	; 16
    10a2:	23 bf       	out	0x33, r18	; 51
    10a4:	23 b7       	in	r18, 0x33	; 51
    10a6:	20 62       	ori	r18, 0x20	; 32
    10a8:	23 bf       	out	0x33, r18	; 51
    10aa:	fc 01       	movw	r30, r24
    10ac:	80 85       	ldd	r24, Z+8	; 0x08
    10ae:	8c bf       	out	0x3c, r24	; 60
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	08 95       	ret
    10b4:	23 b7       	in	r18, 0x33	; 51
    10b6:	20 64       	ori	r18, 0x40	; 64
    10b8:	23 bf       	out	0x33, r18	; 51
    10ba:	23 b7       	in	r18, 0x33	; 51
    10bc:	28 60       	ori	r18, 0x08	; 8
    10be:	23 bf       	out	0x33, r18	; 51
    10c0:	fc 01       	movw	r30, r24
    10c2:	24 81       	ldd	r18, Z+4	; 0x04
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	59 f0       	breq	.+22     	; 0x10de <TIMERx_setTimerMode+0xe2>
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	81 f0       	breq	.+32     	; 0x10ec <TIMERx_setTimerMode+0xf0>
    10cc:	21 11       	cpse	r18, r1
    10ce:	14 c0       	rjmp	.+40     	; 0x10f8 <TIMERx_setTimerMode+0xfc>
    10d0:	23 b7       	in	r18, 0x33	; 51
    10d2:	2f 7e       	andi	r18, 0xEF	; 239
    10d4:	23 bf       	out	0x33, r18	; 51
    10d6:	23 b7       	in	r18, 0x33	; 51
    10d8:	2f 7d       	andi	r18, 0xDF	; 223
    10da:	23 bf       	out	0x33, r18	; 51
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <TIMERx_setTimerMode+0xfc>
    10de:	23 b7       	in	r18, 0x33	; 51
    10e0:	2f 7e       	andi	r18, 0xEF	; 239
    10e2:	23 bf       	out	0x33, r18	; 51
    10e4:	23 b7       	in	r18, 0x33	; 51
    10e6:	20 62       	ori	r18, 0x20	; 32
    10e8:	23 bf       	out	0x33, r18	; 51
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <TIMERx_setTimerMode+0xfc>
    10ec:	23 b7       	in	r18, 0x33	; 51
    10ee:	20 61       	ori	r18, 0x10	; 16
    10f0:	23 bf       	out	0x33, r18	; 51
    10f2:	23 b7       	in	r18, 0x33	; 51
    10f4:	20 62       	ori	r18, 0x20	; 32
    10f6:	23 bf       	out	0x33, r18	; 51
    10f8:	fc 01       	movw	r30, r24
    10fa:	80 85       	ldd	r24, Z+8	; 0x08
    10fc:	8c bf       	out	0x3c, r24	; 60
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	08 95       	ret
    1102:	23 b7       	in	r18, 0x33	; 51
    1104:	20 68       	ori	r18, 0x80	; 128
    1106:	23 bf       	out	0x33, r18	; 51
    1108:	23 b7       	in	r18, 0x33	; 51
    110a:	2f 7b       	andi	r18, 0xBF	; 191
    110c:	23 bf       	out	0x33, r18	; 51
    110e:	23 b7       	in	r18, 0x33	; 51
    1110:	28 60       	ori	r18, 0x08	; 8
    1112:	23 bf       	out	0x33, r18	; 51
    1114:	fc 01       	movw	r30, r24
    1116:	23 81       	ldd	r18, Z+3	; 0x03
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	69 f0       	breq	.+26     	; 0x1136 <TIMERx_setTimerMode+0x13a>
    111c:	28 f0       	brcs	.+10     	; 0x1128 <TIMERx_setTimerMode+0x12c>
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	89 f0       	breq	.+34     	; 0x1144 <TIMERx_setTimerMode+0x148>
    1122:	23 30       	cpi	r18, 0x03	; 3
    1124:	b1 f0       	breq	.+44     	; 0x1152 <TIMERx_setTimerMode+0x156>
    1126:	1b c0       	rjmp	.+54     	; 0x115e <TIMERx_setTimerMode+0x162>
    1128:	23 b7       	in	r18, 0x33	; 51
    112a:	2f 7e       	andi	r18, 0xEF	; 239
    112c:	23 bf       	out	0x33, r18	; 51
    112e:	23 b7       	in	r18, 0x33	; 51
    1130:	2f 7d       	andi	r18, 0xDF	; 223
    1132:	23 bf       	out	0x33, r18	; 51
    1134:	14 c0       	rjmp	.+40     	; 0x115e <TIMERx_setTimerMode+0x162>
    1136:	23 b7       	in	r18, 0x33	; 51
    1138:	20 61       	ori	r18, 0x10	; 16
    113a:	23 bf       	out	0x33, r18	; 51
    113c:	23 b7       	in	r18, 0x33	; 51
    113e:	2f 7d       	andi	r18, 0xDF	; 223
    1140:	23 bf       	out	0x33, r18	; 51
    1142:	0d c0       	rjmp	.+26     	; 0x115e <TIMERx_setTimerMode+0x162>
    1144:	23 b7       	in	r18, 0x33	; 51
    1146:	2f 7e       	andi	r18, 0xEF	; 239
    1148:	23 bf       	out	0x33, r18	; 51
    114a:	23 b7       	in	r18, 0x33	; 51
    114c:	20 62       	ori	r18, 0x20	; 32
    114e:	23 bf       	out	0x33, r18	; 51
    1150:	06 c0       	rjmp	.+12     	; 0x115e <TIMERx_setTimerMode+0x162>
    1152:	23 b7       	in	r18, 0x33	; 51
    1154:	20 61       	ori	r18, 0x10	; 16
    1156:	23 bf       	out	0x33, r18	; 51
    1158:	23 b7       	in	r18, 0x33	; 51
    115a:	20 62       	ori	r18, 0x20	; 32
    115c:	23 bf       	out	0x33, r18	; 51
    115e:	fc 01       	movw	r30, r24
    1160:	80 85       	ldd	r24, Z+8	; 0x08
    1162:	8c bf       	out	0x3c, r24	; 60
    1164:	89 b7       	in	r24, 0x39	; 57
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	89 bf       	out	0x39, r24	; 57
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	08 95       	ret
    116e:	31 30       	cpi	r19, 0x01	; 1
    1170:	59 f1       	breq	.+86     	; 0x11c8 <TIMERx_setTimerMode+0x1cc>
    1172:	38 f0       	brcs	.+14     	; 0x1182 <TIMERx_setTimerMode+0x186>
    1174:	32 30       	cpi	r19, 0x02	; 2
    1176:	09 f4       	brne	.+2      	; 0x117a <TIMERx_setTimerMode+0x17e>
    1178:	c7 c0       	rjmp	.+398    	; 0x1308 <TIMERx_setTimerMode+0x30c>
    117a:	33 30       	cpi	r19, 0x03	; 3
    117c:	09 f4       	brne	.+2      	; 0x1180 <TIMERx_setTimerMode+0x184>
    117e:	74 c0       	rjmp	.+232    	; 0x1268 <TIMERx_setTimerMode+0x26c>
    1180:	c9 c1       	rjmp	.+914    	; 0x1514 <TIMERx_setTimerMode+0x518>
    1182:	8f b5       	in	r24, 0x2f	; 47
    1184:	88 60       	ori	r24, 0x08	; 8
    1186:	8f bd       	out	0x2f, r24	; 47
    1188:	8f b5       	in	r24, 0x2f	; 47
    118a:	84 60       	ori	r24, 0x04	; 4
    118c:	8f bd       	out	0x2f, r24	; 47
    118e:	8f b5       	in	r24, 0x2f	; 47
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	8f bd       	out	0x2f, r24	; 47
    1194:	8f b5       	in	r24, 0x2f	; 47
    1196:	8d 7f       	andi	r24, 0xFD	; 253
    1198:	8f bd       	out	0x2f, r24	; 47
    119a:	8e b5       	in	r24, 0x2e	; 46
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	8e bd       	out	0x2e, r24	; 46
    11a0:	8e b5       	in	r24, 0x2e	; 46
    11a2:	87 7f       	andi	r24, 0xF7	; 247
    11a4:	8e bd       	out	0x2e, r24	; 46
    11a6:	8f b5       	in	r24, 0x2f	; 47
    11a8:	8f 7b       	andi	r24, 0xBF	; 191
    11aa:	8f bd       	out	0x2f, r24	; 47
    11ac:	8f b5       	in	r24, 0x2f	; 47
    11ae:	8f 77       	andi	r24, 0x7F	; 127
    11b0:	8f bd       	out	0x2f, r24	; 47
    11b2:	8f b5       	in	r24, 0x2f	; 47
    11b4:	8f 7e       	andi	r24, 0xEF	; 239
    11b6:	8f bd       	out	0x2f, r24	; 47
    11b8:	8f b5       	in	r24, 0x2f	; 47
    11ba:	8f 7d       	andi	r24, 0xDF	; 223
    11bc:	8f bd       	out	0x2f, r24	; 47
    11be:	89 b7       	in	r24, 0x39	; 57
    11c0:	84 60       	ori	r24, 0x04	; 4
    11c2:	89 bf       	out	0x39, r24	; 57
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	08 95       	ret
    11c8:	2f b5       	in	r18, 0x2f	; 47
    11ca:	21 60       	ori	r18, 0x01	; 1
    11cc:	2f bd       	out	0x2f, r18	; 47
    11ce:	2f b5       	in	r18, 0x2f	; 47
    11d0:	2d 7f       	andi	r18, 0xFD	; 253
    11d2:	2f bd       	out	0x2f, r18	; 47
    11d4:	2e b5       	in	r18, 0x2e	; 46
    11d6:	2f 7e       	andi	r18, 0xEF	; 239
    11d8:	2e bd       	out	0x2e, r18	; 46
    11da:	2e b5       	in	r18, 0x2e	; 46
    11dc:	27 7f       	andi	r18, 0xF7	; 247
    11de:	2e bd       	out	0x2e, r18	; 46
    11e0:	fc 01       	movw	r30, r24
    11e2:	25 81       	ldd	r18, Z+5	; 0x05
    11e4:	21 30       	cpi	r18, 0x01	; 1
    11e6:	99 f0       	breq	.+38     	; 0x120e <TIMERx_setTimerMode+0x212>
    11e8:	28 f0       	brcs	.+10     	; 0x11f4 <TIMERx_setTimerMode+0x1f8>
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	e9 f0       	breq	.+58     	; 0x1228 <TIMERx_setTimerMode+0x22c>
    11ee:	23 30       	cpi	r18, 0x03	; 3
    11f0:	41 f1       	breq	.+80     	; 0x1242 <TIMERx_setTimerMode+0x246>
    11f2:	33 c0       	rjmp	.+102    	; 0x125a <TIMERx_setTimerMode+0x25e>
    11f4:	2f b5       	in	r18, 0x2f	; 47
    11f6:	2f 7b       	andi	r18, 0xBF	; 191
    11f8:	2f bd       	out	0x2f, r18	; 47
    11fa:	2f b5       	in	r18, 0x2f	; 47
    11fc:	2f 77       	andi	r18, 0x7F	; 127
    11fe:	2f bd       	out	0x2f, r18	; 47
    1200:	2f b5       	in	r18, 0x2f	; 47
    1202:	2f 7e       	andi	r18, 0xEF	; 239
    1204:	2f bd       	out	0x2f, r18	; 47
    1206:	2f b5       	in	r18, 0x2f	; 47
    1208:	2f 7d       	andi	r18, 0xDF	; 223
    120a:	2f bd       	out	0x2f, r18	; 47
    120c:	26 c0       	rjmp	.+76     	; 0x125a <TIMERx_setTimerMode+0x25e>
    120e:	2f b5       	in	r18, 0x2f	; 47
    1210:	20 64       	ori	r18, 0x40	; 64
    1212:	2f bd       	out	0x2f, r18	; 47
    1214:	2f b5       	in	r18, 0x2f	; 47
    1216:	2f 77       	andi	r18, 0x7F	; 127
    1218:	2f bd       	out	0x2f, r18	; 47
    121a:	2f b5       	in	r18, 0x2f	; 47
    121c:	20 61       	ori	r18, 0x10	; 16
    121e:	2f bd       	out	0x2f, r18	; 47
    1220:	2f b5       	in	r18, 0x2f	; 47
    1222:	2f 7d       	andi	r18, 0xDF	; 223
    1224:	2f bd       	out	0x2f, r18	; 47
    1226:	19 c0       	rjmp	.+50     	; 0x125a <TIMERx_setTimerMode+0x25e>
    1228:	2f b5       	in	r18, 0x2f	; 47
    122a:	2f 7b       	andi	r18, 0xBF	; 191
    122c:	2f bd       	out	0x2f, r18	; 47
    122e:	2f b5       	in	r18, 0x2f	; 47
    1230:	20 68       	ori	r18, 0x80	; 128
    1232:	2f bd       	out	0x2f, r18	; 47
    1234:	2f b5       	in	r18, 0x2f	; 47
    1236:	2f 7e       	andi	r18, 0xEF	; 239
    1238:	2f bd       	out	0x2f, r18	; 47
    123a:	2f b5       	in	r18, 0x2f	; 47
    123c:	20 62       	ori	r18, 0x20	; 32
    123e:	2f bd       	out	0x2f, r18	; 47
    1240:	0c c0       	rjmp	.+24     	; 0x125a <TIMERx_setTimerMode+0x25e>
    1242:	2f b5       	in	r18, 0x2f	; 47
    1244:	20 64       	ori	r18, 0x40	; 64
    1246:	2f bd       	out	0x2f, r18	; 47
    1248:	2f b5       	in	r18, 0x2f	; 47
    124a:	20 68       	ori	r18, 0x80	; 128
    124c:	2f bd       	out	0x2f, r18	; 47
    124e:	2f b5       	in	r18, 0x2f	; 47
    1250:	20 61       	ori	r18, 0x10	; 16
    1252:	2f bd       	out	0x2f, r18	; 47
    1254:	2f b5       	in	r18, 0x2f	; 47
    1256:	20 62       	ori	r18, 0x20	; 32
    1258:	2f bd       	out	0x2f, r18	; 47
    125a:	fc 01       	movw	r30, r24
    125c:	20 85       	ldd	r18, Z+8	; 0x08
    125e:	2a bd       	out	0x2a, r18	; 42
    1260:	81 85       	ldd	r24, Z+9	; 0x09
    1262:	8b bd       	out	0x2b, r24	; 43
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	08 95       	ret
    1268:	2f b5       	in	r18, 0x2f	; 47
    126a:	21 60       	ori	r18, 0x01	; 1
    126c:	2f bd       	out	0x2f, r18	; 47
    126e:	2f b5       	in	r18, 0x2f	; 47
    1270:	2d 7f       	andi	r18, 0xFD	; 253
    1272:	2f bd       	out	0x2f, r18	; 47
    1274:	2e b5       	in	r18, 0x2e	; 46
    1276:	20 61       	ori	r18, 0x10	; 16
    1278:	2e bd       	out	0x2e, r18	; 46
    127a:	2e b5       	in	r18, 0x2e	; 46
    127c:	27 7f       	andi	r18, 0xF7	; 247
    127e:	2e bd       	out	0x2e, r18	; 46
    1280:	fc 01       	movw	r30, r24
    1282:	24 81       	ldd	r18, Z+4	; 0x04
    1284:	21 30       	cpi	r18, 0x01	; 1
    1286:	99 f0       	breq	.+38     	; 0x12ae <TIMERx_setTimerMode+0x2b2>
    1288:	28 f0       	brcs	.+10     	; 0x1294 <TIMERx_setTimerMode+0x298>
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	e9 f0       	breq	.+58     	; 0x12c8 <TIMERx_setTimerMode+0x2cc>
    128e:	23 30       	cpi	r18, 0x03	; 3
    1290:	41 f1       	breq	.+80     	; 0x12e2 <TIMERx_setTimerMode+0x2e6>
    1292:	33 c0       	rjmp	.+102    	; 0x12fa <TIMERx_setTimerMode+0x2fe>
    1294:	2f b5       	in	r18, 0x2f	; 47
    1296:	2f 7b       	andi	r18, 0xBF	; 191
    1298:	2f bd       	out	0x2f, r18	; 47
    129a:	2f b5       	in	r18, 0x2f	; 47
    129c:	2f 77       	andi	r18, 0x7F	; 127
    129e:	2f bd       	out	0x2f, r18	; 47
    12a0:	2f b5       	in	r18, 0x2f	; 47
    12a2:	2f 7e       	andi	r18, 0xEF	; 239
    12a4:	2f bd       	out	0x2f, r18	; 47
    12a6:	2f b5       	in	r18, 0x2f	; 47
    12a8:	2f 7d       	andi	r18, 0xDF	; 223
    12aa:	2f bd       	out	0x2f, r18	; 47
    12ac:	26 c0       	rjmp	.+76     	; 0x12fa <TIMERx_setTimerMode+0x2fe>
    12ae:	2f b5       	in	r18, 0x2f	; 47
    12b0:	20 64       	ori	r18, 0x40	; 64
    12b2:	2f bd       	out	0x2f, r18	; 47
    12b4:	2f b5       	in	r18, 0x2f	; 47
    12b6:	2f 77       	andi	r18, 0x7F	; 127
    12b8:	2f bd       	out	0x2f, r18	; 47
    12ba:	2f b5       	in	r18, 0x2f	; 47
    12bc:	20 61       	ori	r18, 0x10	; 16
    12be:	2f bd       	out	0x2f, r18	; 47
    12c0:	2f b5       	in	r18, 0x2f	; 47
    12c2:	2f 7d       	andi	r18, 0xDF	; 223
    12c4:	2f bd       	out	0x2f, r18	; 47
    12c6:	19 c0       	rjmp	.+50     	; 0x12fa <TIMERx_setTimerMode+0x2fe>
    12c8:	2f b5       	in	r18, 0x2f	; 47
    12ca:	2f 7b       	andi	r18, 0xBF	; 191
    12cc:	2f bd       	out	0x2f, r18	; 47
    12ce:	2f b5       	in	r18, 0x2f	; 47
    12d0:	20 68       	ori	r18, 0x80	; 128
    12d2:	2f bd       	out	0x2f, r18	; 47
    12d4:	2f b5       	in	r18, 0x2f	; 47
    12d6:	2f 7e       	andi	r18, 0xEF	; 239
    12d8:	2f bd       	out	0x2f, r18	; 47
    12da:	2f b5       	in	r18, 0x2f	; 47
    12dc:	20 62       	ori	r18, 0x20	; 32
    12de:	2f bd       	out	0x2f, r18	; 47
    12e0:	0c c0       	rjmp	.+24     	; 0x12fa <TIMERx_setTimerMode+0x2fe>
    12e2:	2f b5       	in	r18, 0x2f	; 47
    12e4:	20 64       	ori	r18, 0x40	; 64
    12e6:	2f bd       	out	0x2f, r18	; 47
    12e8:	2f b5       	in	r18, 0x2f	; 47
    12ea:	20 68       	ori	r18, 0x80	; 128
    12ec:	2f bd       	out	0x2f, r18	; 47
    12ee:	2f b5       	in	r18, 0x2f	; 47
    12f0:	20 61       	ori	r18, 0x10	; 16
    12f2:	2f bd       	out	0x2f, r18	; 47
    12f4:	2f b5       	in	r18, 0x2f	; 47
    12f6:	20 62       	ori	r18, 0x20	; 32
    12f8:	2f bd       	out	0x2f, r18	; 47
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 85       	ldd	r18, Z+8	; 0x08
    12fe:	2a bd       	out	0x2a, r18	; 42
    1300:	81 85       	ldd	r24, Z+9	; 0x09
    1302:	8b bd       	out	0x2b, r24	; 43
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	08 95       	ret
    1308:	2f b5       	in	r18, 0x2f	; 47
    130a:	28 60       	ori	r18, 0x08	; 8
    130c:	2f bd       	out	0x2f, r18	; 47
    130e:	2f b5       	in	r18, 0x2f	; 47
    1310:	24 60       	ori	r18, 0x04	; 4
    1312:	2f bd       	out	0x2f, r18	; 47
    1314:	2f b5       	in	r18, 0x2f	; 47
    1316:	2e 7f       	andi	r18, 0xFE	; 254
    1318:	2f bd       	out	0x2f, r18	; 47
    131a:	2f b5       	in	r18, 0x2f	; 47
    131c:	2d 7f       	andi	r18, 0xFD	; 253
    131e:	2f bd       	out	0x2f, r18	; 47
    1320:	2e b5       	in	r18, 0x2e	; 46
    1322:	20 61       	ori	r18, 0x10	; 16
    1324:	2e bd       	out	0x2e, r18	; 46
    1326:	2e b5       	in	r18, 0x2e	; 46
    1328:	27 7f       	andi	r18, 0xF7	; 247
    132a:	2e bd       	out	0x2e, r18	; 46
    132c:	fc 01       	movw	r30, r24
    132e:	23 81       	ldd	r18, Z+3	; 0x03
    1330:	21 30       	cpi	r18, 0x01	; 1
    1332:	99 f0       	breq	.+38     	; 0x135a <TIMERx_setTimerMode+0x35e>
    1334:	28 f0       	brcs	.+10     	; 0x1340 <TIMERx_setTimerMode+0x344>
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	e9 f0       	breq	.+58     	; 0x1374 <TIMERx_setTimerMode+0x378>
    133a:	23 30       	cpi	r18, 0x03	; 3
    133c:	41 f1       	breq	.+80     	; 0x138e <TIMERx_setTimerMode+0x392>
    133e:	33 c0       	rjmp	.+102    	; 0x13a6 <TIMERx_setTimerMode+0x3aa>
    1340:	2f b5       	in	r18, 0x2f	; 47
    1342:	2f 7b       	andi	r18, 0xBF	; 191
    1344:	2f bd       	out	0x2f, r18	; 47
    1346:	2f b5       	in	r18, 0x2f	; 47
    1348:	2f 77       	andi	r18, 0x7F	; 127
    134a:	2f bd       	out	0x2f, r18	; 47
    134c:	2f b5       	in	r18, 0x2f	; 47
    134e:	2f 7e       	andi	r18, 0xEF	; 239
    1350:	2f bd       	out	0x2f, r18	; 47
    1352:	2f b5       	in	r18, 0x2f	; 47
    1354:	2f 7d       	andi	r18, 0xDF	; 223
    1356:	2f bd       	out	0x2f, r18	; 47
    1358:	26 c0       	rjmp	.+76     	; 0x13a6 <TIMERx_setTimerMode+0x3aa>
    135a:	2f b5       	in	r18, 0x2f	; 47
    135c:	20 64       	ori	r18, 0x40	; 64
    135e:	2f bd       	out	0x2f, r18	; 47
    1360:	2f b5       	in	r18, 0x2f	; 47
    1362:	2f 77       	andi	r18, 0x7F	; 127
    1364:	2f bd       	out	0x2f, r18	; 47
    1366:	2f b5       	in	r18, 0x2f	; 47
    1368:	20 61       	ori	r18, 0x10	; 16
    136a:	2f bd       	out	0x2f, r18	; 47
    136c:	2f b5       	in	r18, 0x2f	; 47
    136e:	2f 7d       	andi	r18, 0xDF	; 223
    1370:	2f bd       	out	0x2f, r18	; 47
    1372:	19 c0       	rjmp	.+50     	; 0x13a6 <TIMERx_setTimerMode+0x3aa>
    1374:	2f b5       	in	r18, 0x2f	; 47
    1376:	2f 7b       	andi	r18, 0xBF	; 191
    1378:	2f bd       	out	0x2f, r18	; 47
    137a:	2f b5       	in	r18, 0x2f	; 47
    137c:	20 68       	ori	r18, 0x80	; 128
    137e:	2f bd       	out	0x2f, r18	; 47
    1380:	2f b5       	in	r18, 0x2f	; 47
    1382:	2f 7e       	andi	r18, 0xEF	; 239
    1384:	2f bd       	out	0x2f, r18	; 47
    1386:	2f b5       	in	r18, 0x2f	; 47
    1388:	20 62       	ori	r18, 0x20	; 32
    138a:	2f bd       	out	0x2f, r18	; 47
    138c:	0c c0       	rjmp	.+24     	; 0x13a6 <TIMERx_setTimerMode+0x3aa>
    138e:	2f b5       	in	r18, 0x2f	; 47
    1390:	20 64       	ori	r18, 0x40	; 64
    1392:	2f bd       	out	0x2f, r18	; 47
    1394:	2f b5       	in	r18, 0x2f	; 47
    1396:	20 68       	ori	r18, 0x80	; 128
    1398:	2f bd       	out	0x2f, r18	; 47
    139a:	2f b5       	in	r18, 0x2f	; 47
    139c:	20 61       	ori	r18, 0x10	; 16
    139e:	2f bd       	out	0x2f, r18	; 47
    13a0:	2f b5       	in	r18, 0x2f	; 47
    13a2:	20 62       	ori	r18, 0x20	; 32
    13a4:	2f bd       	out	0x2f, r18	; 47
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 85       	ldd	r18, Z+8	; 0x08
    13aa:	2a bd       	out	0x2a, r18	; 42
    13ac:	81 85       	ldd	r24, Z+9	; 0x09
    13ae:	8b bd       	out	0x2b, r24	; 43
    13b0:	89 b7       	in	r24, 0x39	; 57
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	89 bf       	out	0x39, r24	; 57
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	08 95       	ret
    13ba:	31 30       	cpi	r19, 0x01	; 1
    13bc:	d9 f0       	breq	.+54     	; 0x13f4 <TIMERx_setTimerMode+0x3f8>
    13be:	30 f0       	brcs	.+12     	; 0x13cc <TIMERx_setTimerMode+0x3d0>
    13c0:	32 30       	cpi	r19, 0x02	; 2
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <TIMERx_setTimerMode+0x3ca>
    13c4:	65 c0       	rjmp	.+202    	; 0x1490 <TIMERx_setTimerMode+0x494>
    13c6:	33 30       	cpi	r19, 0x03	; 3
    13c8:	e1 f1       	breq	.+120    	; 0x1442 <TIMERx_setTimerMode+0x446>
    13ca:	a6 c0       	rjmp	.+332    	; 0x1518 <TIMERx_setTimerMode+0x51c>
    13cc:	85 b5       	in	r24, 0x25	; 37
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	85 bd       	out	0x25, r24	; 37
    13d2:	85 b5       	in	r24, 0x25	; 37
    13d4:	8f 7b       	andi	r24, 0xBF	; 191
    13d6:	85 bd       	out	0x25, r24	; 37
    13d8:	85 b5       	in	r24, 0x25	; 37
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	85 bd       	out	0x25, r24	; 37
    13de:	85 b5       	in	r24, 0x25	; 37
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	85 bd       	out	0x25, r24	; 37
    13e4:	85 b5       	in	r24, 0x25	; 37
    13e6:	8f 7d       	andi	r24, 0xDF	; 223
    13e8:	85 bd       	out	0x25, r24	; 37
    13ea:	89 b7       	in	r24, 0x39	; 57
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	89 bf       	out	0x39, r24	; 57
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	08 95       	ret
    13f4:	25 b5       	in	r18, 0x25	; 37
    13f6:	20 64       	ori	r18, 0x40	; 64
    13f8:	25 bd       	out	0x25, r18	; 37
    13fa:	25 b5       	in	r18, 0x25	; 37
    13fc:	27 7f       	andi	r18, 0xF7	; 247
    13fe:	25 bd       	out	0x25, r18	; 37
    1400:	fc 01       	movw	r30, r24
    1402:	25 81       	ldd	r18, Z+5	; 0x05
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	59 f0       	breq	.+22     	; 0x141e <TIMERx_setTimerMode+0x422>
    1408:	23 30       	cpi	r18, 0x03	; 3
    140a:	81 f0       	breq	.+32     	; 0x142c <TIMERx_setTimerMode+0x430>
    140c:	21 11       	cpse	r18, r1
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <TIMERx_setTimerMode+0x43c>
    1410:	25 b5       	in	r18, 0x25	; 37
    1412:	2f 7e       	andi	r18, 0xEF	; 239
    1414:	25 bd       	out	0x25, r18	; 37
    1416:	25 b5       	in	r18, 0x25	; 37
    1418:	2f 7d       	andi	r18, 0xDF	; 223
    141a:	25 bd       	out	0x25, r18	; 37
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <TIMERx_setTimerMode+0x43c>
    141e:	25 b5       	in	r18, 0x25	; 37
    1420:	2f 7e       	andi	r18, 0xEF	; 239
    1422:	25 bd       	out	0x25, r18	; 37
    1424:	25 b5       	in	r18, 0x25	; 37
    1426:	20 62       	ori	r18, 0x20	; 32
    1428:	25 bd       	out	0x25, r18	; 37
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <TIMERx_setTimerMode+0x43c>
    142c:	25 b5       	in	r18, 0x25	; 37
    142e:	20 61       	ori	r18, 0x10	; 16
    1430:	25 bd       	out	0x25, r18	; 37
    1432:	25 b5       	in	r18, 0x25	; 37
    1434:	20 62       	ori	r18, 0x20	; 32
    1436:	25 bd       	out	0x25, r18	; 37
    1438:	fc 01       	movw	r30, r24
    143a:	80 85       	ldd	r24, Z+8	; 0x08
    143c:	83 bd       	out	0x23, r24	; 35
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret
    1442:	25 b5       	in	r18, 0x25	; 37
    1444:	20 64       	ori	r18, 0x40	; 64
    1446:	25 bd       	out	0x25, r18	; 37
    1448:	25 b5       	in	r18, 0x25	; 37
    144a:	28 60       	ori	r18, 0x08	; 8
    144c:	25 bd       	out	0x25, r18	; 37
    144e:	fc 01       	movw	r30, r24
    1450:	24 81       	ldd	r18, Z+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	59 f0       	breq	.+22     	; 0x146c <TIMERx_setTimerMode+0x470>
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	81 f0       	breq	.+32     	; 0x147a <TIMERx_setTimerMode+0x47e>
    145a:	21 11       	cpse	r18, r1
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <TIMERx_setTimerMode+0x48a>
    145e:	25 b5       	in	r18, 0x25	; 37
    1460:	2f 7e       	andi	r18, 0xEF	; 239
    1462:	25 bd       	out	0x25, r18	; 37
    1464:	25 b5       	in	r18, 0x25	; 37
    1466:	2f 7d       	andi	r18, 0xDF	; 223
    1468:	25 bd       	out	0x25, r18	; 37
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <TIMERx_setTimerMode+0x48a>
    146c:	25 b5       	in	r18, 0x25	; 37
    146e:	2f 7e       	andi	r18, 0xEF	; 239
    1470:	25 bd       	out	0x25, r18	; 37
    1472:	25 b5       	in	r18, 0x25	; 37
    1474:	20 62       	ori	r18, 0x20	; 32
    1476:	25 bd       	out	0x25, r18	; 37
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <TIMERx_setTimerMode+0x48a>
    147a:	25 b5       	in	r18, 0x25	; 37
    147c:	20 61       	ori	r18, 0x10	; 16
    147e:	25 bd       	out	0x25, r18	; 37
    1480:	25 b5       	in	r18, 0x25	; 37
    1482:	20 62       	ori	r18, 0x20	; 32
    1484:	25 bd       	out	0x25, r18	; 37
    1486:	fc 01       	movw	r30, r24
    1488:	80 85       	ldd	r24, Z+8	; 0x08
    148a:	83 bd       	out	0x23, r24	; 35
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	08 95       	ret
    1490:	25 b5       	in	r18, 0x25	; 37
    1492:	20 68       	ori	r18, 0x80	; 128
    1494:	25 bd       	out	0x25, r18	; 37
    1496:	25 b5       	in	r18, 0x25	; 37
    1498:	2f 7b       	andi	r18, 0xBF	; 191
    149a:	25 bd       	out	0x25, r18	; 37
    149c:	25 b5       	in	r18, 0x25	; 37
    149e:	28 60       	ori	r18, 0x08	; 8
    14a0:	25 bd       	out	0x25, r18	; 37
    14a2:	fc 01       	movw	r30, r24
    14a4:	23 81       	ldd	r18, Z+3	; 0x03
    14a6:	21 30       	cpi	r18, 0x01	; 1
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <TIMERx_setTimerMode+0x4c8>
    14aa:	28 f0       	brcs	.+10     	; 0x14b6 <TIMERx_setTimerMode+0x4ba>
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	89 f0       	breq	.+34     	; 0x14d2 <TIMERx_setTimerMode+0x4d6>
    14b0:	23 30       	cpi	r18, 0x03	; 3
    14b2:	b1 f0       	breq	.+44     	; 0x14e0 <TIMERx_setTimerMode+0x4e4>
    14b4:	1b c0       	rjmp	.+54     	; 0x14ec <TIMERx_setTimerMode+0x4f0>
    14b6:	25 b5       	in	r18, 0x25	; 37
    14b8:	2f 7e       	andi	r18, 0xEF	; 239
    14ba:	25 bd       	out	0x25, r18	; 37
    14bc:	25 b5       	in	r18, 0x25	; 37
    14be:	2f 7d       	andi	r18, 0xDF	; 223
    14c0:	25 bd       	out	0x25, r18	; 37
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <TIMERx_setTimerMode+0x4f0>
    14c4:	25 b5       	in	r18, 0x25	; 37
    14c6:	20 61       	ori	r18, 0x10	; 16
    14c8:	25 bd       	out	0x25, r18	; 37
    14ca:	25 b5       	in	r18, 0x25	; 37
    14cc:	2f 7d       	andi	r18, 0xDF	; 223
    14ce:	25 bd       	out	0x25, r18	; 37
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <TIMERx_setTimerMode+0x4f0>
    14d2:	25 b5       	in	r18, 0x25	; 37
    14d4:	2f 7e       	andi	r18, 0xEF	; 239
    14d6:	25 bd       	out	0x25, r18	; 37
    14d8:	25 b5       	in	r18, 0x25	; 37
    14da:	20 62       	ori	r18, 0x20	; 32
    14dc:	25 bd       	out	0x25, r18	; 37
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <TIMERx_setTimerMode+0x4f0>
    14e0:	25 b5       	in	r18, 0x25	; 37
    14e2:	20 61       	ori	r18, 0x10	; 16
    14e4:	25 bd       	out	0x25, r18	; 37
    14e6:	25 b5       	in	r18, 0x25	; 37
    14e8:	20 62       	ori	r18, 0x20	; 32
    14ea:	25 bd       	out	0x25, r18	; 37
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 85       	ldd	r24, Z+8	; 0x08
    14f0:	83 bd       	out	0x23, r24	; 35
    14f2:	89 b7       	in	r24, 0x39	; 57
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	89 bf       	out	0x39, r24	; 57
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	08 95       	ret
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	08 95       	ret
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	08 95       	ret
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	08 95       	ret
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	08 95       	ret
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	08 95       	ret

0000151c <__vector_9>:
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <g_Timer1_callBackPtr>
    1542:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <g_Timer1_callBackPtr+0x1>
    1546:	89 2b       	or	r24, r25
    1548:	41 f0       	breq	.+16     	; 0x155a <__vector_9+0x3e>
    154a:	88 b7       	in	r24, 0x38	; 56
    154c:	8b 7f       	andi	r24, 0xFB	; 251
    154e:	88 bf       	out	0x38, r24	; 56
    1550:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <g_Timer1_callBackPtr>
    1554:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <g_Timer1_callBackPtr+0x1>
    1558:	09 95       	icall
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_11>:
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <g_Timer0_callBackPtr>
    15a2:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <g_Timer0_callBackPtr+0x1>
    15a6:	89 2b       	or	r24, r25
    15a8:	41 f0       	breq	.+16     	; 0x15ba <__vector_11+0x3e>
    15aa:	88 b7       	in	r24, 0x38	; 56
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	88 bf       	out	0x38, r24	; 56
    15b0:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <g_Timer0_callBackPtr>
    15b4:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <g_Timer0_callBackPtr+0x1>
    15b8:	09 95       	icall
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <TIMERx_setCallBack>:
    15dc:	63 30       	cpi	r22, 0x03	; 3
    15de:	a8 f4       	brcc	.+42     	; 0x160a <TIMERx_setCallBack+0x2e>
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	a9 f0       	breq	.+42     	; 0x160e <TIMERx_setCallBack+0x32>
    15e4:	61 30       	cpi	r22, 0x01	; 1
    15e6:	59 f0       	breq	.+22     	; 0x15fe <TIMERx_setCallBack+0x22>
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <TIMERx_setCallBack+0x16>
    15ea:	62 30       	cpi	r22, 0x02	; 2
    15ec:	91 f0       	breq	.+36     	; 0x1612 <TIMERx_setCallBack+0x36>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	08 95       	ret
    15f2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <g_Timer0_callBackPtr+0x1>
    15f6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <g_Timer0_callBackPtr>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	08 95       	ret
    15fe:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <g_Timer1_callBackPtr+0x1>
    1602:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <g_Timer1_callBackPtr>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	08 95       	ret
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	08 95       	ret
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <TIMERx_init>:
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	b1 f1       	breq	.+108    	; 0x1686 <TIMERx_init+0x70>
    161a:	fc 01       	movw	r30, r24
    161c:	20 81       	ld	r18, Z
    161e:	23 30       	cpi	r18, 0x03	; 3
    1620:	a0 f5       	brcc	.+104    	; 0x168a <TIMERx_init+0x74>
    1622:	32 81       	ldd	r19, Z+2	; 0x02
    1624:	34 30       	cpi	r19, 0x04	; 4
    1626:	98 f5       	brcc	.+102    	; 0x168e <TIMERx_init+0x78>
    1628:	33 81       	ldd	r19, Z+3	; 0x03
    162a:	34 30       	cpi	r19, 0x04	; 4
    162c:	90 f5       	brcc	.+100    	; 0x1692 <TIMERx_init+0x7c>
    162e:	34 81       	ldd	r19, Z+4	; 0x04
    1630:	34 30       	cpi	r19, 0x04	; 4
    1632:	88 f5       	brcc	.+98     	; 0x1696 <TIMERx_init+0x80>
    1634:	21 30       	cpi	r18, 0x01	; 1
    1636:	71 f0       	breq	.+28     	; 0x1654 <TIMERx_init+0x3e>
    1638:	18 f0       	brcs	.+6      	; 0x1640 <TIMERx_init+0x2a>
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	d1 f0       	breq	.+52     	; 0x1672 <TIMERx_init+0x5c>
    163e:	2d c0       	rjmp	.+90     	; 0x169a <TIMERx_init+0x84>
    1640:	12 be       	out	0x32, r1	; 50
    1642:	13 be       	out	0x33, r1	; 51
    1644:	1c be       	out	0x3c, r1	; 60
    1646:	fc 01       	movw	r30, r24
    1648:	26 81       	ldd	r18, Z+6	; 0x06
    164a:	22 bf       	out	0x32, r18	; 50
    164c:	0e 94 fe 07 	call	0xffc	; 0xffc <TIMERx_setTimerMode>
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	08 95       	ret
    1654:	1c bc       	out	0x2c, r1	; 44
    1656:	1d bc       	out	0x2d, r1	; 45
    1658:	1f bc       	out	0x2f, r1	; 47
    165a:	1e bc       	out	0x2e, r1	; 46
    165c:	1b bc       	out	0x2b, r1	; 43
    165e:	1a bc       	out	0x2a, r1	; 42
    1660:	fc 01       	movw	r30, r24
    1662:	26 81       	ldd	r18, Z+6	; 0x06
    1664:	37 81       	ldd	r19, Z+7	; 0x07
    1666:	3d bd       	out	0x2d, r19	; 45
    1668:	2c bd       	out	0x2c, r18	; 44
    166a:	0e 94 fe 07 	call	0xffc	; 0xffc <TIMERx_setTimerMode>
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	08 95       	ret
    1672:	14 bc       	out	0x24, r1	; 36
    1674:	15 bc       	out	0x25, r1	; 37
    1676:	13 bc       	out	0x23, r1	; 35
    1678:	fc 01       	movw	r30, r24
    167a:	26 81       	ldd	r18, Z+6	; 0x06
    167c:	24 bd       	out	0x24, r18	; 36
    167e:	0e 94 fe 07 	call	0xffc	; 0xffc <TIMERx_setTimerMode>
    1682:	81 60       	ori	r24, 0x01	; 1
    1684:	08 95       	ret
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	08 95       	ret
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	08 95       	ret
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	08 95       	ret
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	08 95       	ret
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	08 95       	ret

0000169e <TIMERx_start>:
    169e:	8a 30       	cpi	r24, 0x0A	; 10
    16a0:	40 f4       	brcc	.+16     	; 0x16b2 <TIMERx_start+0x14>
    16a2:	63 30       	cpi	r22, 0x03	; 3
    16a4:	40 f4       	brcc	.+16     	; 0x16b6 <TIMERx_start+0x18>
    16a6:	96 2f       	mov	r25, r22
    16a8:	68 2f       	mov	r22, r24
    16aa:	89 2f       	mov	r24, r25
    16ac:	0e 94 bb 06 	call	0xd76	; 0xd76 <TIMERx_selectClk>
    16b0:	08 95       	ret
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	08 95       	ret
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	08 95       	ret

000016ba <TIMERx_setValue>:
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	80 f4       	brcc	.+32     	; 0x16de <TIMERx_setValue+0x24>
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <TIMERx_setValue+0x16>
    16c2:	18 f0       	brcs	.+6      	; 0x16ca <TIMERx_setValue+0x10>
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	41 f0       	breq	.+16     	; 0x16d8 <TIMERx_setValue+0x1e>
    16c8:	0c c0       	rjmp	.+24     	; 0x16e2 <TIMERx_setValue+0x28>
    16ca:	62 bf       	out	0x32, r22	; 50
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	08 95       	ret
    16d0:	7d bd       	out	0x2d, r23	; 45
    16d2:	6c bd       	out	0x2c, r22	; 44
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	08 95       	ret
    16d8:	64 bd       	out	0x24, r22	; 36
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	08 95       	ret
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	08 95       	ret
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret

000016e6 <TIMERx_stop>:

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) )
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	38 f5       	brcc	.+78     	; 0x1738 <TIMERx_stop+0x52>
	{
		l_ret = E_NOT_OK;
	}
	else
	{
		switch(en_a_timer_type)
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	79 f0       	breq	.+30     	; 0x170c <TIMERx_stop+0x26>
    16ee:	18 f0       	brcs	.+6      	; 0x16f6 <TIMERx_stop+0x10>
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	b9 f0       	breq	.+46     	; 0x1722 <TIMERx_stop+0x3c>
    16f4:	23 c0       	rjmp	.+70     	; 0x173c <TIMERx_stop+0x56>
		{
			case Timer0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
    16f6:	83 b7       	in	r24, 0x33	; 51
    16f8:	8e 7f       	andi	r24, 0xFE	; 254
    16fa:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
    16fc:	83 b7       	in	r24, 0x33	; 51
    16fe:	8d 7f       	andi	r24, 0xFD	; 253
    1700:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
    1702:	83 b7       	in	r24, 0x33	; 51
    1704:	8b 7f       	andi	r24, 0xFB	; 251
    1706:	83 bf       	out	0x33, r24	; 51
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
			case Timer0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
    170a:	08 95       	ret
				
			case Timer1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
    170c:	8e b5       	in	r24, 0x2e	; 46
    170e:	8e 7f       	andi	r24, 0xFE	; 254
    1710:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
    1712:	8e b5       	in	r24, 0x2e	; 46
    1714:	8d 7f       	andi	r24, 0xFD	; 253
    1716:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
    1718:	8e b5       	in	r24, 0x2e	; 46
    171a:	8b 7f       	andi	r24, 0xFB	; 251
    171c:	8e bd       	out	0x2e, r24	; 46
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    171e:	81 e0       	ldi	r24, 0x01	; 1
			case Timer1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
    1720:	08 95       	ret
				
			case Timer2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
    1722:	85 b5       	in	r24, 0x25	; 37
    1724:	8b 7f       	andi	r24, 0xFB	; 251
    1726:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
    1728:	85 b5       	in	r24, 0x25	; 37
    172a:	8d 7f       	andi	r24, 0xFD	; 253
    172c:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
    172e:	85 b5       	in	r24, 0x25	; 37
    1730:	8e 7f       	andi	r24, 0xFE	; 254
    1732:	85 bd       	out	0x25, r24	; 37
	return l_ret;
}

Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
    1734:	81 e0       	ldi	r24, 0x01	; 1
			case Timer2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
    1736:	08 95       	ret
Std_ReturnType TIMERx_stop(const TimerType_t en_a_timer_type)
{
	Std_ReturnType l_ret = E_OK;
	if( (en_a_timer_type >= INVALID_TIMER_TYPE) )
	{
		l_ret = E_NOT_OK;
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				l_ret |= E_NOT_OK;
    173c:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
	}
	return l_ret;
}
    173e:	08 95       	ret

00001740 <__tablejump2__>:
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	05 90       	lpm	r0, Z+
    1746:	f4 91       	lpm	r31, Z
    1748:	e0 2d       	mov	r30, r0
    174a:	09 94       	ijmp

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
