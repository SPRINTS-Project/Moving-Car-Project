
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000904  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  000009ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ac  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0a  00000000  00000000  000028d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000033e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ac  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f9  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000470d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <main>
  8a:	0c 94 80 04 	jmp	0x900	; 0x900 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:

uint8_t volatile u8_gv_delay = 0; 


ISR(TIMER1_OVF)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	u8_gv_delay++;
  a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	
	TCNT1 = 61629;		// 500 ms with prescaler 1024 and F_CPU = 8M
  aa:	8d eb       	ldi	r24, 0xBD	; 189
  ac:	90 ef       	ldi	r25, 0xF0	; 240
  ae:	9d bd       	out	0x2d, r25	; 45
  b0:	8c bd       	out	0x2c, r24	; 44
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_1>:


ISR(EXT_INT0)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	u8_gv_delay = 0;
  cc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	u8_gs_v_progState = BTN_STOP;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <APP_start>:
{
	
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	0b c0       	rjmp	.+22     	; 0xfc <APP_start+0x1a>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
  e6:	ec 2f       	mov	r30, r28
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e5 59       	subi	r30, 0x95	; 149
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	61 81       	ldd	r22, Z+1	; 0x01
  f4:	80 81       	ld	r24, Z
  f6:	0e 94 4f 03 	call	0x69e	; 0x69e <LED_init>
{
	
	u8_en_btnStateType btnState = BT_PRE_PUSH;
	
	
	for(uint8_t u8_index = 0 ; u8_index < 4 ; u8_index++)
  fa:	cf 5f       	subi	r28, 0xFF	; 255
  fc:	c4 30       	cpi	r28, 0x04	; 4
  fe:	98 f3       	brcs	.-26     	; 0xe6 <APP_start+0x4>
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	12 c0       	rjmp	.+36     	; 0x128 <APP_start+0x46>
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
	{
		BUTTON_init(portd,st_gc_btn_config[u8_index].u8_a_pin,st_gc_btn_config[u8_index].u8_a_ID);
 104:	8c 2f       	mov	r24, r28
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	8e 0f       	add	r24, r30
 114:	9f 1f       	adc	r25, r31
 116:	fc 01       	movw	r30, r24
 118:	ef 59       	subi	r30, 0x9F	; 159
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	42 81       	ldd	r20, Z+2	; 0x02
 11e:	61 81       	ldd	r22, Z+1	; 0x01
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 1a 03 	call	0x634	; 0x634 <BUTTON_init>
	{
		LED_init((st_gc_ledsConfig[u8_index].u8_a_port) , (st_gc_ledsConfig[u8_index].u8_a_pin) );
	}
	
	
	for (uint8_t u8_index = 0 ; u8_index < 2 ; u8_index++)
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	c2 30       	cpi	r28, 0x02	; 2
 12a:	60 f3       	brcs	.-40     	; 0x104 <APP_start+0x22>
	timer1.timer_mode = 0;
	timer1.timer_InitialValue = 61629;
	TIMER_MANGER_init(&timer1);*/
	
	
	GICR = 1<<INT0;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	85 bf       	out	0x35, r24	; 53
	
	
	TCCR1A = 0x00;
 134:	1f bc       	out	0x2f, r1	; 47
	
	TIMSK = 1 << TOIE1;
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 61629;
 13a:	8d eb       	ldi	r24, 0xBD	; 189
 13c:	90 ef       	ldi	r25, 0xF0	; 240
 13e:	9d bd       	out	0x2d, r25	; 45
 140:	8c bd       	out	0x2c, r24	; 44
	
	
	sei();
 142:	78 94       	sei
	while(1)
	{
		BUTTON_mainTask();
 144:	0e 94 0f 03 	call	0x61e	; 0x61e <BUTTON_mainTask>
		while (u8_gs_v_progState == BTN_STOP)
 148:	1c c0       	rjmp	.+56     	; 0x182 <APP_start+0xa0>
		{
			TCCR1B = 0;						// stop timer 1
 14a:	1e bc       	out	0x2e, r1	; 46
			BUTTON_mainTask();
 14c:	0e 94 0f 03 	call	0x61e	; 0x61e <BUTTON_mainTask>
			
			
			LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
			LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 158:	66 e0       	ldi	r22, 0x06	; 6
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
			LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
			LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 168:	67 e0       	ldi	r22, 0x07	; 7
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
			// Here We Will STOP motors
			
			// Here Stop timer 1
			
			
			btnState = BUTTON_getState(st_gc_btn_config[0].u8_a_ID);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 3e 03 	call	0x67c	; 0x67c <BUTTON_getState>
			
			if (btnState == BT_RELEASED)
 176:	85 30       	cpi	r24, 0x05	; 5
 178:	11 f4       	brne	.+4      	; 0x17e <APP_start+0x9c>
			{
				u8_gs_v_progState = BTN_START;
 17a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			u8_gv_delay = 0;
 17e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	
	sei();
	while(1)
	{
		BUTTON_mainTask();
		while (u8_gs_v_progState == BTN_STOP)
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	01 f3       	breq	.-64     	; 0x14a <APP_start+0x68>
 18a:	ce c0       	rjmp	.+412    	; 0x328 <APP_start+0x246>
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
		{
			TCCR1B = 1<< CS10 | 1<<CS12;								// start timer 1
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	8e bd       	out	0x2e, r24	; 46
			if (u8_gv_delay>= 2)										// 1s delay
 190:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	08 f4       	brcc	.+2      	; 0x19a <APP_start+0xb8>
 198:	c7 c0       	rjmp	.+398    	; 0x328 <APP_start+0x246>
			{
				if (u8_gv_delay <= 8 )									// longest side for 3s with speed 50%
 19a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 19e:	89 30       	cpi	r24, 0x09	; 9
 1a0:	88 f4       	brcc	.+34     	; 0x1c4 <APP_start+0xe2>
				{
					// car move forward with 50% speed
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 1a2:	65 e0       	ldi	r22, 0x05	; 5
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 1ba:	67 e0       	ldi	r22, 0x07	; 7
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
 1c2:	b2 c0       	rjmp	.+356    	; 0x328 <APP_start+0x246>
				}
				else if (u8_gv_delay>8 && u8_gv_delay <=9)				// stop for 0.5		
 1c4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1c8:	89 30       	cpi	r24, 0x09	; 9
 1ca:	a8 f0       	brcs	.+42     	; 0x1f6 <APP_start+0x114>
 1cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1d0:	8a 30       	cpi	r24, 0x0A	; 10
 1d2:	88 f4       	brcc	.+34     	; 0x1f6 <APP_start+0x114>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 1dc:	66 e0       	ldi	r22, 0x06	; 6
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
 1f4:	99 c0       	rjmp	.+306    	; 0x328 <APP_start+0x246>
					
					// Here We Will STOP motors
					
					
				}
				else if (u8_gv_delay >9 && u8_gv_delay <=10)			// rotate 90 degree to right
 1f6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	a8 f0       	brcs	.+42     	; 0x228 <APP_start+0x146>
 1fe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 202:	8b 30       	cpi	r24, 0x0B	; 11
 204:	88 f4       	brcc	.+34     	; 0x228 <APP_start+0x146>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 21e:	67 e0       	ldi	r22, 0x07	; 7
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
 226:	80 c0       	rjmp	.+256    	; 0x328 <APP_start+0x246>
				}
				else if (u8_gv_delay > 10 && u8_gv_delay <=11)			// Stop the car for 0.5 s
 228:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 22c:	8b 30       	cpi	r24, 0x0B	; 11
 22e:	a8 f0       	brcs	.+42     	; 0x25a <APP_start+0x178>
 230:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 234:	8c 30       	cpi	r24, 0x0C	; 12
 236:	88 f4       	brcc	.+34     	; 0x25a <APP_start+0x178>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 240:	66 e0       	ldi	r22, 0x06	; 6
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
 258:	67 c0       	rjmp	.+206    	; 0x328 <APP_start+0x246>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay > 11 && u8_gv_delay <= 15)				// short size for 2 s with speed 30%
 25a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 25e:	8c 30       	cpi	r24, 0x0C	; 12
 260:	a8 f0       	brcs	.+42     	; 0x28c <APP_start+0x1aa>
 262:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 266:	80 31       	cpi	r24, 0x10	; 16
 268:	88 f4       	brcc	.+34     	; 0x28c <APP_start+0x1aa>
				{
					// move forward
					LED_on(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 272:	66 e0       	ldi	r22, 0x06	; 6
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 282:	67 e0       	ldi	r22, 0x07	; 7
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
 28a:	4e c0       	rjmp	.+156    	; 0x328 <APP_start+0x246>
				}
				else if (u8_gv_delay>15 && u8_gv_delay <=16)				// stop for 0.5		
 28c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 290:	80 31       	cpi	r24, 0x10	; 16
 292:	a8 f0       	brcs	.+42     	; 0x2be <APP_start+0x1dc>
 294:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 298:	81 31       	cpi	r24, 0x11	; 17
 29a:	88 f4       	brcc	.+34     	; 0x2be <APP_start+0x1dc>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
 2bc:	35 c0       	rjmp	.+106    	; 0x328 <APP_start+0x246>
					// Here We Will STOP motors
					
					
					
				}
				else if (u8_gv_delay >16 && u8_gv_delay <=17)			// rotate 90 degree to right
 2be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2c2:	81 31       	cpi	r24, 0x11	; 17
 2c4:	a8 f0       	brcs	.+42     	; 0x2f0 <APP_start+0x20e>
 2c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2ca:	82 31       	cpi	r24, 0x12	; 18
 2cc:	88 f4       	brcc	.+34     	; 0x2f0 <APP_start+0x20e>
				{
					// rotate to right
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 2ce:	65 e0       	ldi	r22, 0x05	; 5
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
					LED_off(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
 2ee:	1c c0       	rjmp	.+56     	; 0x328 <APP_start+0x246>
				}
				else if (u8_gv_delay > 17 && u8_gv_delay <=18)			// Stop the car for 0.5 s
 2f0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2f4:	82 31       	cpi	r24, 0x12	; 18
 2f6:	a8 f0       	brcs	.+42     	; 0x322 <APP_start+0x240>
 2f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2fc:	83 31       	cpi	r24, 0x13	; 19
 2fe:	88 f4       	brcc	.+34     	; 0x322 <APP_start+0x240>
				{
					// car Stop
					LED_off(st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_port , st_gc_ledsConfig[LED_SHORT_SIDE].u8_a_pin);
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_LONG_SIDE].u8_a_port , st_gc_ledsConfig[LED_LONG_SIDE].u8_a_pin);
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_off(st_gc_ledsConfig[LED_ROTATE].u8_a_port , st_gc_ledsConfig[LED_ROTATE].u8_a_pin);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LED_off>
					LED_on(st_gc_ledsConfig[LED_STOP].u8_a_port , st_gc_ledsConfig[LED_STOP].u8_a_pin);
 318:	67 e0       	ldi	r22, 0x07	; 7
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 57 03 	call	0x6ae	; 0x6ae <LED_on>
 320:	03 c0       	rjmp	.+6      	; 0x328 <APP_start+0x246>
					// Here We Will STOP motors
					
					
				}
				else{
					u8_gv_delay = 2;
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			{
				u8_gs_v_progState = BTN_START;
			}
			u8_gv_delay = 0;
		}
		while (u8_gs_v_progState == BTN_START)
 328:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 32c:	88 23       	and	r24, r24
 32e:	09 f4       	brne	.+2      	; 0x332 <APP_start+0x250>
 330:	2d cf       	rjmp	.-422    	; 0x18c <APP_start+0xaa>
 332:	08 cf       	rjmp	.-496    	; 0x144 <APP_start+0x62>

00000334 <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(u8_en_btnIdType en_a_BtnId)
{
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8BtnValue);
 342:	08 2f       	mov	r16, r24
 344:	10 e0       	ldi	r17, 0x00	; 0
 346:	f8 01       	movw	r30, r16
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	e0 0f       	add	r30, r16
 352:	f1 1f       	adc	r31, r17
 354:	eb 58       	subi	r30, 0x8B	; 139
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	61 81       	ldd	r22, Z+1	; 0x01
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	80 81       	ld	r24, Z
 362:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	61 f4       	brne	.+24     	; 0x384 <vidPrePushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
 36c:	f8 01       	movw	r30, r16
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	0e 0f       	add	r16, r30
 378:	1f 1f       	adc	r17, r31
 37a:	f8 01       	movw	r30, r16
 37c:	eb 58       	subi	r30, 0x8B	; 139
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	0b c0       	rjmp	.+22     	; 0x39a <vidPrePushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 384:	f8 01       	movw	r30, r16
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	0e 0f       	add	r16, r30
 390:	1f 1f       	adc	r17, r31
 392:	f8 01       	movw	r30, r16
 394:	eb 58       	subi	r30, 0x8B	; 139
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	12 82       	std	Z+2, r1	; 0x02
	}
}
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <vidPushState>:
static void vidPushState(u8_en_btnIdType en_a_BtnId)
{
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	1f 92       	push	r1
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 3b4:	08 2f       	mov	r16, r24
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	f8 01       	movw	r30, r16
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e0 0f       	add	r30, r16
 3c4:	f1 1f       	adc	r31, r17
 3c6:	eb 58       	subi	r30, 0x8B	; 139
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	61 81       	ldd	r22, Z+1	; 0x01
 3cc:	ae 01       	movw	r20, r28
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	80 81       	ld	r24, Z
 3d4:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	69 f4       	brne	.+26     	; 0x3f8 <vidPushState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
 3de:	f8 01       	movw	r30, r16
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	0e 0f       	add	r16, r30
 3ea:	1f 1f       	adc	r17, r31
 3ec:	f8 01       	movw	r30, r16
 3ee:	eb 58       	subi	r30, 0x8B	; 139
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	82 83       	std	Z+2, r24	; 0x02
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 3f8:	f8 01       	movw	r30, r16
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	0e 0f       	add	r16, r30
 404:	1f 1f       	adc	r17, r31
 406:	f8 01       	movw	r30, r16
 408:	eb 58       	subi	r30, 0x8B	; 139
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	82 83       	std	Z+2, r24	; 0x02
	}
}
 410:	0f 90       	pop	r0
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <vidPreHoldState>:
static void vidPreHoldState(u8_en_btnIdType en_a_BtnId)
{
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	1f 92       	push	r1
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 42a:	08 2f       	mov	r16, r24
 42c:	10 e0       	ldi	r17, 0x00	; 0
 42e:	f8 01       	movw	r30, r16
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	e0 0f       	add	r30, r16
 43a:	f1 1f       	adc	r31, r17
 43c:	eb 58       	subi	r30, 0x8B	; 139
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	61 81       	ldd	r22, Z+1	; 0x01
 442:	ae 01       	movw	r20, r28
 444:	4f 5f       	subi	r20, 0xFF	; 255
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	80 81       	ld	r24, Z
 44a:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	69 f4       	brne	.+26     	; 0x46e <vidPreHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
 454:	f8 01       	movw	r30, r16
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	0e 0f       	add	r16, r30
 460:	1f 1f       	adc	r17, r31
 462:	f8 01       	movw	r30, r16
 464:	eb 58       	subi	r30, 0x8B	; 139
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	82 83       	std	Z+2, r24	; 0x02
 46c:	0c c0       	rjmp	.+24     	; 0x486 <vidPreHoldState+0x6a>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
 46e:	f8 01       	movw	r30, r16
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	0e 0f       	add	r16, r30
 47a:	1f 1f       	adc	r17, r31
 47c:	f8 01       	movw	r30, r16
 47e:	eb 58       	subi	r30, 0x8B	; 139
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	82 83       	std	Z+2, r24	; 0x02
	}
}
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

00000492 <vidHoldState>:
static void vidHoldState(u8_en_btnIdType en_a_BtnId)
{
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	1f 92       	push	r1
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 4a0:	08 2f       	mov	r16, r24
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	f8 01       	movw	r30, r16
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	e0 0f       	add	r30, r16
 4b0:	f1 1f       	adc	r31, r17
 4b2:	eb 58       	subi	r30, 0x8B	; 139
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	61 81       	ldd	r22, Z+1	; 0x01
 4b8:	ae 01       	movw	r20, r28
 4ba:	4f 5f       	subi	r20, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	80 81       	ld	r24, Z
 4c0:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <vidHoldState+0x52>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 4ca:	f8 01       	movw	r30, r16
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	0e 0f       	add	r16, r30
 4d6:	1f 1f       	adc	r17, r31
 4d8:	f8 01       	movw	r30, r16
 4da:	eb 58       	subi	r30, 0x8B	; 139
 4dc:	ff 4f       	sbci	r31, 0xFF	; 255
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
 4de:	13 82       	std	Z+3, r1	; 0x03
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	82 83       	std	Z+2, r24	; 0x02
	}
	else
	{
		// do nothing
	}
}
 4e4:	0f 90       	pop	r0
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <vidPreReleaseState>:
static void vidPreReleaseState(u8_en_btnIdType en_a_BtnId)
{
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	1f 92       	push	r1
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 4fe:	08 2f       	mov	r16, r24
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	f8 01       	movw	r30, r16
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	e0 0f       	add	r30, r16
 50e:	f1 1f       	adc	r31, r17
 510:	eb 58       	subi	r30, 0x8B	; 139
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	61 81       	ldd	r22, Z+1	; 0x01
 516:	ae 01       	movw	r20, r28
 518:	4f 5f       	subi	r20, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	80 81       	ld	r24, Z
 51e:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	71 f4       	brne	.+28     	; 0x544 <vidPreReleaseState+0x54>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
 528:	f8 01       	movw	r30, r16
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	0e 0f       	add	r16, r30
 534:	1f 1f       	adc	r17, r31
 536:	f8 01       	movw	r30, r16
 538:	eb 58       	subi	r30, 0x8B	; 139
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	83 81       	ldd	r24, Z+3	; 0x03
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	83 83       	std	Z+3, r24	; 0x03
 542:	0d c0       	rjmp	.+26     	; 0x55e <vidPreReleaseState+0x6e>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= st_gc_btnConfig.u8_a_debounceThreshold)
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
 544:	f8 01       	movw	r30, r16
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	0e 0f       	add	r16, r30
 550:	1f 1f       	adc	r17, r31
 552:	f8 01       	movw	r30, r16
 554:	eb 58       	subi	r30, 0x8B	; 139
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	82 83       	std	Z+2, r24	; 0x02
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);	
 55c:	13 82       	std	Z+3, r1	; 0x03
	}
}
 55e:	0f 90       	pop	r0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <vidReleaseState>:
static void vidReleaseState(u8_en_btnIdType en_a_BtnId)
{
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	1f 92       	push	r1
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].port), (st_gs_strBtnInfo[en_a_BtnId].pin),&u8_BtnValue);
 578:	08 2f       	mov	r16, r24
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	f8 01       	movw	r30, r16
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e0 0f       	add	r30, r16
 588:	f1 1f       	adc	r31, r17
 58a:	eb 58       	subi	r30, 0x8B	; 139
 58c:	ff 4f       	sbci	r31, 0xFF	; 255
 58e:	61 81       	ldd	r22, Z+1	; 0x01
 590:	ae 01       	movw	r20, r28
 592:	4f 5f       	subi	r20, 0xFF	; 255
 594:	5f 4f       	sbci	r21, 0xFF	; 255
 596:	80 81       	ld	r24, Z
 598:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	81 11       	cpse	r24, r1
 5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <vidReleaseState+0x4e>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
 5a2:	f8 01       	movw	r30, r16
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	ee 0f       	add	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	0e 0f       	add	r16, r30
 5ae:	1f 1f       	adc	r17, r31
 5b0:	f8 01       	movw	r30, r16
 5b2:	eb 58       	subi	r30, 0x8B	; 139
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	12 82       	std	Z+2, r1	; 0x02
	}
	else
	{
		/* Do nothing */
	}
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	08 95       	ret

000005c4 <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(u8_en_btnIdType en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f9 01       	movw	r30, r18
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	2e 0f       	add	r18, r30
 5d4:	3f 1f       	adc	r19, r31
 5d6:	f9 01       	movw	r30, r18
 5d8:	eb 58       	subi	r30, 0x8B	; 139
 5da:	ff 4f       	sbci	r31, 0xFF	; 255
 5dc:	92 81       	ldd	r25, Z+2	; 0x02
 5de:	92 30       	cpi	r25, 0x02	; 2
 5e0:	91 f0       	breq	.+36     	; 0x606 <vidUpdateBtnState+0x42>
 5e2:	28 f4       	brcc	.+10     	; 0x5ee <vidUpdateBtnState+0x2a>
 5e4:	99 23       	and	r25, r25
 5e6:	49 f0       	breq	.+18     	; 0x5fa <vidUpdateBtnState+0x36>
 5e8:	91 30       	cpi	r25, 0x01	; 1
 5ea:	51 f0       	breq	.+20     	; 0x600 <vidUpdateBtnState+0x3c>
 5ec:	08 95       	ret
 5ee:	94 30       	cpi	r25, 0x04	; 4
 5f0:	81 f0       	breq	.+32     	; 0x612 <vidUpdateBtnState+0x4e>
 5f2:	60 f0       	brcs	.+24     	; 0x60c <vidUpdateBtnState+0x48>
 5f4:	95 30       	cpi	r25, 0x05	; 5
 5f6:	81 f0       	breq	.+32     	; 0x618 <vidUpdateBtnState+0x54>
 5f8:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
 5fa:	0e 94 9a 01 	call	0x334	; 0x334 <vidPrePushState>
		break;
 5fe:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
 600:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <vidPushState>
		break;
 604:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
 606:	0e 94 0e 02 	call	0x41c	; 0x41c <vidPreHoldState>
		break;
 60a:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
 60c:	0e 94 49 02 	call	0x492	; 0x492 <vidHoldState>
		break;
 610:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
 612:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vidPreReleaseState>
		break;
 616:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
 618:	0e 94 b5 02 	call	0x56a	; 0x56a <vidReleaseState>
 61c:	08 95       	ret

0000061e <BUTTON_mainTask>:
/******************************************************************************/
/*********************** Public Functions Implementation **********************/
/******************************************************************************/

void BUTTON_mainTask(void)
{
 61e:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 620:	c0 e0       	ldi	r28, 0x00	; 0
 622:	04 c0       	rjmp	.+8      	; 0x62c <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
 624:	8c 2f       	mov	r24, r28
 626:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<BUTTONS_NUM; u8Index++)
 62a:	cf 5f       	subi	r28, 0xFF	; 255
 62c:	c2 30       	cpi	r28, 0x02	; 2
 62e:	d0 f3       	brcs	.-12     	; 0x624 <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((u8_en_btnIdType)u8Index);
	}
}
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <BUTTON_init>:
u8_en_btnStateType BUTTON_init(uint8_t u8_a_port , uint8_t u8_a_pin, u8_en_btnIdType en_btnId)
{
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	18 2f       	mov	r17, r24
 63c:	d6 2f       	mov	r29, r22
 63e:	c4 2f       	mov	r28, r20
	uint8_t u8_RetVal;
	// Set button pin as input
	u8_RetVal = DIO_init(u8_a_port, u8_a_pin , STD_INPUT);
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_init>
	
	// Enable PULLUP
	u8_RetVal = DIO_writePIN(u8_a_port, u8_a_pin, STD_HIGH);
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	6d 2f       	mov	r22, r29
 64a:	81 2f       	mov	r24, r17
 64c:	0e 94 9a 03 	call	0x734	; 0x734 <DIO_writePIN>
	
	st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
 650:	4c 2f       	mov	r20, r28
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	fa 01       	movw	r30, r20
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	ee 0f       	add	r30, r30
 65c:	ff 1f       	adc	r31, r31
 65e:	e4 0f       	add	r30, r20
 660:	f5 1f       	adc	r31, r21
 662:	eb 58       	subi	r30, 0x8B	; 139
 664:	ff 4f       	sbci	r31, 0xFF	; 255
 666:	12 82       	std	Z+2, r1	; 0x02
	st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
 668:	13 82       	std	Z+3, r1	; 0x03
	st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
 66a:	14 82       	std	Z+4, r1	; 0x04
	st_gs_strBtnInfo[en_btnId].port = u8_a_port;
 66c:	10 83       	st	Z, r17
	st_gs_strBtnInfo[en_btnId].pin = u8_a_pin;
 66e:	d1 83       	std	Z+1, r29	; 0x01
		
		st_gs_strBtnInfo[u8Index].u8_a_btnState     = BT_PRE_PUSH;
		st_gs_strBtnInfo[u8Index].u8_a_debounceThreshold  = ((uint8_t)0U);
		st_gs_strBtnInfo[u8Index].u8_a_holdThreshold      = ((uint8_t)0U);
	}*/
	if (u8_RetVal == DIO_E_OK)
 670:	81 11       	cpse	r24, r1
	{
		return BT_PRE_PUSH;
	}
	else
	{
		return BT_UNDEFINED;
 672:	86 e0       	ldi	r24, 0x06	; 6
	}
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	08 95       	ret

0000067c <BUTTON_getState>:
u8_en_btnStateType BUTTON_getState(u8_en_btnIdType en_btnId)
{
	u8_en_btnStateType enuReturn;
	
	if(en_btnId < BUTTONS_NUM)
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	68 f4       	brcc	.+26     	; 0x69a <BUTTON_getState+0x1e>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	fc 01       	movw	r30, r24
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	8e 0f       	add	r24, r30
 68e:	9f 1f       	adc	r25, r31
 690:	fc 01       	movw	r30, r24
 692:	eb 58       	subi	r30, 0x8B	; 139
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
 69a:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
 69c:	08 95       	ret

0000069e <LED_init>:
};
*/

u8_en_ledErrorType LED_init(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_init(u8_a_port, u8_a_pin, STD_OUTPUT);
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_init>
}
 6a4:	08 95       	ret

000006a6 <LED_off>:



u8_en_ledErrorType LED_off(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_OFF);
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	0e 94 9a 03 	call	0x734	; 0x734 <DIO_writePIN>
}
 6ac:	08 95       	ret

000006ae <LED_on>:
u8_en_ledErrorType LED_on(uint8_t u8_a_port , uint8_t u8_a_pin)
{
	return DIO_writePIN(u8_a_port,u8_a_pin ,LED_ON);
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	0e 94 9a 03 	call	0x734	; 0x734 <DIO_writePIN>
 6b4:	08 95       	ret

000006b6 <main>:
#include "APP/app.h"


int main(void)
{
	APP_start();
 6b6:	0e 94 71 00 	call	0xe2	; 0xe2 <APP_start>
}
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	08 95       	ret

000006c0 <DIO_init>:


u8_en_dioErrors DIO_init (en_dioPortsType port, en_dioPinsType pin, u8_en_dioDirType direction)
{
	
	if (pin < DIO_MAX_PINS)
 6c0:	68 30       	cpi	r22, 0x08	; 8
 6c2:	a0 f5       	brcc	.+104    	; 0x72c <DIO_init+0x6c>
	{
		if (port == porta)
 6c4:	81 11       	cpse	r24, r1
 6c6:	0b c0       	rjmp	.+22     	; 0x6de <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
 6c8:	8a b3       	in	r24, 0x1a	; 26
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_init+0x12>
 6ce:	44 0f       	add	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_init+0xe>
 6d6:	48 2b       	or	r20, r24
 6d8:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret
		}
		else if (port == portb)
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	59 f4       	brne	.+22     	; 0x6f8 <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
 6e2:	87 b3       	in	r24, 0x17	; 23
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_init+0x2c>
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_init+0x28>
 6f0:	48 2b       	or	r20, r24
 6f2:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	08 95       	ret
		}
		else if (port == portc)
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	59 f4       	brne	.+22     	; 0x712 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
 6fc:	84 b3       	in	r24, 0x14	; 20
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_init+0x46>
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_init+0x42>
 70a:	48 2b       	or	r20, r24
 70c:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	08 95       	ret
		}
		else if (port == portd)
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	69 f4       	brne	.+26     	; 0x730 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
 716:	81 b3       	in	r24, 0x11	; 17
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_init+0x60>
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_init+0x5c>
 724:	48 2b       	or	r20, r24
 726:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 730:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 732:	08 95       	ret

00000734 <DIO_writePIN>:
u8_en_dioErrors DIO_writePIN (en_dioPortsType port, en_dioPinsType pin, u8_en_dioLevelType state)
{
	if (pin < DIO_MAX_PINS)
 734:	68 30       	cpi	r22, 0x08	; 8
 736:	08 f0       	brcs	.+2      	; 0x73a <DIO_writePIN+0x6>
 738:	74 c0       	rjmp	.+232    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		if (port == porta)
 73a:	81 11       	cpse	r24, r1
 73c:	1b c0       	rjmp	.+54     	; 0x774 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
 73e:	41 30       	cpi	r20, 0x01	; 1
 740:	61 f4       	brne	.+24     	; 0x75a <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
 742:	2b b3       	in	r18, 0x1b	; 27
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_writePIN+0x1a>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	6a 95       	dec	r22
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_writePIN+0x16>
 752:	82 2b       	or	r24, r18
 754:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
 75a:	2b b3       	in	r18, 0x1b	; 27
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_writePIN+0x32>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_writePIN+0x2e>
 76a:	80 95       	com	r24
 76c:	82 23       	and	r24, r18
 76e:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	08 95       	ret
		}
		else if (port == portb)
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	d9 f4       	brne	.+54     	; 0x7ae <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
 778:	41 30       	cpi	r20, 0x01	; 1
 77a:	61 f4       	brne	.+24     	; 0x794 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
 77c:	28 b3       	in	r18, 0x18	; 24
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_writePIN+0x54>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_writePIN+0x50>
 78c:	82 2b       	or	r24, r18
 78e:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
 794:	28 b3       	in	r18, 0x18	; 24
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_writePIN+0x6c>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_writePIN+0x68>
 7a4:	80 95       	com	r24
 7a6:	82 23       	and	r24, r18
 7a8:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	08 95       	ret
		}
		else if (port == portc)
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	d9 f4       	brne	.+54     	; 0x7e8 <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
 7b2:	41 30       	cpi	r20, 0x01	; 1
 7b4:	61 f4       	brne	.+24     	; 0x7ce <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
 7b6:	25 b3       	in	r18, 0x15	; 21
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_writePIN+0x8e>
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	6a 95       	dec	r22
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_writePIN+0x8a>
 7c6:	82 2b       	or	r24, r18
 7c8:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
 7ce:	25 b3       	in	r18, 0x15	; 21
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_writePIN+0xa6>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	6a 95       	dec	r22
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_writePIN+0xa2>
 7de:	80 95       	com	r24
 7e0:	82 23       	and	r24, r18
 7e2:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	08 95       	ret
		}
		else if (port == portd)
 7e8:	83 30       	cpi	r24, 0x03	; 3
 7ea:	e9 f4       	brne	.+58     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		{
			if (state == STD_HIGH)
 7ec:	41 30       	cpi	r20, 0x01	; 1
 7ee:	61 f4       	brne	.+24     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			{
				WR_PORT_D |= (1U << pin);
 7f0:	22 b3       	in	r18, 0x12	; 18
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_writePIN+0xc8>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_writePIN+0xc4>
 800:	82 2b       	or	r24, r18
 802:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
 808:	22 b3       	in	r18, 0x12	; 18
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	6a 95       	dec	r22
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	80 95       	com	r24
 81a:	82 23       	and	r24, r18
 81c:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 826:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
 828:	08 95       	ret

0000082a <DIO_readPIN>:
u8_en_dioErrors DIO_readPIN (en_dioPortsType port, en_dioPinsType pin, uint8_t* value)
{
	if (pin < DIO_MAX_PINS)
 82a:	68 30       	cpi	r22, 0x08	; 8
 82c:	08 f0       	brcs	.+2      	; 0x830 <DIO_readPIN+0x6>
 82e:	64 c0       	rjmp	.+200    	; 0x8f8 <__stack+0x99>
	{
		if (port == porta)
 830:	81 11       	cpse	r24, r1
 832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
 834:	79 b3       	in	r23, 0x19	; 25
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	9c 01       	movw	r18, r24
 83c:	06 2e       	mov	r0, r22
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_readPIN+0x1a>
 840:	22 0f       	add	r18, r18
 842:	33 1f       	adc	r19, r19
 844:	0a 94       	dec	r0
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_readPIN+0x16>
 848:	87 2f       	mov	r24, r23
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	82 23       	and	r24, r18
 84e:	93 23       	and	r25, r19
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_readPIN+0x2c>
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	6a 95       	dec	r22
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_readPIN+0x28>
 85a:	fa 01       	movw	r30, r20
 85c:	80 83       	st	Z, r24
			return DIO_E_OK;
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret
		}
		else if (port == portb)
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	b9 f4       	brne	.+46     	; 0x894 <__stack+0x35>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
 866:	76 b3       	in	r23, 0x16	; 22
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	9c 01       	movw	r18, r24
 86e:	06 2e       	mov	r0, r22
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	22 0f       	add	r18, r18
 874:	33 1f       	adc	r19, r19
 876:	0a 94       	dec	r0
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	87 2f       	mov	r24, r23
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	82 23       	and	r24, r18
 880:	93 23       	and	r25, r19
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	6a 95       	dec	r22
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	fa 01       	movw	r30, r20
 88e:	80 83       	st	Z, r24
			return DIO_E_OK;
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	08 95       	ret
		}
		else if (port == portc)
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	b9 f4       	brne	.+46     	; 0x8c6 <__stack+0x67>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
 898:	73 b3       	in	r23, 0x13	; 19
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	9c 01       	movw	r18, r24
 8a0:	06 2e       	mov	r0, r22
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	0a 94       	dec	r0
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	87 2f       	mov	r24, r23
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	82 23       	and	r24, r18
 8b2:	93 23       	and	r25, r19
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	6a 95       	dec	r22
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	fa 01       	movw	r30, r20
 8c0:	80 83       	st	Z, r24
			return DIO_E_OK;
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	08 95       	ret
		}
		else if (port == portd)
 8c6:	83 30       	cpi	r24, 0x03	; 3
 8c8:	c9 f4       	brne	.+50     	; 0x8fc <__stack+0x9d>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
 8ca:	70 b3       	in	r23, 0x10	; 16
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	9c 01       	movw	r18, r24
 8d2:	06 2e       	mov	r0, r22
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	22 0f       	add	r18, r18
 8d8:	33 1f       	adc	r19, r19
 8da:	0a 94       	dec	r0
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	87 2f       	mov	r24, r23
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	82 23       	and	r24, r18
 8e4:	93 23       	and	r25, r19
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	6a 95       	dec	r22
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	fa 01       	movw	r30, r20
 8f2:	80 83       	st	Z, r24
			return DIO_E_OK;
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
 8fc:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
